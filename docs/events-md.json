[{"text":"Using Events","comments":[""],"children":[{"text":"Event Handler Structure","comments":["","All DocPad events receive two arguments (both optional): ","","1. `opts`, an simple object containing any options that the event provides","1. `next`, a completion callback","","DocPad's events are fired in a *synchronous* (or *serial*) fashion. In other words, when the first event runs until finished, then the next event fires and runs until finished, and so on. ","","*Asynchronous* code, however, has no implicit guarantees about the order of execution. It will fire the first event, and may then immediately fire the second event while the first is still running. ","","That's why asynchronous code requires callbacks. When the first event is done, it will run the callback function it was invoked with.  It's the callback's job to signal when it's okay to proceed to the next event. ","","Node.js itself is built for asynchronous execution, so it's pretty common for Node.js programs to run asynchronously. ","","Since DocPad's events are run synchronously, omitting the `next` callback is perfectly valid (even encouraged) if you're using DocPad in your own synchronous code. (Of course, you're free to write in whatever style works best for you! If you enjoy coding in the asynchronous style, the `next` callback is available for you.)","",""]},{"text":"Inside your Configuration File","comments":["","You can bind to events in your DocPad configuration file by adding them to the `events` property. ","","**Example:** Let's use a `docpad.coffee` configuration file. Binding to the `serverExtend` event would look like so:","","``` coffeescript","# Export Plugin","module.exports = (BasePlugin) ->","\t# Define Plugin","\tclass RenderPlugin extends BasePlugin","\t\t# ...","","\t\t# Render some content synchronously","\t\trender: (opts) ->","\t\t\t# Prepare","\t\t\t{inExtension,outExtension,content} = opts","\t\t\tdocpad = @docpad","","\t\t\t# Perform our rendering","\t\t\t# ...","","```","","The context (what `this`/`@` points to) of event handlers in your plugin will be your plugin's instance.","",""]}]},{"text":"Available Events","comments":["","Sorted by their flow of execution within DocPad","",""],"children":[{"text":"extendTemplateData","comments":["Called each time the configuration for DocPad reloads. Called after most of the configuration has loaded and when it is time to extend our template data.","","**Options:**","- `templateData` the object to inject your additions to","","Use to inject new template data variables and helpers into the template data.","","**Examples:**","- [Services Plugin](/plugin/services)","- [Feedr Plugin](/plugin/feedr)","",""]},{"text":"extendCollections","comments":["Called each time the configuration for DocPad reloads. Called after most of the configuration has loaded and when it is time to extend our collections.","","Use to create additional collections.","","**Examples:**","- [Partials Plugin](/plugin/partials)","","",""]},{"text":"docpadLoaded","comments":["Called each time the configuration for DocPad reloads. Called before `docpadReady` as we have to load the configuration in order to be ready.","","",""]},{"text":"docpadReady","comments":["Called once DocPad when DocPad is now ready to perform actions which is once it has finished initializing and loading its configuration. Partnered with the `docpadDestroy` event.","",""]},{"text":"consoleSetup","comments":["Called once the command line interface for DocPad has loaded.","","**Options:**","- `consoleInterface` the console interface instance we are using","- `commander` the instance of [commander](https://github.com/visionmedia/commander.js) we are using","","Use to extend the console interface with additional commands.","","**Examples:**","- [GitHub Pages Plugin](/plugin/ghpages)","","",""]},{"text":"populateCollectionsBefore","comments":["Called just before we start to insert dynamic files into the database. Called before each generation, just before the `generateBefore` event. Partnered with the `populateCollections` event.",""]},{"text":"populateCollections","comments":["Called just after we've inserted dynamic files into the collections. Called before each generation, just before the `generateBefore` event. Partnered with the `populateCollectionsBefore` event.","","Use this for inserting your dynamic files into the database.","","**Examples:**","- [Tumblr Importer Plugin](/plugin/tumblr)","","",""]},{"text":"generateBefore","comments":["Called just before we start generating your project. Partnered with the `generateAfter` event.","","**Options:**","- `reset` whether or not this is a partial- (`false`) or full-regeneration (`true`)","- <del><code>server</code></del> ","  <ins>Deprecated; use `getServer()` API method instead</ins>","",""]},{"text":"<del><code>parseBefore</code></del>","comments":["<ins>Deprecated/removed since DocPad v6.58.0.</ins> ","See [issue #736](https://github.com/bevry/docpad/issues/736) for information.",""]},{"text":"<del><code>parseAfter</code></del>","comments":["<ins>Deprecated/removed since DocPad v6.58.0.</ins> ","See [issue #736](https://github.com/bevry/docpad/issues/736) for information.","",""]},{"text":"conextualizeBefore","comments":["Called just before we start to contextualize all the files. Partnered with the `contextualizeAfter` event. Contextualizing is the process of adding layouts and awareness of other documents to our document.","","**Options:**","- `collection` the collection we are working with","- <del><code>templateData</code></del>","  <ins>Deprecated; use `extendTemplateData` event instead</ins>",""]},{"text":"contextualizeAfter","comments":["Called just after we've finished contextualize all the files. Partnered with the `conextualizeBefore` event. Contextualizing is the process of adding layouts and awareness of other documents to our document.","","**Options:**","- `collection` the collection we are working with","- <del><code>templateData</code></del>","  <ins>Deprecated; use `extendTemplateData` event instead</ins>","","",""]},{"text":"renderBefore","comments":["Called just before we start rendering all the files. Partnered with the `renderAfter` event.","","**Options:**","- `collection` a [query-engine][] [collection][] containing the models we are about to render","- `templateData` the template data that will be provided to the documents","","",""]},{"text":"renderCollectionBefore","comments":["Triggered before a render collection is about to be rendered. Added by [Bruno Heridet](https://github.com/Delapouite) with [Pull Request #608](https://github.com/bevry/docpad/pull/608).","","**Options:**","- `collection` a [query-engine][] [collection][] containing the models we are about to render","- `renderPass` which render pass is this render collection for?","",""]},{"text":"renderCollectionAfter","comments":["Triggered before a render collection is about to be rendered. Added by [Bruno Heridet](https://github.com/Delapouite) with [Pull Request #608](https://github.com/bevry/docpad/pull/608).","","**Options:**","- `collection` a [query-engine][] [collection][] containing the models we are about to render","- `renderPass` which render pass is this render collection for?","","",""]},{"text":"render","comments":["Called per document, for each extension conversion.","","Use to render one extension to another.","","**Options:**","- `inExtension` the extension we are rendering from","- `outExtension` the extension we are rendering to","- `templateData` the template data that we will use for this document's rendering","- `file` the model instance for the document we are rendering","- `content` the current content that this document contains, you shall overwrite this option with any updates you do","","**Notes:** The file `blah.html.md.eco` will call trigger this event twice. The first time for the `eco` to `md` conversion. The second time for the `md` to `html` conversion.","","**Example:** You would check the `inExtension` and `outExtension` options to make sure we only apply our rendering for the desired extension conversions. To apply the rendering, we would write our result back to `opts.content`. For example here is a render event handler that will convert the content of files to upper case when named like `file.txt.captialize|uppercase|upper`:",""]}]}]