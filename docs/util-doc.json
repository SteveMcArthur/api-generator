{"text":"Docpad Lib","id":"root","children":[{"id":"F0","text":"docpadUtil","typ":"class","icon":"class","comments":["Export"],"code":[],"children":[{"id":"F1","text":"isStandardEncoding","typ":"method","icon":"method","comments":["Standard Encodings"],"code":["\t\treturn encoding.toLowerCase() in ['ascii', 'utf8', 'utf-8']",""],"children":[]},{"id":"F2","text":"getLocalDocPadExecutable","typ":"method","icon":"method","comments":["Get Local DocPad Installation Executable"],"code":["\t\treturn pathUtil.join(process.cwd(), 'node_modules', 'docpad', 'bin', 'docpad')",""],"children":[]},{"id":"F3","text":"isLocalDocPadExecutable","typ":"method","icon":"method","comments":["Is Local DocPad Installation"],"code":["\t\treturn docpadUtil.getLocalDocPadExecutable() in process.argv",""],"children":[]},{"id":"F4","text":"getLocalDocPadExecutableExistance","typ":"method","icon":"method","comments":["Does Local DocPad Installation Exist?"],"code":["\t\treturn require('safefs').existsSync(docpadUtil.getLocalDocPadExecutable()) is true",""],"children":[]},{"id":"F5","text":"startLocalDocPadExecutable","typ":"method","icon":"method","comments":["Spawn Local DocPad Executable"],"code":["\t\targs = process.argv.slice(2)","\t\tcommand = ['node', docpadUtil.getLocalDocPadExecutable()].concat(args)","\t\treturn require('safeps').spawn command, {stdio:'inherit'}, (err) ->","\t\t\tif err","\t\t\t\tif next","\t\t\t\t\tnext(err)","\t\t\t\telse","\t\t\t\t\tmessage = 'An error occured within the child DocPad instance: '+err.message+'\\n'","\t\t\t\t\tprocess.stderr.write(message)","\t\t\telse","\t\t\t\tnext?()",""],"children":[]},{"id":"F6","text":"getBasename","typ":"method","icon":"method","comments":["get a filename without the extension"],"code":["\t\tif filename[0] is '.'","\t\t\tbasename = filename.replace(/^(\\.[^\\.]+)\\..*$/, '$1')","\t\telse","\t\t\tbasename = filename.replace(/\\..*$/, '')","\t\treturn basename",""],"children":[]},{"id":"F7","text":"getExtensions","typ":"method","icon":"method","comments":["get the extensions of a filename"],"code":["\t\textensions = filename.split(/\\./g).slice(1)","\t\treturn extensions",""],"children":[]},{"id":"F8","text":"getExtension","typ":"method","icon":"method","comments":["get the extension from a bunch of extensions"],"code":["\t\tunless require('typechecker').isArray(extensions)","\t\t\textensions = docpadUtil.getExtensions(extensions)","","\t\tif extensions.length isnt 0","\t\t\textension = extensions.slice(-1)[0] or null","\t\telse","\t\t\textension = null","","\t\treturn extension",""],"children":[]},{"id":"F9","text":"getDirPath","typ":"method","icon":"method","comments":["get the dir path"],"code":["\t\treturn pathUtil.dirname(path) or ''",""],"children":[]},{"id":"F10","text":"getFilename","typ":"method","icon":"method","comments":["get filename"],"code":["\t\treturn pathUtil.basename(path)",""],"children":[]},{"id":"F11","text":"getOutFilename","typ":"prop","icon":"prop","comments":["get out filename"],"code":["(basename, extension) ->","\t\tif basename is '.'+extension  # prevent: .htaccess.htaccess","\t\t\treturn basename","\t\telse","\t\t\treturn basename+(if extension then '.'+extension else '')",""],"children":[]},{"id":"F12","text":"getUrl","typ":"method","icon":"method","comments":["get url"],"code":["\t\treturn '/'+relativePath.replace(/[\\\\]/g, '/')",""],"children":[]},{"id":"F13","text":"getSlug","typ":"method","icon":"method","comments":["get slug"],"code":["\t\treturn require('bal-util').generateSlugSync(relativeBase)",""],"children":[]},{"id":"F14","text":"action","typ":"prop","icon":"prop","comments":["Perform an action","next(err,...), ... = any special arguments from the action"],"code":["(action,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tme = @","\t\trunner = me.getActionRunner()","","\t\tif Array.isArray(action)","\t\t\tactions = action","\t\telse","\t\t\tactions = action.split(/[,\\s]+/g)","","\t\tactions = _.uniq _.compact actions","","\t\tnext or= (err) =>","\t\t\t@emit('error', err)  if err","","\t\tif actions.length is 0","\t\t\terr = new Error('No action was given')","\t\t\tnext(err)","\t\t\treturn me","","\t\telse if actions.length > 1","\t\t\ttasks = new TaskGroup('action tasks', {next})","\t\t\tactions.forEach (action) ->","\t\t\t\ttasks.addTask 'actions completion callback', (complete) ->","\t\t\t\t\tme.action(action, opts, complete)","\t\t\ttasks.run()","\t\t\treturn me","","\t\taction = actions[0]","","\t\tactionMethod = me[action].bind(me)","","\t\tunless actionMethod","\t\t\terr = new Error(util.format(locale.actionNonexistant, action))","\t\t\treturn next(err)","","\t\trunner.addTask 'action completion callback', (complete) ->","\t\t\t# Forward","\t\t\tactionMethod opts, (args...) ->","\t\t\t\t# Prepare","\t\t\t\terr = args[0]","","\t\t\t\t# Continue to our completion callback","\t\t\t\tnext(args...)","","\t\t\t\t# Continue down the action queue","\t\t\t\tcomplete()  # ignore the error","","\t\tme",""],"children":[]}]}]}