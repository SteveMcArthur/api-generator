{"text":"Docpad Lib","id":"root","children":[{"id":"E0","text":"PluginTester","typ":"class","icon":"class","comments":["Requires","Prepare","We want the plugn port to be a semi-random number above 2000","Plugin Tester"],"code":["\t@extend: extendOnClass",""],"children":[{"id":"E1","text":"config","typ":"prop","icon":"prop","comments":["Add support for PluginTester.extend(proto)","Plugin Config"],"code":[],"children":[{"id":"E2","text":"testerName","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E3","text":"pluginName","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E4","text":"pluginPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E5","text":"testPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E6","text":"outExpectedPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E7","text":"removeWhitespace","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"E8","text":"contentRemoveRegex","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E9","text":"autoExit","typ":"string","icon":"string","comments":[],"code":["'safe'"],"children":[]}]},{"id":"E10","text":"docpadConfig","typ":"prop","icon":"prop","comments":["DocPad Config"],"code":[],"children":[{"id":"E11","text":"global","typ":"prop","icon":"prop","comments":[],"code":["true"],"children":[]},{"id":"E12","text":"port","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E13","text":"logLevel","typ":"prop","icon":"prop","comments":[],"code":["(if ('-d' in process.argv) then 7 else 5)"],"children":[]},{"id":"E14","text":"rootPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E15","text":"outPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E16","text":"srcPath","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E17","text":"pluginPaths","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E18","text":"enableUnlistedPlugins","typ":"prop","icon":"prop","comments":[],"code":["true"],"children":[]},{"id":"E19","text":"enabledPlugins","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"E20","text":"skipUnsupportedPlugins","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"E21","text":"catchExceptions","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"E22","text":"environment","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]}]},{"id":"E23","text":"docpad","typ":"prop","icon":"prop","comments":["DocPad Instance"],"code":["null"],"children":[]},{"id":"E24","text":"constructor","typ":"prop","icon":"prop","comments":["Constructor"],"code":["(config={},docpadConfig={},next) ->","\t\ttester = @","\t\t@config = extendr.deepExtendPlainObjects({}, PluginTester::config, @config, config)","\t\t@docpadConfig = extendr.deepExtendPlainObjects({}, PluginTester::docpadConfig, @docpadConfig, docpadConfig)","\t\t@docpadConfig.port ?= ++pluginPort","\t\t@config.testerName ?= @config.pluginName","","\t\t@config.testPath or= pathUtil.join(@config.pluginPath, 'test')","\t\t@config.outExpectedPath or= pathUtil.join(@config.testPath, 'out-expected')","","\t\t@docpadConfig.rootPath or= @config.testPath","\t\t@docpadConfig.outPath or= pathUtil.join(@docpadConfig.rootPath, 'out')","\t\t@docpadConfig.srcPath or= pathUtil.join(@docpadConfig.rootPath, 'src')","\t\t@docpadConfig.pluginPaths ?= [@config.pluginPath]","\t\tdefaultEnabledPlugins = {}","\t\tdefaultEnabledPlugins[@config.pluginName] = true","\t\t@docpadConfig.enabledPlugins or= defaultEnabledPlugins","","\t\tjoe.describe @config.testerName, (suite,task) ->","\t\t\ttester.describe = tester.suite = suite","\t\t\ttester.it = tester.test = task","\t\t\ttester.done = tester.exit = (next) ->","\t\t\t\ttester.docpad?.action('destroy', next)","\t\t\tnext?(null, tester)","","\t\t@",""],"children":[]},{"id":"E25","text":"getConfig","typ":"method","icon":"method","comments":["Apply Configuration","Extend Configuration","Extend DocPad Configuration","Test API","Chain","Get Tester Configuration"],"code":["\t\treturn @config",""],"children":[]},{"id":"E26","text":"getPlugin","typ":"method","icon":"method","comments":["Get Plugin Instance"],"code":["\t\treturn @docpad.getPlugin(@getConfig().pluginName)",""],"children":[]},{"id":"E27","text":"testCreate","typ":"method","icon":"method","comments":["Create DocPad Instance"],"code":["\t\ttester = @","\t\tdocpadConfig = @docpadConfig","","\t\t@test \"create\", (done) ->","\t\t\tDocPad.createInstance docpadConfig, (err, docpad) ->","\t\t\t\treturn done(err)  if err","\t\t\t\ttester.docpad = docpad","","\t\t\t\t# init docpad in case the plugin is starting from scratch","\t\t\t\ttester.docpad.action 'init', (err) ->","\t\t\t\t\t# ignore error as it is probably just related to there already being something","","\t\t\t\t\t# clean up the docpad out directory","\t\t\t\t\ttester.docpad.action 'clean', (err) ->","\t\t\t\t\t\treturn done(err)  if err","","\t\t\t\t\t\t# install anything on the website that needs to be installed","\t\t\t\t\t\ttester.docpad.action('install', done)","","\t\t@",""],"children":[]},{"id":"E28","text":"testLoad","typ":"method","icon":"method","comments":["Prepare","Create Instance","Chain","Test Loaded"],"code":["\t\ttester = @","","\t\t@test \"load plugin #{tester.config.pluginName}\", (done) ->","\t\t\ttester.docpad.loadedPlugin tester.config.pluginName, (err,loaded) ->","\t\t\t\treturn done(err)  if err","\t\t\t\texpect(loaded).to.be.ok","\t\t\t\treturn done()","","\t\t@",""],"children":[]},{"id":"E29","text":"testServer","typ":"method","icon":"method","comments":["Prepare","Test","Chain","Perform Server"],"code":["\t\ttester = @","","\t\t@test \"server\", (done) ->","\t\t\ttester.docpad.action 'server', (err) ->","\t\t\t\treturn done(err)","","\t\t@",""],"children":[]},{"id":"E30","text":"testGenerate","typ":"method","icon":"method","comments":["Prepare","Handle","Chain","Test Generate"],"code":["\t\ttester = @","","\t\t@test \"generate\", (done) ->","\t\t\ttester.docpad.action 'generate', (err) ->","\t\t\t\treturn done(err)","","\t\t@",""],"children":[]},{"id":"E31","text":"testEverything","typ":"method","icon":"method","comments":["Prepare","Test","Chain","Test everything"],"code":["\t\ttester = @","","\t\t@testCreate()","\t\t@testLoad()","\t\t@testGenerate()","\t\t@testServer()","\t\t@testCustom?()","","\t\t@finish()","","\t\t@",""],"children":[]},{"id":"E32","text":"finish","typ":"method","icon":"method","comments":["Prepare","Tests","Finish","Chain","Finish"],"code":["\t\ttester = @","","\t\tif tester.config.autoExit","\t\t\t@test 'finish up', (next) ->","\t\t\t\ttester.exit(next)","","\t\t@","","","testers.ServerTester ="],"children":[]}]},{"id":"E33","text":"ServerTester","typ":"class","icon":"class","comments":["Prepare","Finish","Chain","Server Tester"],"code":["testers.RendererTester ="],"children":[]},{"id":"E34","text":"RendererTester","typ":"class","icon":"class","comments":["Renderer Tester"],"code":[],"children":[{"id":"E35","text":"testGenerate","typ":"method","icon":"method","comments":["Test Generation"],"code":["\t\ttester = @","","\t\t@suite \"generate\", (suite,test) ->","\t\t\ttest 'action', (done) ->","\t\t\t\ttester.docpad.action 'generate', (err) ->","\t\t\t\t\treturn done(err)","","\t\t\tsuite 'results', (suite,test,done) ->","\t\t\t\t# Get actual results","\t\t\t\tbalUtil.scanlist tester.docpadConfig.outPath, (err,outResults) ->","\t\t\t\t\treturn done(err)  if err","","\t\t\t\t\t# Get expected results","\t\t\t\t\tbalUtil.scanlist tester.config.outExpectedPath, (err,outExpectedResults) ->","\t\t\t\t\t\treturn done(err)  if err","","\t\t\t\t\t\t# Prepare","\t\t\t\t\t\toutResultsKeys = Object.keys(outResults)","\t\t\t\t\t\toutExpectedResultsKeys = Object.keys(outExpectedResults)","","\t\t\t\t\t\t# Check we have the same files","\t\t\t\t\t\ttest 'same files', ->","\t\t\t\t\t\t\toutDifferenceKeys = _.difference(outResultsKeys, outExpectedResultsKeys)","\t\t\t\t\t\t\texpect(outDifferenceKeys).to.be.empty","","\t\t\t\t\t\t# Check the contents of those files match","\t\t\t\t\t\toutResultsKeys.forEach (key) ->","\t\t\t\t\t\t\ttest \"same file content for: #{key}\", ->","\t\t\t\t\t\t\t\t# Fetch file value","\t\t\t\t\t\t\t\tactual = outResults[key]","\t\t\t\t\t\t\t\texpected = outExpectedResults[key]","","\t\t\t\t\t\t\t\t# Remove empty lines","\t\t\t\t\t\t\t\tif tester.config.removeWhitespace is true","\t\t\t\t\t\t\t\t\treplaceLinesRegex = /\\s+/g","\t\t\t\t\t\t\t\t\tactual = actual.replace(replaceLinesRegex, '')","\t\t\t\t\t\t\t\t\texpected = expected.replace(replaceLinesRegex, '')","","\t\t\t\t\t\t\t\t# Content regex","\t\t\t\t\t\t\t\tif tester.config.contentRemoveRegex","\t\t\t\t\t\t\t\t\tactual = actual.replace(tester.config.contentRemoveRegex, '')","\t\t\t\t\t\t\t\t\texpected = expected.replace(tester.config.contentRemoveRegex, '')","","\t\t\t\t\t\t\t\t# Compare","\t\t\t\t\t\t\t\ttry","\t\t\t\t\t\t\t\t\texpect(actual).to.eql(expected)","\t\t\t\t\t\t\t\tcatch err","\t\t\t\t\t\t\t\t\tconsole.log '\\nactual:'","\t\t\t\t\t\t\t\t\tconsole.log actual","\t\t\t\t\t\t\t\t\tconsole.log '\\nexpected:'","\t\t\t\t\t\t\t\t\tconsole.log expected","\t\t\t\t\t\t\t\t\tconsole.log ''","\t\t\t\t\t\t\t\t\tthrow err","","\t\t\t\t\t\t# Forward","\t\t\t\t\t\tdone()","","\t\t@","","testers.test =","test = (testerConfig, docpadConfig) ->","\ttesterConfig.testerClass ?= PluginTester","\ttesterConfig.pluginPath = pathUtil.resolve(testerConfig.pluginPath)","\ttesterConfig.pluginName ?= pathUtil.basename(testerConfig.pluginPath).replace('docpad-plugin-','')","\ttesterConfig.testerPath ?= pathUtil.join('out', \"#{testerConfig.pluginName}.tester.js\")","\ttesterConfig.testerPath = pathUtil.resolve(testerConfig.pluginPath, testerConfig.testerPath)  if testerConfig.testerPath","","\tcomplete = ->","\t\ttesterConfig.testerClass = testers[testerConfig.testerClass]  if typeof testerConfig.testerClass is 'string'","","\t\tnew testerConfig.testerClass testerConfig, docpadConfig, (err,testerInstance) ->","\t\t\tthrow err  if err","","\t\t\t# Run the tests","\t\t\ttesterInstance.testEverything()","","\tif testerConfig.testerPath","\t\tsafefs.exists testerConfig.testerPath, (exists) ->","\t\t\ttesterConfig.testerClass = require(testerConfig.testerPath)(testers)  if exists","\t\t\tcomplete()","","\telse","\t\tcomplete()","","\treturn testers",""],"children":[]}]}]}