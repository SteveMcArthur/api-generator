{"text":"Docpad Lib","id":"root","children":[{"id":"H0","text":"FileModel","typ":"class","icon":"class","comments":["Import","Import: Optional","Iconv = null","","Local","---------------------------------","File Model",""],"code":[],"children":[{"id":"H1","text":"klass","typ":"prop","icon":"prop","comments":["---------------------------------","Properties","","Model Class"],"code":["FileModel"],"children":[]},{"id":"H2","text":"type","typ":"string","icon":"string","comments":["Model Type"],"code":["'file'"],"children":[]},{"id":"H3","text":"rootOutDirPath","typ":"prop","icon":"prop","comments":["The out directory path to put the relative path"],"code":["null"],"children":[]},{"id":"H4","text":"detectEncoding","typ":"prop","icon":"prop","comments":["Whether or not we should detect encoding"],"code":["false"],"children":[]},{"id":"H5","text":"stat","typ":"prop","icon":"prop","comments":["Stat Object"],"code":["null"],"children":[]},{"id":"H6","text":"buffer","typ":"prop","icon":"prop","comments":["File buffer"],"code":["null"],"children":[]},{"id":"H7","text":"bufferTime","typ":"prop","icon":"prop","comments":["Buffer time"],"code":["null"],"children":[]},{"id":"H8","text":"meta","typ":"prop","icon":"prop","comments":["The parsed file meta data (header)","Is a Backbone.Model instance"],"code":["null"],"children":[]},{"id":"H9","text":"getOptions","typ":"method","icon":"method","comments":["Get Options"],"code":["\t\treturn {@detectEncoding, @rootOutDirPath, @stat, @buffer, @meta}",""],"children":[]},{"id":"H10","text":"isOption","typ":"method","icon":"method","comments":["Is Option"],"code":["\t\tnames = ['detectEncoding', 'rootOutDirPath', 'stat', 'data', 'buffer', 'meta']","\t\tresult = key in names","\t\treturn result",""],"children":[]},{"id":"H11","text":"extractOptions","typ":"method","icon":"method","comments":["Extract Options"],"code":["\t\tresult = {}","","\t\tfor own key,value of attrs","\t\t\tif @isOption(key)","\t\t\t\tresult[key] = value","\t\t\t\tdelete attrs[key]","","\t\treturn result",""],"children":[]},{"id":"H12","text":"setOptions","typ":"prop","icon":"prop","comments":["Prepare","Extract","Return","Set Options"],"code":["(attrs={}) ->","\t\tif attrs.detectEncoding?","\t\t\t@rootOutDirPath = attrs.detectEncoding","\t\t\tdelete @attributes.detectEncoding","","\t\tif attrs.rootOutDirPath?","\t\t\t@rootOutDirPath = attrs.rootOutDirPath","\t\t\tdelete @attributes.rootOutDirPath","","\t\tif attrs.stat?","\t\t\t@setStat(attrs.stat)","\t\t\tdelete @attributes.stat","","\t\tif attrs.data?","\t\t\t@setBuffer(attrs.data)","\t\t\tdelete @attributes.data","","\t\tif attrs.buffer?","\t\t\t@setBuffer(attrs.buffer)","\t\t\tdelete @attributes.buffer","","\t\tif attrs.meta?","\t\t\t@setMeta(attrs.meta)","\t\t\tdelete @attributes.meta","","\t\t@",""],"children":[]},{"id":"H13","text":"clone","typ":"method","icon":"method","comments":["Root Out Path","Root Out Path","Stat","Data","Buffer","Meta","Chain","Clone"],"code":["\t\tattrs = @getAttributes()","\t\topts = @getOptions()","","\t\tdelete attrs.id","","\t\tclonedModel = new @klass(attrs, opts)","","\t\t@emit('clone', clonedModel)","","\t\treturn clonedModel","",""],"children":[]},{"id":"H14","text":"defaults","typ":"prop","icon":"prop","comments":["Fetch","Clean up","Clone","Emit clone event so parent can re-attach listeners","Return","---------------------------------","Attributes",""],"code":[],"children":[{"id":"H15","text":"id","typ":"prop","icon":"prop","comments":["---------------------------------","Automaticly set variables","","The unique document identifier"],"code":["null"],"children":[]},{"id":"H16","text":"basename","typ":"prop","icon":"prop","comments":["The file's name without the extension"],"code":["null"],"children":[]},{"id":"H17","text":"outBasename","typ":"prop","icon":"prop","comments":["The out file's name without the extension"],"code":["null"],"children":[]},{"id":"H18","text":"extension","typ":"prop","icon":"prop","comments":["The file's last extension","\"hello.md.eco\" -> \"eco\""],"code":["null"],"children":[]},{"id":"H19","text":"outExtension","typ":"prop","icon":"prop","comments":["The extension used for our output file"],"code":["null"],"children":[]},{"id":"H20","text":"extensions","typ":"prop","icon":"prop","comments":["The file's extensions as an array","\"hello.md.eco\" -> [\"md\",\"eco\"]"],"code":["null  # Array"],"children":[]},{"id":"H21","text":"filename","typ":"prop","icon":"prop","comments":["The file's name with the extension"],"code":["null"],"children":[]},{"id":"H22","text":"fullPath","typ":"prop","icon":"prop","comments":["The full path of our source file, only necessary if called by @load"],"code":["null"],"children":[]},{"id":"H23","text":"fullDirPath","typ":"prop","icon":"prop","comments":["The full directory path of our source file"],"code":["null"],"children":[]},{"id":"H24","text":"outPath","typ":"prop","icon":"prop","comments":["The output path of our file"],"code":["null"],"children":[]},{"id":"H25","text":"outDirPath","typ":"prop","icon":"prop","comments":["The output path of our file's directory"],"code":["null"],"children":[]},{"id":"H26","text":"outFilename","typ":"prop","icon":"prop","comments":["The file's name with the rendered extension"],"code":["null"],"children":[]},{"id":"H27","text":"relativePath","typ":"prop","icon":"prop","comments":["The relative path of our source file (with extensions)"],"code":["null"],"children":[]},{"id":"H28","text":"relativeOutPath","typ":"prop","icon":"prop","comments":["The relative output path of our file"],"code":["null"],"children":[]},{"id":"H29","text":"relativeDirPath","typ":"prop","icon":"prop","comments":["The relative directory path of our source file"],"code":["null"],"children":[]},{"id":"H30","text":"relativeOutDirPath","typ":"prop","icon":"prop","comments":["The relative output path of our file's directory"],"code":["null"],"children":[]},{"id":"H31","text":"relativeBase","typ":"prop","icon":"prop","comments":["The relative base of our source file (no extension)"],"code":["null"],"children":[]},{"id":"H32","text":"relativeOutBase","typ":"prop","icon":"prop","comments":["The relative base of our out file (no extension)"],"code":["null"],"children":[]},{"id":"H33","text":"contentType","typ":"prop","icon":"prop","comments":["The MIME content-type for the source file"],"code":["null"],"children":[]},{"id":"H34","text":"outContentType","typ":"prop","icon":"prop","comments":["The MIME content-type for the out file"],"code":["null"],"children":[]},{"id":"H35","text":"ctime","typ":"prop","icon":"prop","comments":["The date object for when this document was created"],"code":["null"],"children":[]},{"id":"H36","text":"mtime","typ":"prop","icon":"prop","comments":["The date object for when this document was last modified"],"code":["null"],"children":[]},{"id":"H37","text":"rtime","typ":"prop","icon":"prop","comments":["The date object for when this document was last rendered"],"code":["null"],"children":[]},{"id":"H38","text":"wtime","typ":"prop","icon":"prop","comments":["The date object for when this document was last written"],"code":["null"],"children":[]},{"id":"H39","text":"exists","typ":"prop","icon":"prop","comments":["Does the file actually exist on the file system"],"code":["null"],"children":[]},{"id":"H40","text":"encoding","typ":"prop","icon":"prop","comments":["---------------------------------","Content variables","","The encoding of the file"],"code":["null"],"children":[]},{"id":"H41","text":"source","typ":"prop","icon":"prop","comments":["The raw contents of the file, stored as a String"],"code":["null"],"children":[]},{"id":"H42","text":"content","typ":"prop","icon":"prop","comments":["The contents of the file, stored as a String"],"code":["null"],"children":[]},{"id":"H43","text":"tags","typ":"prop","icon":"prop","comments":["---------------------------------","User set variables","","The tags for this document"],"code":["null  # CSV/Array"],"children":[]},{"id":"H44","text":"render","typ":"prop","icon":"prop","comments":["Whether or not we should render this file"],"code":["false"],"children":[]},{"id":"H45","text":"write","typ":"prop","icon":"prop","comments":["Whether or not we should write this file to the output directory"],"code":["true"],"children":[]},{"id":"H46","text":"writeSource","typ":"prop","icon":"prop","comments":["Whether or not we should write this file to the source directory"],"code":["false"],"children":[]},{"id":"H47","text":"dynamic","typ":"prop","icon":"prop","comments":["Whether or not this file should be re-rendered on each request"],"code":["false"],"children":[]},{"id":"H48","text":"title","typ":"prop","icon":"prop","comments":["The title for this document","Useful for page headings"],"code":["null"],"children":[]},{"id":"H49","text":"name","typ":"prop","icon":"prop","comments":["The name for this document, defaults to the outFilename","Useful for navigation listings"],"code":["null"],"children":[]},{"id":"H50","text":"date","typ":"prop","icon":"prop","comments":["The date object for this document, defaults to mtime"],"code":["null"],"children":[]},{"id":"H51","text":"slug","typ":"prop","icon":"prop","comments":["The generated slug (url safe seo title) for this document"],"code":["null"],"children":[]},{"id":"H52","text":"url","typ":"prop","icon":"prop","comments":["The url for this document"],"code":["null"],"children":[]},{"id":"H53","text":"urls","typ":"prop","icon":"prop","comments":["Alternative urls for this document"],"code":["null  # Array"],"children":[]},{"id":"H54","text":"ignored","typ":"prop","icon":"prop","comments":["Whether or not we ignore this file"],"code":["false"],"children":[]},{"id":"H55","text":"standalone","typ":"prop","icon":"prop","comments":["Whether or not we should treat this file as standalone (that nothing depends on it)"],"code":["false"],"children":[]}]},{"id":"H56","text":"setBuffer","typ":"method","icon":"method","comments":["---------------------------------","Helpers","","Set Buffer"],"code":["\t\tbuffer = new Buffer(buffer)  unless Buffer.isBuffer(buffer)","\t\t@bufferTime = @get('mtime') or new Date()","\t\t@buffer = buffer","\t\t@",""],"children":[]},{"id":"H57","text":"getBuffer","typ":"method","icon":"method","comments":["Get Buffer"],"code":["\t\treturn @buffer",""],"children":[]},{"id":"H58","text":"isBufferOutdated","typ":"method","icon":"method","comments":["Is Buffer Outdated","True if there is no buffer OR the buffer time is outdated"],"code":["\t\treturn @buffer? is false or @bufferTime < (@get('mtime') or new Date())",""],"children":[]},{"id":"H59","text":"setStat","typ":"method","icon":"method","comments":["Set Stat"],"code":["\t\t@stat = stat","\t\t@set(","\t\t\tctime: new Date(stat.ctime)","\t\t\tmtime: new Date(stat.mtime)","\t\t)","\t\t@",""],"children":[]},{"id":"H60","text":"getStat","typ":"method","icon":"method","comments":["Get Stat"],"code":["\t\treturn @stat",""],"children":[]},{"id":"H61","text":"getAttributes","typ":"prop","icon":"prop","comments":["Get Attributes"],"code":["(dereference=true) ->","\t\tattrs = @toJSON(dereference)","\t\tdelete attrs.id","\t\treturn attrs",""],"children":[]},{"id":"H62","text":"toJSON","typ":"prop","icon":"prop","comments":["To JSON"],"code":["(dereference=false) ->","\t\tdata = super","\t\tdata.meta = @getMeta().toJSON()","\t\tdata = extendr.dereference(data)  if dereference is true","\t\treturn data",""],"children":[]},{"id":"H63","text":"getMeta","typ":"method","icon":"method","comments":["Get Meta"],"code":["\t\t@meta = new Model()  if @meta is null","\t\tif args.length","\t\t\treturn @meta.get(args...)","\t\telse","\t\t\treturn @meta",""],"children":[]},{"id":"H64","text":"set","typ":"prop","icon":"prop","comments":["Set"],"code":["(attrs,opts) ->","\t\tif typeChecker.isString(attrs)","\t\t\tnewAttrs = {}","\t\t\tnewAttrs[attrs] = opts","\t\t\treturn @set(newAttrs, opts)","","\t\tattrs = attrs.toJSON?() ? attrs","","\t\toptions = @extractOptions(attrs)","","\t\tsuper(attrs, opts)","","\t\t@setOptions(options, opts)","","\t\t@",""],"children":[]},{"id":"H65","text":"setDefaults","typ":"prop","icon":"prop","comments":["Check","Prepare","Extract options","Perform the set","Apply the options","Chain","Set Defaults"],"code":["(attrs,opts) ->","\t\tattrs = attrs.toJSON?() ? attrs","","\t\toptions = @extractOptions(attrs)","","\t\tsuper(attrs, opts)","","\t\t@setOptions(options, opts)","","\t\treturn @",""],"children":[]},{"id":"H66","text":"setMeta","typ":"prop","icon":"prop","comments":["Prepare","Extract options","Apply","Apply the options","Chain","Set Meta"],"code":["(attrs,opts) ->","\t\tattrs = attrs.toJSON?() ? attrs","","\t\toptions = @extractOptions(attrs)","","\t\t@getMeta().set(attrs, opts)","\t\t@set(attrs, opts)","","\t\t@setOptions(options, opts)","","\t\treturn @",""],"children":[]},{"id":"H67","text":"setMetaDefaults","typ":"prop","icon":"prop","comments":["Prepare","Extract options","Apply","Apply the options","Chain","Set Meta Defaults"],"code":["(attrs,opts) ->","\t\tattrs = attrs.toJSON?() ? attrs","","\t\toptions = @extractOptions(attrs)","","\t\t@getMeta().setDefaults(attrs, opts)","\t\t@setDefaults(attrs, opts)","","\t\t@setOptions(options, opts)","","\t\treturn @",""],"children":[]},{"id":"H68","text":"getFilename","typ":"prop","icon":"prop","comments":["Prepare","Extract options","Apply","Apply the options","Chain","Get Filename"],"code":["(opts={}) ->","\t\t{fullPath,relativePath,filename} = opts","","\t\tresult = (filename ? @get('filename'))","\t\tif !result","\t\t\tresult = (fullPath ? @get('fullPath')) or (relativePath ? @get('relativePath'))","\t\t\tresult = pathUtil.basename(result)  if result","\t\tresult or= null","","\t\treturn result",""],"children":[]},{"id":"H69","text":"getFilePath","typ":"prop","icon":"prop","comments":["Prepare","Determine","REturn","Get File Path"],"code":["(opts={}) ->","\t\t{fullPath,relativePath,filename} = opts","","\t\tresult = (fullPath ? @get('fullPath')) or (relativePath ? @get('relativePath')) or (filename ? @get('filename')) or null","","\t\treturn result",""],"children":[]},{"id":"H70","text":"getExtensions","typ":"prop","icon":"prop","comments":["Prepare","Determine","Return","Get Extensions"],"code":["({extensions,filename}) ->","\t\textensions or= @get('extensions') or null","\t\tif (extensions or []).length is 0","\t\t\tfilename = @getFilename({filename})","\t\t\tif filename","\t\t\t\textensions = docpadUtil.getExtensions(filename)","\t\treturn extensions or null",""],"children":[]},{"id":"H71","text":"getContent","typ":"method","icon":"method","comments":["Get Content"],"code":["\t\treturn @get('content') or @getBuffer()",""],"children":[]},{"id":"H72","text":"getOutContent","typ":"method","icon":"method","comments":["Get Out Content"],"code":["\t\treturn @getContent()",""],"children":[]},{"id":"H73","text":"isText","typ":"method","icon":"method","comments":["Is Text?"],"code":["\t\treturn @get('encoding') isnt 'binary'",""],"children":[]},{"id":"H74","text":"isBinary","typ":"method","icon":"method","comments":["Is Binary?"],"code":["\t\treturn @get('encoding') is 'binary'",""],"children":[]},{"id":"H75","text":"setUrl","typ":"method","icon":"method","comments":["Set the url for the file"],"code":["\t\t@addUrl(url)","\t\t@set({url})","\t\t@",""],"children":[]},{"id":"H76","text":"addUrl","typ":"method","icon":"method","comments":["Add a url","Allows our file to support multiple urls"],"code":["\t\tif url instanceof Array","\t\t\tfor newUrl in url","\t\t\t\t@addUrl(newUrl)","","\t\telse if url","\t\t\tfound = false","\t\t\turls = @get('urls')","\t\t\tfor existingUrl in urls","\t\t\t\tif existingUrl is url","\t\t\t\t\tfound = true","\t\t\t\t\tbreak","\t\t\turls.push(url)  if not found","\t\t\t@trigger('change:urls', @, urls, {})","\t\t\t@trigger('change', @, {})","","\t\t@",""],"children":[]},{"id":"H77","text":"removeUrl","typ":"method","icon":"method","comments":["Multiple Urls","Single Url","Chain","Remove a url","Removes a url from our file"],"code":["\t\turls = @get('urls')","\t\tfor url,index in urls","\t\t\tif url is userUrl","\t\t\t\turls.splice(index,1)","\t\t\t\tbreak","\t\t@",""],"children":[]},{"id":"H78","text":"getPath","typ":"prop","icon":"prop","comments":["Get a Path","If the path starts with `.` then we get the path in relation to the document that is calling it","Otherwise we just return it as normal"],"code":["(relativePath, parentPath) ->","\t\tif /^\\./.test(relativePath)","\t\t\trelativeDirPath = @get('relativeDirPath')","\t\t\tpath = pathUtil.join(relativeDirPath, relativePath)","\t\telse","\t\t\tif parentPath","\t\t\t\tpath = pathUtil.join(parentPath, relativePath)","\t\t\telse","\t\t\t\tpath = relativePath","\t\treturn path","",""],"children":[]},{"id":"H79","text":"actionRunnerInstance","typ":"prop","icon":"prop","comments":["---------------------------------","Actions","","The action runner instance bound to docpad"],"code":["null"],"children":[]},{"id":"H80","text":"getActionRunner","typ":"method","icon":"method","comments":[],"code":["@actionRunnerInstance"],"children":[]},{"id":"H81","text":"action","typ":"method","icon":"method","comments":[],"code":["docpadUtil.action.apply(@, args)"],"children":[]},{"id":"H82","text":"initialize","typ":"prop","icon":"prop","comments":["Initialize"],"code":["(attrs,opts={}) ->","\t\tfile = @","\t\t@attributes ?= {}","\t\t@attributes.extensions ?= []","\t\t@attributes.urls ?= []","\t\tnow = new Date()","\t\t@attributes.ctime ?= now","\t\t@attributes.mtime ?= now","","\t\t@id ?= @attributes.id ?= @cid","","\t\t@setOptions(opts)","","\t\t@actionRunnerInstance = new TaskGroup(\"file action runner\").run().on 'complete', (err) ->","\t\t\tfile.emit('error', err)  if err","","\t\tsuper","","\t\t@",""],"children":[]},{"id":"H83","text":"load","typ":"prop","icon":"prop","comments":["Defaults","Id","Options","Create our action runner","Super","Chain","Load","If the fullPath exists, load the file","If it doesn't, then parse and normalize the file"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tfile = @","\t\topts.exists ?= null","","\t\tfullPath = @get('fullPath')","\t\tfilePath = @getFilePath({fullPath})","","\t\tfile.set(exists: opts.exists)  if opts.exists?","\t\tfile.setStat(opts.stat)        if opts.stat?","\t\tfile.setBuffer(opts.buffer)    if opts.buffer?","","\t\ttasks = new TaskGroup(\"load tasks for file: #{filePath}\", {next})","\t\t\t.on('item.run', (item) ->","\t\t\t\tfile.log(\"debug\", \"#{item.getConfig().name}: #{file.type}: #{filePath}\")","\t\t\t)","","\t\ttasks.addTask \"Detect the file\", (complete) ->","\t\t\tif fullPath and opts.exists is null","\t\t\t\tsafefs.exists fullPath, (exists) ->","\t\t\t\t\topts.exists = exists","\t\t\t\t\tfile.set(exists: opts.exists)","\t\t\t\t\treturn complete()","\t\t\telse","\t\t\t\treturn complete()","","\t\ttasks.addTask \"Stat the file and cache the result\", (complete) ->","\t\t\t# Otherwise fetch new stat","\t\t\tif fullPath and opts.exists and opts.stat? is false","\t\t\t\treturn safefs.stat fullPath, (err,fileStat) ->","\t\t\t\t\treturn complete(err)  if err","\t\t\t\t\tfile.setStat(fileStat)","\t\t\t\t\treturn complete()","\t\t\telse","\t\t\t\treturn complete()","","\t\ttasks.addTask \"Read the file and cache the result\", (complete) ->","\t\t\t# Otherwise fetch new buffer","\t\t\tif fullPath and opts.exists and opts.buffer? is false and file.isBufferOutdated()","\t\t\t\treturn safefs.readFile fullPath, (err,buffer) ->","\t\t\t\t\treturn complete(err)  if err","\t\t\t\t\tfile.setBuffer(buffer)","\t\t\t\t\treturn complete()","\t\t\telse","\t\t\t\treturn complete()","","\t\ttasks.addTask \"Load -> Parse\", (complete) ->","\t\t\tfile.parse(complete)","","\t\ttasks.addTask \"Parse -> Normalize\", (complete) ->","\t\t\tfile.normalize(complete)","","\t\ttasks.addTask \"Normalize -> Contextualize\", (complete) ->","\t\t\tfile.contextualize(complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"H84","text":"parse","typ":"prop","icon":"prop","comments":["Prepare","Fetch","Apply options","Tasks","Detect the file","Process the file","Run the tasks","Chain","Parse","Parse our buffer and extract meaningful data from it","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tbuffer = @getBuffer()","\t\trelativePath = @get('relativePath')","\t\tencoding = opts.encoding or @get('encoding') or null","\t\tchanges = {}","","\t\tif buffer and encoding? is false or opts.reencode is true","\t\t\tisText = isTextOrBinary.isTextSync(relativePath, buffer)","","\t\t\t# Text","\t\t\tif isText is true","\t\t\t\t# Detect source encoding if not manually specified","\t\t\t\tif @detectEncoding","\t\t\t\t\tjschardet ?= require('jschardet')","\t\t\t\t\tencoding ?= jschardet.detect(buffer)?.encoding","","\t\t\t\t# Default the encoding","\t\t\t\tencoding or= 'utf8'","","\t\t\t\t# Convert into utf8","\t\t\t\tif docpadUtil.isStandardEncoding(encoding) is false","\t\t\t\t\t# Import optional dependencies","\t\t\t\t\ttry","\t\t\t\t\t\t#Iconv ?= require('iconv').Iconv","\t\t\t\t\t\tencodingUtil ?= require('encoding')","\t\t\t\t\t\t# ^ when we prove encoding/iconv-lite works better than iconv","\t\t\t\t\t\t# we can move this out of the try catch and make detectEncoding standard","\t\t\t\t\tcatch err","\t\t\t\t\t\t# ignore","","\t\t\t\t\t# Can convert?","\t\t\t\t\tif encodingUtil?","\t\t\t\t\t\t@log('info', \"Converting encoding #{encoding} to UTF-8 on #{relativePath}\")","","\t\t\t\t\t\t# Convert","\t\t\t\t\t\td = require('domain').create()","\t\t\t\t\t\td.on 'error', =>","\t\t\t\t\t\t\t@log('warn', \"Encoding conversion failed, therefore we cannot convert the encoding #{encoding} to UTF-8 on #{relativePath}\")","\t\t\t\t\t\td.run ->","\t\t\t\t\t\t\t#buffer = new Iconv(encoding, 'utf8').convert(buffer)","\t\t\t\t\t\t\tbuffer = encodingUtil.convert(buffer, 'utf8', encoding)  # content, to, from","","\t\t\t\t\t# Can't convert","\t\t\t\t\telse","\t\t\t\t\t\t@log('warn', \"Encoding utilities did not load, therefore we cannot convert the encoding #{encoding} to UTF-8 on #{relativePath}\")","","\t\t\t\t# Apply","\t\t\t\tchanges.encoding = encoding","","\t\t\t# Binary","\t\t\telse","\t\t\t\t# Set","\t\t\t\tencoding = changes.encoding = 'binary'","","\t\tif encoding is 'binary'","\t\t\t# Set","\t\t\tcontent = source = ''","","\t\t\t# Apply","\t\t\tchanges.content = content","\t\t\tchanges.source = source","","\t\telse","\t\t\t# Default","\t\t\tencoding = changes.encoding = 'utf8'  if encoding? is false","","\t\t\t# Set","\t\t\tsource = buffer?.toString('utf8') or ''","\t\t\tcontent = source","","\t\t\t# Apply","\t\t\tchanges.content = content","\t\t\tchanges.source = source","","\t\t@set(changes)","","\t\tnext()","\t\t@",""],"children":[]},{"id":"H85","text":"normalize","typ":"prop","icon":"prop","comments":["Prepare","Detect Encoding","Binary","Text","Apply","Next","Normalize data","Normalize any parsing we have done, as if a value has updates it may have consequences on another value. This will ensure everything is okay.","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tchanges = {}","\t\tmeta = @getMeta()","","\t\tfilename = opts.filename or @get('filename') or null","\t\trelativePath = opts.relativePath or @get('relativePath') or null","\t\tfullPath = opts.fullPath or @get('fullPath') or null","\t\tmtime = opts.mtime or @get('mtime') or null","","\t\ttags = opts.tags or meta.get('tags') or null","\t\tdate = opts.date or meta.get('date') or null","\t\tname = opts.name or meta.get('name') or null","\t\tslug = opts.slug or meta.get('slug') or null","\t\turl = opts.url or meta.get('url') or null","\t\tcontentType = opts.contentType or meta.get('contentType') or null","\t\toutContentType = opts.outContentType or meta.get('outContentType') or null","\t\toutFilename = opts.outFilename or meta.get('outFilename') or null","\t\toutExtension = opts.outExtension or meta.get('outExtension') or null","\t\toutPath = opts.outPath or meta.get('outPath') or null","","\t\textensions = null","\t\textension = null","\t\tbasename = null","\t\toutBasename = null","\t\trelativeOutPath = null","\t\trelativeDirPath = null","\t\trelativeOutDirPath = null","\t\trelativeBase = null","\t\trelativeOutBase = null","\t\toutDirPath = null","\t\tfullDirPath = null","","\t\tchanges.filename = filename = @getFilename({filename, relativePath, fullPath})","","\t\tif !filename","\t\t\terr = new Error('filename is required, it can be specified via filename, fullPath, or relativePath')","\t\t\treturn next(err)","","\t\tif !relativePath and filename","\t\t\tchanges.relativePath = relativePath = filename","","\t\tchanges.basename = basename = docpadUtil.getBasename(filename)","","\t\tchanges.extensions = extensions = @getExtensions({filename})","","\t\tchanges.extension = extension = docpadUtil.getExtension(extensions)","","\t\tif fullPath","\t\t\tchanges.fullDirPath = fullDirPath = docpadUtil.getDirPath(fullPath)","","\t\tchanges.relativeDirPath = relativeDirPath = docpadUtil.getDirPath(relativePath)","","\t\tchanges.relativeBase = relativeBase =","\t\t\tif relativeDirPath","\t\t\t\tpathUtil.join(relativeDirPath, basename)","\t\t\telse","\t\t\t\tbasename","","\t\tif !contentType","\t\t\tchanges.contentType = contentType = mime.lookup(fullPath or relativePath)","","\t\tif tags and typeChecker.isArray(tags) is false","\t\t\tchanges.tags = tags = String(tags).split(/[\\s,]+/)","","\t\tif !date","\t\t\tchanges.date = date = mtime or @get('date') or new Date()","","\t\tif !outFilename and !outPath","\t\t\tchanges.outFilename = outFilename = docpadUtil.getOutFilename(basename, outExtension or extensions.join('.'))","","\t\tif !outPath","\t\t\tchanges.outPath = outPath =","\t\t\t\tif @rootOutDirPath","\t\t\t\t\tpathUtil.resolve(@rootOutDirPath, relativeDirPath, outFilename)","\t\t\t\telse","\t\t\t\t\tnull","\t\t\t# ^ we still do this set as outPath is a meta, and it may still be set as an attribute","","\t\tif outPath","\t\t\tchanges.outFilename = outFilename = docpadUtil.getFilename(outPath)","","\t\tchanges.outDirPath = outDirPath =","\t\t\tif outPath","\t\t\t\tdocpadUtil.getDirPath(outPath)","\t\t\telse","\t\t\t\tnull","","\t\tchanges.outBasename = outBasename = docpadUtil.getBasename(outFilename)","","\t\tchanges.outExtension = outExtension = docpadUtil.getExtension(outFilename)","","\t\tchanges.relativeOutPath = relativeOutPath =","\t\t\tif outPath","\t\t\t\toutPath.replace(@rootOutDirPath, '').replace(/^[\\/\\\\]/, '')","\t\t\telse","\t\t\t\tpathUtil.join(relativeDirPath, outFilename)","","\t\tchanges.relativeOutDirPath = relativeOutDirPath = docpadUtil.getDirPath(relativeOutPath)","","\t\tchanges.relativeOutBase = relativeOutBase = pathUtil.join(relativeOutDirPath, outBasename)","","\t\tif !name","\t\t\tchanges.name = name = outFilename","","\t\t_defaultUrl = docpadUtil.getUrl(relativeOutPath)","\t\tif url","\t\t\t@setUrl(url)","\t\t\t@addUrl(_defaultUrl)","\t\telse","\t\t\t@setUrl(_defaultUrl)","","\t\tif !outContentType and contentType","\t\t\tchanges.outContentType = outContentType = mime.lookup(outPath or relativeOutPath) or contentType","","\t\tif !slug","\t\t\tchanges.slug = slug = docpadUtil.getSlug(relativeOutBase)","","\t\tchanges.wtime = wtime = new Date(wtime)  if typeof wtime is 'string'","\t\tchanges.rtime = rtime = new Date(rtime)  if typeof rtime is 'string'","\t\tchanges.ctime = ctime = new Date(ctime)  if typeof ctime is 'string'","\t\tchanges.mtime = mtime = new Date(mtime)  if typeof mtime is 'string'","\t\tchanges.date  = date  = new Date(date)   if typeof date is 'string'","","\t\t@set(changes)","","\t\tnext()","\t\t@",""],"children":[]},{"id":"H86","text":"contextualize","typ":"prop","icon":"prop","comments":["Prepare","App specified","User specified","Force specifeid","filename","check","relativePath","force basename","force extensions","force extension","force fullDirPath","force relativeDirPath","force relativeBase","force contentType","adjust tags","force date","force outFilename","force outPath","refresh outFilename","force outDirPath","force outBasename","force outExtension","force relativeOutPath","force relativeOutDirPath","force relativeOutBase","force name","force url","force outContentType","force slug","Force date objects","Apply","Next","Contextualize data","Put our data into perspective of the bigger picture. For instance, generate the url for it's rendered equivalant.","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","","\t\tnext()","\t\t@","",""],"children":[]},{"id":"H87","text":"render","typ":"prop","icon":"prop","comments":["Prepare","Forward","Render","Render this file","next(err,result,document)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tfile = @","","\t\tfile.attributes.rtime = new Date()","","\t\tnext(null, file.getOutContent(), file)","\t\t@","",""],"children":[]},{"id":"H88","text":"write","typ":"prop","icon":"prop","comments":["Prepare","Apply","Forward","---------------------------------","CRUD","","Write the out file","next(err)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tfile = @","","\t\topts.path      or= file.get('outPath')","\t\topts.encoding  or= file.get('encoding') or 'utf8'","\t\topts.content   or= file.getOutContent()","\t\topts.type      or= 'out file'","","\t\tunless opts.path","\t\t\tnext()","\t\t\treturn @","","\t\tunless opts.encoding.toLowerCase() in ['ascii','utf8','utf-8','binary']","\t\t\t# Import optional dependencies","\t\t\ttry","\t\t\t\t#Iconv ?= require('iconv').Iconv","\t\t\t\tencodingUtil ?= require('encoding')","\t\t\tcatch err","\t\t\t\t# ignore","","\t\t\t# Convert","\t\t\tif encodingUtil?","\t\t\t\t@log('info', \"Converting encoding UTF-8 to #{opts.encoding} on #{opts.path}\")","\t\t\t\ttry","\t\t\t\t\t#opts.content = new Iconv('utf8',opts.encoding).convert(opts.content)","\t\t\t\t\topts.content = encodingUtil.convert(opts.content, opts.encoding, 'utf8')  # content, to, from","\t\t\t\tcatch err","\t\t\t\t\t@log('warn', \"Encoding conversion failed, therefore we cannot convert the encoding UTF-8 to #{opts.encoding} on #{opts.path}\")","\t\t\telse","\t\t\t\t@log('warn', \"Encoding utilities did not load, therefore we cannot convert the encoding UTF-8 to #{opts.encoding} on #{opts.path}\")","","\t\tfile.log 'debug', \"Writing the #{opts.type}: #{opts.path} #{opts.encoding}\"","","\t\tsafefs.writeFile opts.path, opts.content, (err) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Update the wtime","\t\t\tif opts.type is 'out file'","\t\t\t\tfile.attributes.wtime = new Date()","","\t\t\t# Log","\t\t\tfile.log 'debug', \"Wrote the #{opts.type}: #{opts.path} #{opts.encoding}\"","","\t\t\t# Next","\t\t\treturn next()","","\t\t@",""],"children":[]},{"id":"H89","text":"writeSource","typ":"prop","icon":"prop","comments":["Prepare","Fetch","Check","Sometimes the out path could not be set if we are early on in the process","Convert utf8 to original encoding","Log","Write data","Chain","Write the source file","next(err)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tfile = @","","\t\topts.path      or= file.get('fullPath')","\t\topts.content   or= (file.getContent() or '').toString('')","\t\topts.type      or= 'source file'","","\t\t@write(opts, next)","","\t\t@","","\t'delete': (opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tfile = @","","\t\topts.path      or= file.get('outPath')","\t\topts.type      or= 'out file'","","\t\tunless opts.path","\t\t\tnext()","\t\t\treturn @","","\t\tfile.log 'debug', \"Delete the #{opts.type}: #{opts.path}\"","","\t\tsafefs.exists opts.path, (exists) ->","\t\t\t# Exit if it doesn't exist","\t\t\treturn next()  unless exists","","\t\t\t# If it does exist delete it","\t\t\tsafefs.unlink opts.path, (err) ->","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Log","\t\t\t\tfile.log 'debug', \"Deleted the #{opts.type}: #{opts.path}\"","","\t\t\t\t# Next","\t\t\t\tnext()","","\t\t@",""],"children":[]},{"id":"H90","text":"deleteSource","typ":"prop","icon":"prop","comments":["Prepare","Fetch","Write data","Chain","Delete the out file","next(err)","Prepare","Fetch","Check","Sometimes the out path could not be set if we are early on in the process","Log","Check existance","Chain","Delete the source file","next(err)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tfile = @","","\t\topts.path      or= file.get('fullPath')","\t\topts.type      or= 'source file'","","\t\t@delete(opts, next)","","\t\t@",""],"children":[]}]}]}