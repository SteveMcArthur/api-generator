{"text":"Docpad Lib","id":"root","children":[{"id":"B0","text":"DocPad","typ":"class","icon":"class","comments":["Requires","","Essential","Profile","Debug","Nodefly","Nodetime","Webkit Devtools","Necessary","Base","Utils","Models","Collections","Plugins","=====================================","DocPad","","The DocPad Class","Extends https://github.com/bevry/event-emitter-grouped"],"code":[],"children":[{"id":"B1","text":"Events","typ":"prop","icon":"prop","comments":["=================================","Variables","","---------------------------------","Modules","","Base"],"code":["Events"],"children":[]},{"id":"B2","text":"Model","typ":"prop","icon":"prop","comments":[],"code":["Model"],"children":[]},{"id":"B3","text":"Collection","typ":"prop","icon":"prop","comments":[],"code":["Collection"],"children":[]},{"id":"B4","text":"View","typ":"prop","icon":"prop","comments":[],"code":["View"],"children":[]},{"id":"B5","text":"QueryCollection","typ":"prop","icon":"prop","comments":[],"code":["QueryCollection"],"children":[]},{"id":"B6","text":"FileModel","typ":"prop","icon":"prop","comments":["Models"],"code":["FileModel"],"children":[]},{"id":"B7","text":"DocumentModel","typ":"prop","icon":"prop","comments":[],"code":["DocumentModel"],"children":[]},{"id":"B8","text":"FilesCollection","typ":"prop","icon":"prop","comments":["Collections"],"code":["FilesCollection"],"children":[]},{"id":"B9","text":"ElementsCollection","typ":"prop","icon":"prop","comments":[],"code":["ElementsCollection"],"children":[]},{"id":"B10","text":"MetaCollection","typ":"prop","icon":"prop","comments":[],"code":["MetaCollection"],"children":[]},{"id":"B11","text":"ScriptsCollection","typ":"prop","icon":"prop","comments":[],"code":["ScriptsCollection"],"children":[]},{"id":"B12","text":"StylesCollection","typ":"prop","icon":"prop","comments":[],"code":["StylesCollection"],"children":[]},{"id":"B13","text":"PluginLoader","typ":"prop","icon":"prop","comments":["Plugins"],"code":["PluginLoader"],"children":[]},{"id":"B14","text":"BasePlugin","typ":"prop","icon":"prop","comments":[],"code":["BasePlugin"],"children":[]},{"id":"B15","text":"version","typ":"prop","icon":"prop","comments":["---------------------------------","DocPad","","DocPad's version number"],"code":["null"],"children":[]},{"id":"B16","text":"getVersion","typ":"method","icon":"method","comments":[],"code":["\t\t@version ?= require(@packagePath).version","\t\treturn @version",""],"children":[]},{"id":"B17","text":"getVersionString","typ":"method","icon":"method","comments":[],"code":["\t\tif docpadUtil.isLocalDocPadExecutable()","\t\t\treturn util.format(@getLocale().versionLocal, @getVersion(), @corePath)","\t\telse","\t\t\treturn util.format(@getLocale().versionGlobal, @getVersion(), @corePath)",""],"children":[]},{"id":"B18","text":"pluginVersion","typ":"string","icon":"string","comments":["Plugin version requirements"],"code":["'2'"],"children":[]},{"id":"B19","text":"getProcessPlatform","typ":"method","icon":"method","comments":["Process getters"],"code":["process.platform"],"children":[]},{"id":"B20","text":"getProcessVersion","typ":"method","icon":"method","comments":[],"code":["process.version.replace(/^v/,'')"],"children":[]},{"id":"B21","text":"serverExpress","typ":"prop","icon":"prop","comments":["The express and http server instances bound to docpad"],"code":["null"],"children":[]},{"id":"B22","text":"serverHttp","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"B23","text":"getServer","typ":"prop","icon":"prop","comments":[],"code":["(both=false) ->","\t\t{serverExpress,serverHttp} = @","\t\tif both","\t\t\treturn {serverExpress, serverHttp}","\t\telse","\t\t\treturn serverExpress"],"children":[]},{"id":"B24","text":"setServer","typ":"method","icon":"method","comments":[],"code":["\t\tif servers.serverExpress and servers.serverHttp","\t\t\t@serverExpress = servers.serverExpress","\t\t\t@serverHttp = servers.serverHttp","","\t\tdelete @config.serverHttp","\t\tdelete @config.serverExpress","\t\tdelete @config.server"],"children":[]},{"id":"B25","text":"destroyServer","typ":"method","icon":"method","comments":["Apply","Cleanup"],"code":["\t\t@serverHttp?.close()","\t\t@serverHttp = null"],"children":[]},{"id":"B26","text":"loggerInstances","typ":"prop","icon":"prop","comments":["@TODO figure out how to destroy the express server","","The caterpillar instances bound to docpad"],"code":["null"],"children":[]},{"id":"B27","text":"getLogger","typ":"method","icon":"method","comments":[],"code":["@loggerInstances?.logger"],"children":[]},{"id":"B28","text":"getLoggers","typ":"method","icon":"method","comments":[],"code":["@loggerInstances"],"children":[]},{"id":"B29","text":"setLoggers","typ":"method","icon":"method","comments":[],"code":["\t\tif @loggerInstances","\t\t\t@warn('Loggers have already been set')","\t\telse","\t\t\t@loggerInstances = loggers","\t\t\t@loggerInstances.logger.setConfig(dry:true)","\t\t\t@loggerInstances.console.setConfig(dry:false).pipe(process.stdout)","\t\treturn loggers"],"children":[]},{"id":"B30","text":"destroyLoggers","typ":"method","icon":"method","comments":[],"code":["\t\tif @loggerInstances","\t\t\tfor own key,value of @loggerInstances","\t\t\t\tvalue.end()","\t\t@",""],"children":[]},{"id":"B31","text":"actionRunnerInstance","typ":"prop","icon":"prop","comments":["The action runner instance bound to docpad"],"code":["null"],"children":[]},{"id":"B32","text":"getActionRunner","typ":"method","icon":"method","comments":[],"code":["@actionRunnerInstance"],"children":[]},{"id":"B33","text":"action","typ":"method","icon":"method","comments":[],"code":["docpadUtil.action.apply(@, args)"],"children":[]},{"id":"B34","text":"errorRunnerInstance","typ":"prop","icon":"prop","comments":["The error runner instance bound to docpad"],"code":["null"],"children":[]},{"id":"B35","text":"getErrorRunner","typ":"method","icon":"method","comments":[],"code":["@errorRunnerInstance"],"children":[]},{"id":"B36","text":"trackRunnerInstance","typ":"prop","icon":"prop","comments":["The track runner instance bound to docpad"],"code":["null"],"children":[]},{"id":"B37","text":"getTrackRunner","typ":"method","icon":"method","comments":[],"code":["@trackRunnerInstance"],"children":[]},{"id":"B38","text":"events","typ":"events","icon":"events","comments":["Event Listing","Whenever a event is created, it must be applied here to be available to plugins and configuration files","https://github.com/bevry/docpad/wiki/Events"],"code":[],"children":[{"id":"B39","text":"extendTemplateData","typ":"event","icon":"event","comments":["fired each load"],"code":[],"children":[]},{"id":"B40","text":"extendCollections","typ":"event","icon":"event","comments":["fired each load"],"code":[],"children":[]},{"id":"B41","text":"docpadLoaded","typ":"event","icon":"event","comments":["fired multiple times, first time command line configuration hasn't been applied yet"],"code":[],"children":[]},{"id":"B42","text":"docpadReady","typ":"event","icon":"event","comments":["fired only once"],"code":[],"children":[]},{"id":"B43","text":"docpadDestroy","typ":"event","icon":"event","comments":["fired once on shutdown"],"code":[],"children":[]},{"id":"B44","text":"consoleSetup","typ":"event","icon":"event","comments":["fired once"],"code":[],"children":[]},{"id":"B45","text":"generateBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B46","text":"populateCollectionsBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B47","text":"populateCollections","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B48","text":"contextualizeBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B49","text":"contextualizeAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B50","text":"renderBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B51","text":"renderCollectionBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B52","text":"render","typ":"event","icon":"event","comments":["fired for each extension conversion"],"code":[],"children":[]},{"id":"B53","text":"renderDocument","typ":"event","icon":"event","comments":["fired for each document render, including layouts and render passes"],"code":[],"children":[]},{"id":"B54","text":"renderCollectionAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B55","text":"renderAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B56","text":"writeBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B57","text":"writeAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B58","text":"generateAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B59","text":"generated","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B60","text":"serverBefore","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B61","text":"serverExtend","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B62","text":"serverAfter","typ":"event","icon":"event","comments":[],"code":[],"children":[]},{"id":"B63","text":"notify","typ":"event","icon":"event","comments":[],"code":[],"children":[]}]},{"id":"B64","text":"getEvents","typ":"method","icon":"method","comments":[],"code":["\t\t@events","",""],"children":[]},{"id":"B65","text":"database","typ":"prop","icon":"prop","comments":["---------------------------------","Collections","","Database collection"],"code":["null  # QueryEngine Collection"],"children":[]},{"id":"B66","text":"databaseTempCache","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"B67","text":"getDatabase","typ":"method","icon":"method","comments":[],"code":["@database"],"children":[]},{"id":"B68","text":"getDatabaseSafe","typ":"method","icon":"method","comments":[],"code":["@databaseTempCache or @database"],"children":[]},{"id":"B69","text":"destroyDatabase","typ":"method","icon":"method","comments":[],"code":["\t\tif @database?","\t\t\t@database.destroy()","\t\t\t@database = null","\t\tif @databaseTempCache?","\t\t\t@databaseTempCache.destroy()","\t\t\t@databaseTempCache = null","\t\t@",""],"children":[]},{"id":"B70","text":"filesByUrl","typ":"prop","icon":"prop","comments":["Files by URL","Used to speed up fetching"],"code":["null"],"children":[]},{"id":"B71","text":"filesBySelector","typ":"prop","icon":"prop","comments":["Files by Selector","Used to speed up fetching"],"code":["null"],"children":[]},{"id":"B72","text":"filesByOutPath","typ":"prop","icon":"prop","comments":["Files by Out Path","Used to speed up conflict detection","Do not use for anything else"],"code":["null"],"children":[]},{"id":"B73","text":"blocks","typ":"prop","icon":"prop","comments":["Blocks"],"code":["null"],"children":[{"id":"B74","text":"meta","typ":"prop","icon":"prop","comments":["{","A collection of meta elements"],"code":["null  # Elements Collection"],"children":[]},{"id":"B75","text":"scripts","typ":"prop","icon":"prop","comments":["A collection of script elements"],"code":["null  # Scripts Collection"],"children":[]},{"id":"B76","text":"styles","typ":"prop","icon":"prop","comments":["Collection of style elements"],"code":["null  # Styles Collection","\t} ###",""],"children":[]}]},{"id":"B77","text":"getBlock","typ":"prop","icon":"prop","comments":["Get a block"],"code":["(name,clone) ->","\t\tblock = @blocks[name]","\t\tif clone","\t\t\tclassname = name[0].toUpperCase()+name[1..]+'Collection'","\t\t\tblock = new @[classname](block.models)","\t\treturn block",""],"children":[]},{"id":"B78","text":"setBlock","typ":"prop","icon":"prop","comments":["Set a block"],"code":["(name,value) ->","\t\tif @blocks[name]?","\t\t\t@blocks[name].destroy()","\t\t\tif value","\t\t\t\t@blocks[name] = value","\t\t\telse","\t\t\t\tdelete @blocks[name]","\t\telse","\t\t\t@blocks[name] = value","\t\t@",""],"children":[]},{"id":"B79","text":"getBlocks","typ":"method","icon":"method","comments":["Get blocks"],"code":["@blocks"],"children":[]},{"id":"B80","text":"setBlocks","typ":"method","icon":"method","comments":["Set blocks"],"code":["\t\tfor own name,value of blocks","\t\t\t@setBlock(name,value)","\t\t@",""],"children":[]},{"id":"B81","text":"eachBlock","typ":"method","icon":"method","comments":["Each block"],"code":["\t\teachr(@blocks, fn)","\t\t@",""],"children":[]},{"id":"B82","text":"destroyBlocks","typ":"method","icon":"method","comments":["Destroy Blocks"],"code":["\t\tif @blocks","\t\t\tfor own name,block of @blocks","\t\t\t\tblock.destroy()","\t\t\t\t@blocks[name] = null","\t\t@",""],"children":[]},{"id":"B83","text":"collections","typ":"prop","icon":"prop","comments":["Collections"],"code":["null"],"children":[]},{"id":"B84","text":"getCollection","typ":"method","icon":"method","comments":["Get a collection"],"code":["\t\tif value","\t\t\tif typeof value is 'string'","\t\t\t\tif value is 'database'","\t\t\t\t\treturn @getDatabase()","","\t\t\t\telse","\t\t\t\t\tfor collection in @collections","\t\t\t\t\t\tif value in [collection.options.name, collection.options.key]","\t\t\t\t\t\t\treturn collection","","\t\t\telse","\t\t\t\tfor collection in @collections","\t\t\t\t\tif value is collection","\t\t\t\t\t\treturn collection","","\t\treturn null",""],"children":[]},{"id":"B85","text":"destroyCollection","typ":"method","icon":"method","comments":["Get a collection"],"code":["\t\tif value","\t\t\tif typeof value is 'string' and value isnt 'database'","\t\t\t\t@collections = @collections.filter (collection) ->","\t\t\t\t\tif value in [collection.options.name, collection.options.key]","\t\t\t\t\t\tcollection?.destroy()","\t\t\t\t\t\treturn false","\t\t\t\t\telse","\t\t\t\t\t\treturn true","","\t\t\telse if value isnt @getDatabase()","\t\t\t\t@collections = @collections.filter (collection) ->","\t\t\t\t\tif value is collection","\t\t\t\t\t\tcollection?.destroy()","\t\t\t\t\t\treturn false","\t\t\t\t\telse","\t\t\t\t\t\treturn true","","\t\treturn null",""],"children":[]},{"id":"B86","text":"addCollection","typ":"method","icon":"method","comments":["Add a collection"],"code":["\t\tif collection and collection not in [@getDatabase(), @getCollection(collection)]","\t\t\t@collections.push(collection)","\t\t@",""],"children":[]},{"id":"B87","text":"setCollection","typ":"prop","icon":"prop","comments":["Set a collection","A collection can have multiple names"],"code":["(name, collection) ->","\t\tif collection","\t\t\tif name","\t\t\t\tcollection.options.name = name","\t\t\t\tif @getCollection(name) isnt collection","\t\t\t\t\t@destroyCollection(name)","\t\t\t@addCollection(collection)","\t\telse","\t\t\t@destroyCollection(name)",""],"children":[]},{"id":"B88","text":"getCollections","typ":"method","icon":"method","comments":["Get collections"],"code":["\t\treturn @collections",""],"children":[]},{"id":"B89","text":"setCollections","typ":"method","icon":"method","comments":["Set collections"],"code":["\t\tif Array.isArray(collections)","\t\t\tfor value in collections","\t\t\t\t@addCollection(value)","\t\telse","\t\t\tfor own name,value of collections","\t\t\t\t@setCollection(name, value)","\t\t@",""],"children":[]},{"id":"B90","text":"eachCollection","typ":"method","icon":"method","comments":["Each collection"],"code":["\t\tfn(@getDatabase(), 'database')","\t\tfor collection,index in @collections","\t\t\tfn(collection, collection.options.name or collection.options.key or index)","\t\t@",""],"children":[]},{"id":"B91","text":"destroyCollections","typ":"method","icon":"method","comments":["Destroy Collections"],"code":["\t\tif @collections","\t\t\tfor collection in @collections","\t\t\t\tcollection.destroy()","\t\t\t@collections = []","\t\t@","",""],"children":[]},{"id":"B92","text":"getFiles","typ":"prop","icon":"prop","comments":["---------------------------------","Collection Helpers","","Get files (will use live collections)"],"code":["(query,sorting,paging) ->","\t\tkey = JSON.stringify({query, sorting, paging})","\t\tcollection = @getCollection(key)","\t\tunless collection","\t\t\tcollection = @getDatabase().findAllLive(query, sorting, paging)","\t\t\tcollection.options.key = key","\t\t\t@addCollection(collection)","\t\treturn collection",""],"children":[]},{"id":"B93","text":"getFile","typ":"prop","icon":"prop","comments":["Get a single file based on a query"],"code":["(query,sorting,paging) ->","\t\tfile = @getDatabase().findOne(query, sorting, paging)","\t\treturn file",""],"children":[]},{"id":"B94","text":"getFilesAtPath","typ":"prop","icon":"prop","comments":["Get files at a path"],"code":["(path,sorting,paging) ->","\t\tquery = $or: [{relativePath: $startsWith: path}, {fullPath: $startsWith: path}]","\t\tfiles = @getFiles(query, sorting, paging)","\t\treturn files",""],"children":[]},{"id":"B95","text":"getFileAtPath","typ":"prop","icon":"prop","comments":["Get a file at a relative or absolute path or url"],"code":["(path,sorting,paging) ->","\t\tfile = @getDatabase().fuzzyFindOne(path, sorting, paging)","\t\treturn file",""],"children":[]},{"id":"B96","text":"getFileByUrl","typ":"prop","icon":"prop","comments":["Get a file by its url","TODO: Does this still work???"],"code":["(url,opts={}) ->","\t\topts.collection ?= @getDatabase()","\t\tfile = opts.collection.get(@filesByUrl[url])","\t\treturn file",""],"children":[]},{"id":"B97","text":"getFileById","typ":"prop","icon":"prop","comments":["Get a file by its id"],"code":["(id,opts={}) ->","\t\topts.collection ?= @getDatabase()","\t\tfile = opts.collection.get(id)","\t\treturn file",""],"children":[]},{"id":"B98","text":"getUrlPathname","typ":"method","icon":"method","comments":["Remove the query string from a url","Pathname convention taken from document.location.pathname"],"code":["\t\t return url.replace(/\\?.*/,'')",""],"children":[]},{"id":"B99","text":"getFileByRoute","typ":"prop","icon":"prop","comments":["Get a file by its route","next(err,file)"],"code":["(url,next) ->","\t\tdocpad = @","","\t\tif docpad.generated is false","\t\t\t# Wait until generation has completed and recall ourselves","\t\t\tdocpad.once 'generated', ->","\t\t\t\treturn docpad.getFileByRoute(url, next)","","\t\t\t# hain","\t\t\treturn @","","\t\tdatabase = docpad.getDatabaseSafe()","","\t\tcleanUrl = docpad.getUrlPathname(url)","\t\tfile = docpad.getFileByUrl(url, {collection:database}) or docpad.getFileByUrl(cleanUrl, {collection:database})","","\t\tnext(null, file)","","\t\t@",""],"children":[]},{"id":"B100","text":"getFileBySelector","typ":"prop","icon":"prop","comments":["Prepare","If we have not performed a generation yet then wait until the initial generation has completed","@TODO the above causes a signifcant delay when importing external documents (like tumblr data) into the database","we need to figure out a better way of doing this","perhaps it is via `writeSource: once` for imported documents","or providing an option to disable this so it forward onto the static handler instead","","Prepare","Fetch","Forward","Chain","Get a file by its selector","TODO: What on earth is a selector?"],"code":["(selector,opts={}) ->","\t\topts.collection ?= @getDatabase()","\t\tfile = opts.collection.get(@filesBySelector[selector])","\t\tunless file","\t\t\tfile = opts.collection.fuzzyFindOne(selector)","\t\t\tif file","\t\t\t\t@filesBySelector[selector] = file.id","\t\treturn file","",""],"children":[]},{"id":"B101","text":"skeletonsCollection","typ":"prop","icon":"prop","comments":["---------------------------------","Skeletons","","Skeletons Collection"],"code":["null"],"children":[]},{"id":"B102","text":"getSkeletons","typ":"method","icon":"method","comments":["Get Skeletons","Get all the available skeletons for us and their details","next(err,skeletonsCollection)"],"code":["\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tif @skeletonsCollection?","\t\t\treturn next(null,@skeletonsCollection)","","\t\t@skeletonsCollection = new Collection()","\t\t@skeletonsCollection.comparator = queryEngine.generateComparator(position:1, name:1)","\t\t@getExchange (err,exchange) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Prepare","\t\t\tindex = 0","","\t\t\t# If we have the exchange data, then add the skeletons from it","\t\t\tif exchange","\t\t\t\tfor own skeletonKey,skeleton of exchange.skeletons","\t\t\t\t\tskeleton.id ?= skeletonKey","\t\t\t\t\tskeleton.name ?= skeletonKey","\t\t\t\t\tskeleton.position ?= index","\t\t\t\t\tdocpad.skeletonsCollection.add(new Model(skeleton))","\t\t\t\t\t++index","","\t\t\t# Add No Skeleton Option","\t\t\tdocpad.skeletonsCollection.add(new Model(","\t\t\t\tid: 'none'","\t\t\t\tname: locale.skeletonNoneName","\t\t\t\tdescription: locale.skeletonNoneDescription","\t\t\t\tposition: index","\t\t\t))","","\t\t\t# Return Collection","\t\t\treturn next(null, docpad.skeletonsCollection)","\t\t@","",""],"children":[]},{"id":"B103","text":"slowPlugins","typ":"prop","icon":"prop","comments":["Prepare","Check if we have cached locally","Fetch the skeletons from the exchange","---------------------------------","Plugins","","Plugins that are loading really slow"],"code":["null  # {}"],"children":[]},{"id":"B104","text":"loadedPlugins","typ":"prop","icon":"prop","comments":["Loaded plugins indexed by name"],"code":["null  # {}"],"children":[]},{"id":"B105","text":"exchange","typ":"prop","icon":"prop","comments":["A listing of all the available extensions for DocPad"],"code":["null  # {}"],"children":[]},{"id":"B106","text":"corePath","typ":"prop","icon":"prop","comments":["-----------------------------","Paths","","The DocPad directory"],"code":["corePath"],"children":[]},{"id":"B107","text":"libPath","typ":"prop","icon":"prop","comments":["The DocPad library directory"],"code":["__dirname"],"children":[]},{"id":"B108","text":"mainPath","typ":"prop","icon":"prop","comments":["The main DocPad file"],"code":["pathUtil.resolve(__dirname, 'docpad')"],"children":[]},{"id":"B109","text":"packagePath","typ":"prop","icon":"prop","comments":["The DocPad package.json path"],"code":["pathUtil.resolve(__dirname, '..', '..', 'package.json')"],"children":[]},{"id":"B110","text":"localePath","typ":"prop","icon":"prop","comments":["The DocPad locale path"],"code":["pathUtil.resolve(__dirname, '..', '..', 'locale')"],"children":[]},{"id":"B111","text":"debugLogPath","typ":"prop","icon":"prop","comments":["The DocPad debug log path"],"code":["pathUtil.join(process.cwd(), 'docpad-debug.log')"],"children":[]},{"id":"B112","text":"userConfigPath","typ":"string","icon":"string","comments":["The User's configuration path"],"code":["'.docpad.cson'"],"children":[]},{"id":"B113","text":"initialTemplateData","typ":"prop","icon":"prop","comments":["-----------------------------","Template Data","","DocPad's Template Data"],"code":["null  # {}"],"children":[]},{"id":"B114","text":"pluginsTemplateData","typ":"prop","icon":"prop","comments":["Plugin's Extended Template Data"],"code":["null  # {}"],"children":[]},{"id":"B115","text":"getTemplateData","typ":"method","icon":"method","comments":["Get Complete Template Data"],"code":["\t\tuserTemplateData or= {}","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\t@initialTemplateData ?=","\t\t\t# Site Properties","\t\t\tsite: {}","","\t\t\t# Environment","\t\t\tgetEnvironment: ->","\t\t\t\treturn docpad.getEnvironment()","","\t\t\t# Environments","\t\t\tgetEnvironments: ->","\t\t\t\treturn docpad.getEnvironments()","","\t\t\t# Set that we reference other files","\t\t\treferencesOthers: (flag) ->","\t\t\t\tdocument = @getDocument()","\t\t\t\tdocument.referencesOthers()","\t\t\t\treturn null","","\t\t\t# Get the Document","\t\t\tgetDocument: ->","\t\t\t\treturn @documentModel","","\t\t\t# Get a Path in respect to the current document","\t\t\tgetPath: (path,parentPath) ->","\t\t\t\tdocument = @getDocument()","\t\t\t\tpath = document.getPath(path, parentPath)","\t\t\t\treturn path","","\t\t\t# Get Files","\t\t\tgetFiles: (query,sorting,paging) ->","\t\t\t\t@referencesOthers()","\t\t\t\tresult = docpad.getFiles(query, sorting, paging)","\t\t\t\treturn result","","\t\t\t# Get another file's URL based on a relative path","\t\t\tgetFile: (query,sorting,paging) ->","\t\t\t\t@referencesOthers()","\t\t\t\tresult = docpad.getFile(query,sorting,paging)","\t\t\t\treturn result","","\t\t\t# Get Files At Path","\t\t\tgetFilesAtPath: (path,sorting,paging) ->","\t\t\t\t@referencesOthers()","\t\t\t\tpath = @getPath(path)","\t\t\t\tresult = docpad.getFilesAtPath(path, sorting, paging)","\t\t\t\treturn result","","\t\t\t# Get another file's model based on a relative path","\t\t\tgetFileAtPath: (relativePath) ->","\t\t\t\t@referencesOthers()","\t\t\t\tpath = @getPath(relativePath)","\t\t\t\tresult = docpad.getFileAtPath(path)","\t\t\t\treturn result","","\t\t\t# Get a specific file by its id","\t\t\tgetFileById: (id) ->","\t\t\t\t@referencesOthers()","\t\t\t\tresult = docpad.getFileById(id)","\t\t\t\treturn result","","\t\t\t# Get the entire database","\t\t\tgetDatabase: ->","\t\t\t\t@referencesOthers()","\t\t\t\treturn docpad.getDatabase()","","\t\t\t# Get a pre-defined collection","\t\t\tgetCollection: (name) ->","\t\t\t\t@referencesOthers()","\t\t\t\treturn docpad.getCollection(name)","","\t\t\t# Get a block","\t\t\tgetBlock: (name) ->","\t\t\t\treturn docpad.getBlock(name,true)","","\t\t\t# Include another file taking in a relative path","\t\t\tinclude: (subRelativePath,strict=true) ->","\t\t\t\tfile = @getFileAtPath(subRelativePath)","\t\t\t\tif file","\t\t\t\t\tif strict and file.get('rendered') is false","\t\t\t\t\t\tif docpad.getConfig().renderPasses is 1","\t\t\t\t\t\t\tdocpad.warn util.format(locale.renderedEarlyViaInclude, subRelativePath)","\t\t\t\t\t\treturn null","\t\t\t\t\treturn file.getOutContent()","\t\t\t\telse","\t\t\t\t\terr = new Error(util.format(locale.includeFailed, subRelativePath))","\t\t\t\t\tthrow err","","\t\ttemplateData = extendr.extend({}, @initialTemplateData, @pluginsTemplateData, @getConfig().templateData, userTemplateData)","","\t\ttemplateData.site.url or= 'http://'+(docpad.getHostname() or 'localhost')+':'+(docpad.getPort())","\t\ttemplateData.site.date or= new Date()","\t\ttemplateData.site.keywords or= []","\t\tif typeChecker.isString(templateData.site.keywords)","\t\t\ttemplateData.site.keywords = templateData.site.keywords.split(/,\\s*/g)","","\t\ttemplateData","",""],"children":[]},{"id":"B116","text":"locale","typ":"prop","icon":"prop","comments":["Prepare","Set the initial docpad template data","Fetch our result template data","Add site data","Return","-----------------------------","Locales","","Determined locale"],"code":["null"],"children":[]},{"id":"B117","text":"getLocale","typ":"method","icon":"method","comments":["Get Locale"],"code":["\t\tif @locale? is false","\t\t\tconfig = @getConfig()","\t\t\tcodes = _.uniq [","\t\t\t\t'en'","\t\t\t\tsafeps.getLanguageCode config.localeCode","\t\t\t\tsafeps.getLanguageCode safeps.getLocaleCode()","\t\t\t\tsafeps.getLocaleCode   config.localeCode","\t\t\t\tsafeps.getLocaleCode   safeps.getLocaleCode()","\t\t\t]","\t\t\tlocales = (@loadLocale(code)  for code in codes)","\t\t\t@locale = extendr.extend(locales...)","","\t\treturn @locale",""],"children":[]},{"id":"B118","text":"loadLocale","typ":"method","icon":"method","comments":["Load Locale"],"code":["\t\tlocalePath = pathUtil.join(@localePath, \"#{code}.cson\")","\t\treturn null  unless safefs.existsSync(localePath)","\t\tlocale = CSON.parseFileSync(localePath)","\t\treturn locale","",""],"children":[]},{"id":"B119","text":"getEnvironment","typ":"method","icon":"method","comments":["-----------------------------","Environments","","Get Environment"],"code":["\t\tenv = @getConfig().env or 'development'","\t\treturn env",""],"children":[]},{"id":"B120","text":"getEnvironments","typ":"method","icon":"method","comments":["Get Environments"],"code":["\t\tenv = @getEnvironment()","\t\tenvs = env.split(/[, ]+/)","\t\treturn envs","",""],"children":[]},{"id":"B121","text":"hashKey","typ":"string","icon":"string","comments":["-----------------------------","Configuration","","Hash Key","The key that we use to hash some data before sending it to our statistic server"],"code":["'7>9}$3hP86o,4=@T'  # const"],"children":[]},{"id":"B122","text":"websitePackageConfig","typ":"prop","icon":"prop","comments":["Website Package Configuration"],"code":["null  # {}"],"children":[]},{"id":"B123","text":"config","typ":"prop","icon":"prop","comments":["Merged Configuration","Merged in the order of:","- initialConfig","- userConfig","- websiteConfig","- instanceConfig","- environmentConfig"],"code":["null  # {}"],"children":[]},{"id":"B124","text":"instanceConfig","typ":"prop","icon":"prop","comments":["Instance Configuration"],"code":["null  # {}"],"children":[]},{"id":"B125","text":"websiteConfig","typ":"prop","icon":"prop","comments":["Website Configuration"],"code":["null  # {}"],"children":[]},{"id":"B126","text":"userConfig","typ":"prop","icon":"prop","comments":["User Configuraiton"],"code":[],"children":[{"id":"B127","text":"name","typ":"prop","icon":"prop","comments":["Name"],"code":["null"],"children":[]},{"id":"B128","text":"email","typ":"prop","icon":"prop","comments":["Email"],"code":["null"],"children":[]},{"id":"B129","text":"username","typ":"prop","icon":"prop","comments":["Username"],"code":["null"],"children":[]},{"id":"B130","text":"subscribed","typ":"prop","icon":"prop","comments":["Subscribed"],"code":["null"],"children":[]},{"id":"B131","text":"subscribeTryAgain","typ":"prop","icon":"prop","comments":["Subcribe Try Again","If our subscription has failed, when should we try again?"],"code":["null"],"children":[]},{"id":"B132","text":"tos","typ":"prop","icon":"prop","comments":["Terms of Service"],"code":["null"],"children":[]},{"id":"B133","text":"identified","typ":"prop","icon":"prop","comments":["Identified"],"code":["null"],"children":[]}]},{"id":"B134","text":"initialConfig","typ":"prop","icon":"prop","comments":["Initial Configuration"],"code":[],"children":[{"id":"B135","text":"force","typ":"prop","icon":"prop","comments":["-----------------------------","Plugins","","Force re-install of all plugin dependencies"],"code":["false"],"children":[]},{"id":"B136","text":"global","typ":"prop","icon":"prop","comments":["Whether or not we should use the global docpad instance"],"code":["false"],"children":[]},{"id":"B137","text":"enableUnlistedPlugins","typ":"prop","icon":"prop","comments":["Whether or not we should enable plugins that have not been listed or not"],"code":["true"],"children":[]},{"id":"B138","text":"enabledPlugins","typ":"prop","icon":"prop","comments":["Plugins which should be enabled or not pluginName: pluginEnabled"],"code":["{}"],"children":[]},{"id":"B139","text":"skipUnsupportedPlugins","typ":"prop","icon":"prop","comments":["Whether or not we should skip unsupported plugins"],"code":["true"],"children":[]},{"id":"B140","text":"plugins","typ":"prop","icon":"prop","comments":["Configuration to pass to any plugins pluginName: pluginConfiguration"],"code":["{}"],"children":[]},{"id":"B141","text":"exchangeUrl","typ":"string","icon":"string","comments":["Where to fetch the exchange information from"],"code":["'http"],"children":[]},{"id":"B142","text":"rootPath","typ":"prop","icon":"prop","comments":["-----------------------------","Project Paths","","The project directory"],"code":["process.cwd()"],"children":[]},{"id":"B143","text":"databaseCachePath","typ":"string","icon":"string","comments":["The project's database cache path"],"code":["'.docpad.db'"],"children":[]},{"id":"B144","text":"packagePath","typ":"string","icon":"string","comments":["The project's package.json path"],"code":["'package.json'"],"children":[]},{"id":"B145","text":"latestPackageUrl","typ":"string","icon":"string","comments":["Where to get the latest package information from"],"code":["'http"],"children":[]},{"id":"B146","text":"configPaths","typ":"prop","icon":"prop","comments":["The project's configuration paths","Reads only the first one that exists","If you want to read multiple configuration paths, then point it to a coffee|js file that requires","the other paths you want and exports the merged config"],"code":["[","\t\t\t'docpad.js'","\t\t\t'docpad.coffee'","\t\t\t'docpad.json'","\t\t\t'docpad.cson'","\t\t]",""],"children":[]},{"id":"B147","text":"pluginPaths","typ":"prop","icon":"prop","comments":["Plugin directories to load"],"code":["[]"],"children":[]},{"id":"B148","text":"pluginsPaths","typ":"prop","icon":"prop","comments":["The project's plugins directory"],"code":["[","\t\t\t'node_modules'","\t\t\t'plugins'","\t\t]",""],"children":[]},{"id":"B149","text":"reloadPaths","typ":"prop","icon":"prop","comments":["Paths that we should watch for reload changes in"],"code":["[]"],"children":[]},{"id":"B150","text":"regeneratePaths","typ":"prop","icon":"prop","comments":["Paths that we should watch for regeneration changes in"],"code":["[]"],"children":[]},{"id":"B151","text":"regenerateDelay","typ":"number","icon":"number","comments":["The time to wait after a source file has changed before using it to regenerate"],"code":["100"],"children":[]},{"id":"B152","text":"slowFilesDelay","typ":"number","icon":"number","comments":["The time to wait before outputting the files we are waiting on"],"code":["20*1000"],"children":[]},{"id":"B153","text":"outPath","typ":"string","icon":"string","comments":["The project's out directory"],"code":["'out'"],"children":[]},{"id":"B154","text":"srcPath","typ":"string","icon":"string","comments":["The project's src directory"],"code":["'src'"],"children":[]},{"id":"B155","text":"documentsPaths","typ":"prop","icon":"prop","comments":["The project's documents directories","relative to the srcPath"],"code":["[","\t\t\t'documents'","\t\t\t'render'","\t\t]",""],"children":[]},{"id":"B156","text":"filesPaths","typ":"prop","icon":"prop","comments":["The project's files directories","relative to the srcPath"],"code":["[","\t\t\t'files'","\t\t\t'static'","\t\t\t'public'","\t\t]",""],"children":[]},{"id":"B157","text":"layoutsPaths","typ":"prop","icon":"prop","comments":["The project's layouts directory","relative to the srcPath"],"code":["[","\t\t\t'layouts'","\t\t]",""],"children":[]},{"id":"B158","text":"ignorePaths","typ":"prop","icon":"prop","comments":["Ignored file patterns during directory parsing"],"code":["false"],"children":[]},{"id":"B159","text":"ignoreHiddenFiles","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"B160","text":"ignoreCommonPatterns","typ":"prop","icon":"prop","comments":[],"code":["true"],"children":[]},{"id":"B161","text":"ignoreCustomPatterns","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"B162","text":"watchOptions","typ":"prop","icon":"prop","comments":["Watch options"],"code":["null"],"children":[]},{"id":"B163","text":"port","typ":"prop","icon":"prop","comments":["-----------------------------","Server","","Port","The port that the server should use","Defaults to these environment variables:","- PORT — Heroku, Nodejitsu, Custom","- VCAP_APP_PORT — AppFog","- VMC_APP_PORT — CloudFoundry"],"code":["null"],"children":[]},{"id":"B164","text":"hostname","typ":"prop","icon":"prop","comments":["Hostname","The hostname we wish to listen to","Defaults to these environment variables:","HOSTNAME — Generic","Do not set to \"localhost\" it does not work on heroku"],"code":["null"],"children":[]},{"id":"B165","text":"maxAge","typ":"number","icon":"number","comments":["Max Age","The caching time limit that is sent to the client"],"code":["86400000"],"children":[]},{"id":"B166","text":"serverExpress","typ":"prop","icon":"prop","comments":["Server","The Express.js server that we want docpad to use"],"code":["null"],"children":[]},{"id":"B167","text":"serverHttp","typ":"prop","icon":"prop","comments":["The HTTP server that we want docpad to use"],"code":["null"],"children":[]},{"id":"B168","text":"extendServer","typ":"prop","icon":"prop","comments":["Extend Server","Whether or not we should extend the server with extra middleware and routing"],"code":["true"],"children":[]},{"id":"B169","text":"middlewareStandard","typ":"prop","icon":"prop","comments":["Which middlewares would you like us to activate","The standard middlewares (bodyParser, methodOverride, express router)"],"code":["true"],"children":[]},{"id":"B170","text":"middlewareBodyParser","typ":"prop","icon":"prop","comments":["The standard bodyParser middleware"],"code":["true"],"children":[]},{"id":"B171","text":"middlewareMethodOverride","typ":"prop","icon":"prop","comments":["The standard methodOverride middleware"],"code":["true"],"children":[]},{"id":"B172","text":"middlewareExpressRouter","typ":"prop","icon":"prop","comments":["The standard express router middleware"],"code":["true","\t\tmiddleware404: true","\t\tmiddleware500: true","",""],"children":[]},{"id":"B173","text":"logLevel","typ":"prop","icon":"prop","comments":["Our own 404 middleware","Our own 500 middleware","-----------------------------","Logging","","Log Level","Which level of logging should we actually output"],"code":["(if ('-d' in process.argv) then 7 else 6)"],"children":[]},{"id":"B174","text":"catchExceptions","typ":"prop","icon":"prop","comments":["Catch uncaught exceptions"],"code":["true"],"children":[]},{"id":"B175","text":"reportErrors","typ":"prop","icon":"prop","comments":["Report Errors","Whether or not we should report our errors back to DocPad","By default it is only enabled if we are not running inside a test"],"code":["process.argv.join('').indexOf('test') is -1"],"children":[]},{"id":"B176","text":"reportStatistics","typ":"prop","icon":"prop","comments":["Report Statistics","Whether or not we should report statistics back to DocPad","By default it is only enabled if we are not running inside a test"],"code":["process.argv.join('').indexOf('test') is -1"],"children":[]},{"id":"B177","text":"databaseCache","typ":"prop","icon":"prop","comments":["-----------------------------","Other","","Utilise the database cache"],"code":["false  # [false, true, 'write']"],"children":[]},{"id":"B178","text":"detectEncoding","typ":"prop","icon":"prop","comments":["Detect Encoding","Should we attempt to auto detect the encoding of our files?","Useful when you are using foreign encoding (e.g. GBK) for your files"],"code":["false"],"children":[]},{"id":"B179","text":"renderSingleExtensions","typ":"prop","icon":"prop","comments":["Render Single Extensions","Whether or not we should render single extensions by default"],"code":["false"],"children":[]},{"id":"B180","text":"renderPasses","typ":"prop","icon":"prop","comments":["Render Passes","How many times should we render documents that reference other documents?"],"code":["1"],"children":[]},{"id":"B181","text":"offline","typ":"prop","icon":"prop","comments":["Offline","Whether or not we should run in offline mode","Offline will disable the following:","- checkVersion","- reportErrors","- reportStatistics"],"code":["false"],"children":[]},{"id":"B182","text":"checkVersion","typ":"prop","icon":"prop","comments":["Check Version","Whether or not to check for newer versions of DocPad"],"code":["false"],"children":[]},{"id":"B183","text":"welcome","typ":"prop","icon":"prop","comments":["Welcome","Whether or not we should display any custom welcome callbacks"],"code":["false"],"children":[]},{"id":"B184","text":"prompts","typ":"prop","icon":"prop","comments":["Prompts","Whether or not we should display any prompts"],"code":["false"],"children":[]},{"id":"B185","text":"poweredByDocPad","typ":"prop","icon":"prop","comments":["Powered By DocPad","Whether or not we should include DocPad in the Powered-By meta header","Please leave this enabled as it is a standard practice and promotes DocPad in the web eco-system"],"code":["true"],"children":[]},{"id":"B186","text":"helperUrl","typ":"prop","icon":"prop","comments":["Helper Url","Used for subscribing to newsletter, account information, and statistics etc","Helper's source-code can be found at: https://github.com/bevry/docpad-helper"],"code":["if true then 'http"],"children":[]},{"id":"B187","text":"safeMode","typ":"prop","icon":"prop","comments":["Safe Mode","If enabled, we will try our best to sandbox our template rendering so that they cannot modify things outside of them","Not yet implemented"],"code":["false"],"children":[]},{"id":"B188","text":"templateData","typ":"prop","icon":"prop","comments":["Template Data","What data would you like to expose to your templates"],"code":["{}"],"children":[]},{"id":"B189","text":"collections","typ":"prop","icon":"prop","comments":["Collections","A hash of functions that create collections"],"code":["{}"],"children":[]},{"id":"B190","text":"events","typ":"prop","icon":"prop","comments":["Events","A hash of event handlers"],"code":["{}"],"children":[]},{"id":"B191","text":"regenerateEvery","typ":"prop","icon":"prop","comments":["Regenerate Every","Performs a regenerate every x milliseconds, useful for always having the latest data"],"code":["false"],"children":[]},{"id":"B192","text":"regenerateEveryOptions","typ":"prop","icon":"prop","comments":["Regerenate Every Options","The generate options to use on the regenerate every call"],"code":["\t\t\tpopulate: true","\t\t\tpartial:  false","",""],"children":[]},{"id":"B193","text":"localeCode","typ":"prop","icon":"prop","comments":["-----------------------------","Environment Configuration","","Locale Code","The code we shall use for our locale (e.g. en, fr, etc)"],"code":["null"],"children":[]},{"id":"B194","text":"env","typ":"prop","icon":"prop","comments":["Environment","Whether or not we are in production or development","Separate environments using a comma or a space"],"code":["null"],"children":[]},{"id":"B195","text":"environments","typ":"prop","icon":"prop","comments":["Environments","Environment specific configuration to over-ride the global configuration"],"code":["\t\t\tdevelopment:","\t\t\t\t# Always refresh from server","\t\t\t\tmaxAge: false","","\t\t\t\t# Only do these if we are running standalone (aka not included in a module)","\t\t\t\tcheckVersion: /docpad$/.test(process.argv[1] or '')","\t\t\t\twelcome: /docpad$/.test(process.argv[1] or '')","\t\t\t\tprompts: /docpad$/.test(process.argv[1] or '')","",""],"children":[]}]},{"id":"B196","text":"regenerateTimer","typ":"prop","icon":"prop","comments":["Regenerate Timer","When config.regenerateEvery is set to a value, we create a timer here"],"code":["null"],"children":[]},{"id":"B197","text":"getConfig","typ":"method","icon":"method","comments":["Get the Configuration"],"code":["\t\treturn @config or {}",""],"children":[]},{"id":"B198","text":"getPort","typ":"method","icon":"method","comments":["Get the Port"],"code":["\t\treturn @getConfig().port ? process.env.PORT ? process.env.VCAP_APP_PORT ? process.env.VMC_APP_PORT ? 9778",""],"children":[]},{"id":"B199","text":"getHostname","typ":"method","icon":"method","comments":["Get the Hostname"],"code":["\t\treturn @getConfig().hostname ? process.env.HOSTNAME ? null","",""],"children":[]},{"id":"B200","text":"constructor","typ":"prop","icon":"prop","comments":["=================================","Initialization Functions","","Construct DocPad","next(err)"],"code":["(instanceConfig,next) ->","\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig, next)","\t\tdocpad = @","","\t\t@setMaxListeners(0)","","\t\tconfigEventContext = {docpad}  # here to allow the config event context to persist between event calls","\t\t@getEvents().forEach (eventName) ->","\t\t\t# Bind to the event","\t\t\tdocpad.on eventName, (opts,next) ->","\t\t\t\teventHandler = docpad.getConfig().events?[eventName]","\t\t\t\t# Fire the config event handler for this event, if it exists","\t\t\t\tif typeChecker.isFunction(eventHandler)","\t\t\t\t\targs = [opts,next]","\t\t\t\t\tambi(eventHandler.bind(configEventContext), args...)","\t\t\t\t# It doesn't exist, so lets continue","\t\t\t\telse","\t\t\t\t\tnext()","","\t\t@actionRunnerInstance = new TaskGroup('action runner').run().on 'complete', (err) ->","\t\t\tdocpad.error(err)  if err","","\t\t@errorRunnerInstance = new TaskGroup('error runner').run().on 'complete', (err) ->","\t\t\tif err and docpad.getDebugging()","\t\t\t\tlocale = docpad.getLocale()","\t\t\t\tdocpad.log('warn', locale.reportError+' '+locale.errorFollows, (err.stack ? err.message).toString())","","\t\t@trackRunnerInstance = new TaskGroup('track runner').run().on 'complete', (err) ->","\t\t\tif err and docpad.getDebugging()","\t\t\t\tlocale = docpad.getLocale()","\t\t\t\tdocpad.log('warn', locale.trackError+' '+locale.errorFollows, (err.stack ? err.message).toString())","","\t\tif (loggers = instanceConfig.loggers)","\t\t\tdelete instanceConfig.loggers","\t\telse","\t\t\t# Create","\t\t\tlogger = new (require('caterpillar').Logger)(lineOffset: 2)","","\t\t\t# console","\t\t\tloggerConsole = logger","\t\t\t\t.pipe(","\t\t\t\t\tnew (require('caterpillar-filter').Filter)","\t\t\t\t)","\t\t\t\t.pipe(","\t\t\t\t\tnew (require('caterpillar-human').Human)","\t\t\t\t)","","\t\t\t# Apply","\t\t\tloggers = {logger, console:loggerConsole}","","\t\tsafefs.unlink(@debugLogPath, ->)  # Remove the old debug log file","\t\t@setLoggers(loggers)  # Apply the logger streams","\t\t@setLogLevel(@initialConfig.logLevel)  # Set the default log level","","\t\t@on 'log', (args...) ->","\t\t\tdocpad.log.apply(@,args)","","\t\t@slowPlugins = {}","\t\t@loadedPlugins = {}","\t\t@exchange = {}","\t\t@pluginsTemplateData = {}","\t\t@instanceConfig = {}","\t\t@collections = []","\t\t@blocks = {}","\t\t@filesByUrl = {}","\t\t@filesBySelector = {}","\t\t@filesByOutPath = {}","\t\t@database = new FilesCollection(null, {name:'database'})","\t\t\t.on('remove', (model,options) ->","\t\t\t\t# Skip if we are not a writeable file","\t\t\t\treturn  if model.get('write') is false","","\t\t\t\t# Delete the urls","\t\t\t\tfor url in model.get('urls') or []","\t\t\t\t\tdelete docpad.filesByUrl[url]","","\t\t\t\t# Ensure we regenerate anything (on the next regeneration) that was using the same outPath","\t\t\t\toutPath = model.get('outPath')","\t\t\t\tif outPath","\t\t\t\t\tupdatedModels = docpad.database.findAll({outPath})","\t\t\t\t\tupdatedModels.remove(model)","\t\t\t\t\tupdatedModels.each (model) ->","\t\t\t\t\t\tmodel.set('mtime': new Date())","","\t\t\t\t\t# Log","\t\t\t\t\tdocpad.log('debug', 'Updated mtime for these models due to remove of a similar one', updatedModels.pluck('relativePath'))","","\t\t\t\t# Return safely","\t\t\t\treturn true","\t\t\t)","\t\t\t.on('add change:urls', (model) ->","\t\t\t\t# Skip if we are not a writeable file","\t\t\t\treturn  if model.get('write') is false","","\t\t\t\t# Delete the old urls","\t\t\t\tfor url in model.previous('urls') or []","\t\t\t\t\tdelete docpad.filesByUrl[url]","","\t\t\t\t# Add the new urls","\t\t\t\tfor url in model.get('urls')","\t\t\t\t\tdocpad.filesByUrl[url] = model.cid","","\t\t\t\t# Return safely","\t\t\t\treturn true","\t\t\t)","\t\t\t.on('add change:outPath', (model) ->","\t\t\t\t# Skip if we are not a writeable file","\t\t\t\treturn  if model.get('write') is false","","\t\t\t\t# Check if we have changed our outPath","\t\t\t\tpreviousOutPath = model.previous('outPath')","\t\t\t\tif previousOutPath","\t\t\t\t\t# Ensure we regenerate anything (on the next regeneration) that was using the same outPath","\t\t\t\t\tpreviousModels = docpad.database.findAll(outPath:previousOutPath)","\t\t\t\t\tpreviousModels.remove(model)","\t\t\t\t\tpreviousModels.each (model) ->","\t\t\t\t\t\tmodel.set('mtime': new Date())","","\t\t\t\t\t# Log","\t\t\t\t\tdocpad.log('debug', 'Updated mtime for these models due to addition of a similar one', previousModels.pluck('relativePath'))","","\t\t\t\t\t# Update the cache entry with another file that has the same outPath or delete it if there aren't any others","\t\t\t\t\tpreviousModelId = docpad.filesByOutPath[previousOutPath]","\t\t\t\t\tif previousModelId is model.id","\t\t\t\t\t\tif previousModels.length","\t\t\t\t\t\t\tdocpad.filesByOutPath[previousOutPath] = previousModelId","\t\t\t\t\t\telse","\t\t\t\t\t\t\tdelete docpad.filesByOutPath[previousOutPath]","","\t\t\t\t# Update the cache entry and fetch the latest if it was already set","\t\t\t\tif (outPath = model.get('outPath'))","\t\t\t\t\texistingModelId = docpad.filesByOutPath[outPath] ?= model.id","\t\t\t\t\tif existingModelId isnt model.id","\t\t\t\t\t\texistingModel = docpad.database.get(existingModelId)","\t\t\t\t\t\tif existingModel","\t\t\t\t\t\t\t# We have a conflict, let the user know","\t\t\t\t\t\t\tmodelPath = model.get('fullPath') or (model.get('relativePath')+':'+model.id)","\t\t\t\t\t\t\texistingModelPath = existingModel.get('fullPath') or (existingModel.get('relativePath')+':'+existingModel.id)","\t\t\t\t\t\t\tmessage =  util.format(docpad.getLocale().outPathConflict, outPath, modelPath, existingModelPath)","\t\t\t\t\t\t\tdocpad.warn(message)","\t\t\t\t\t\telse","\t\t\t\t\t\t\t# There reference was old, update it with our new one","\t\t\t\t\t\t\tdocpad.filesByOutPath[outPath] = model.id","","\t\t\t\t# Return safely","\t\t\t\treturn true","\t\t\t)","\t\t@userConfig = extendr.dereference(@userConfig)","\t\t@initialConfig = extendr.dereference(@initialConfig)","","\t\tif instanceConfig.action?","\t\t\taction = instanceConfig.action","\t\telse","\t\t\taction = 'load ready'","","\t\tif action","\t\t\t@action action, instanceConfig, (err) ->","\t\t\t\treturn docpad.fatal(err)  if err","\t\t\t\tnext?(null,docpad)","\t\telse","\t\t\tnext?(null,docpad)","","\t\t@",""],"children":[]},{"id":"B201","text":"destroy","typ":"prop","icon":"prop","comments":["Prepare","Allow DocPad to have unlimited event listeners","Setup configuration event wrappers","Create our action runner","Create our error runner","Create our track runner","Initialize the loggers","Apply the loggers","Log to bubbled events","Dereference and initialise advanced variables","we deliberately ommit initialTemplateData here, as it is setup in getTemplateData","Extract action","Check if we want to perform an action","Chain","Destroy","This is an action, and should be called as such","E.g. docpad.action('destroy', next)"],"code":["(opts, next) =>","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","","\t\tdocpad.destroyRegenerateTimer()","","\t\tdocpad.emitSerial 'docpadDestroy', (err) ->","\t\t\t# Check","\t\t\treturn next?(err)  if err","","\t\t\t# Destroy Plugins","\t\t\tdocpad.destroyPlugins()","","\t\t\t# Destroy Server","\t\t\tdocpad.destroyServer()","","\t\t\t# Destroy Watchers","\t\t\tdocpad.destroyWatchers()","","\t\t\t# Destroy Blocks","\t\t\tdocpad.destroyBlocks()","","\t\t\t# Destroy Collections","\t\t\tdocpad.destroyCollections()","","\t\t\t# Destroy Database","\t\t\tdocpad.destroyDatabase()","","\t\t\t# Destroy Logging","\t\t\tdocpad.destroyLoggers()","","\t\t\t# Destroy Process Listners","\t\t\tprocess.removeListener('uncaughtException', docpad.error)","","\t\t\t# Destroy DocPad Listeners","\t\t\tdocpad.removeAllListeners()","","\t\t\t# Forward","\t\t\treturn next?()","","\t\t@",""],"children":[]},{"id":"B202","text":"emitSerial","typ":"prop","icon":"prop","comments":["Prepare","Destroy Regenerate Timer","Destroy Plugins","Chain","Emit Serial"],"code":["(eventName, opts, next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tlocale = docpad.getLocale()","","\t\tdocpad.log 'debug', util.format(locale.emittingEvent, eventName)","","\t\tsuper eventName, opts, (err) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Log","\t\t\tdocpad.log 'debug', util.format(locale.emittedEvent, eventName)","","\t\t\t# Forward","\t\t\treturn next(err)","","\t\t@",""],"children":[]},{"id":"B203","text":"emitParallel","typ":"prop","icon":"prop","comments":["Prepare","Log","Emit","Chain","Emit Parallel"],"code":["(eventName, opts, next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tlocale = docpad.getLocale()","","\t\tdocpad.log 'debug', util.format(locale.emittingEvent, eventName)","","\t\tsuper eventName, opts, (err) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Log","\t\t\tdocpad.log 'debug', util.format(locale.emittedEvent, eventName)","","\t\t\t# Forward","\t\t\treturn next(err)","","\t\t@","",""],"children":[]},{"id":"B204","text":"getIgnoreOpts","typ":"method","icon":"method","comments":["Prepare","Log","Emit","Chain","=================================","Helpers",""],"code":["\t\treturn _.pick(@config, 'ignorePaths', 'ignoreHiddenFiles', 'ignoreCommonPatterns', 'ignoreCustomPatterns')",""],"children":[]},{"id":"B205","text":"isIgnoredPath","typ":"prop","icon":"prop","comments":["Is Ignored Path"],"code":["(path,opts={}) ->","\t\topts = extendr.extend(@getIgnoreOpts(), opts)","\t\treturn ignorefs.isIgnoredPath(path, opts)",""],"children":[]},{"id":"B206","text":"scandir","typ":"prop","icon":"prop","comments":["Scan Directory"],"code":["(opts={}) ->","\t\topts = extendr.extend(@getIgnoreOpts(), opts)","\t\treturn balUtil.scandir(opts)",""],"children":[]},{"id":"B207","text":"watchdir","typ":"prop","icon":"prop","comments":["Watch Directory"],"code":["(opts={}) ->","\t\topts = extendr.extend(@getIgnoreOpts(), opts, @config.watchOptions)","\t\treturn require('watchr').watch(opts)","",""],"children":[]},{"id":"B208","text":"ready","typ":"prop","icon":"prop","comments":["=================================","Setup and Loading","","Ready","next(err,docpadInstance)"],"code":["(opts,next) =>","\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","","\t\t@DocumentModel::defaults.renderSingleExtensions = config.renderSingleExtensions","","\t\t@compareVersion()","","\t\tif @getDebugging()","\t\t\tpluginsList = (\"#{pluginName} v#{@loadedPlugins[pluginName].version}\"  for pluginName in Object.keys(@loadedPlugins).sort()).join(', ')","\t\telse","\t\t\tpluginsList = Object.keys(@loadedPlugins).sort().join(', ')","","\t\tdocpad.log 'info', util.format(locale.welcome, @getVersionString())","\t\tdocpad.log 'notice', locale.welcomeDonate","\t\tdocpad.log 'info', locale.welcomeContribute","\t\tdocpad.log 'info', util.format(locale.welcomePlugins, pluginsList)","\t\tdocpad.log 'info', util.format(locale.welcomeEnvironment, @getEnvironment())","","\t\ttasks = new TaskGroup 'ready tasks', next:(err) ->","\t\t\t# Error?","\t\t\treturn docpad.error(err)  if err","","\t\t\t# All done, forward our DocPad instance onto our creator","\t\t\treturn next?(null,docpad)","","\t\ttasks.addTask 'welcome event', (complete) ->","\t\t\t# No welcome","\t\t\treturn complete()  unless config.welcome","","\t\t\t# Welcome","\t\t\tdocpad.emitSerial('welcome', {docpad}, complete)","","\t\ttasks.addTask 'track', (complete) ->","\t\t\t# Identify","\t\t\treturn docpad.identify(complete)","","\t\ttasks.addTask 'emit docpadReady', (complete) ->","\t\t\tdocpad.emitSerial('docpadReady', {docpad}, complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B209","text":"mergeConfigurations","typ":"prop","icon":"prop","comments":["Prepare","Render Single Extensions","Version Check","Welcome Prepare","Welcome Output","Prepare","Run tasks","Chain","Merge Configurations"],"code":["(configPackages,configsToMerge) ->","\t\tenvs = @getEnvironments()","","\t\tfor configPackage in configPackages","\t\t\tcontinue  unless configPackage","\t\t\tconfigsToMerge.push(configPackage)","\t\t\tfor env in envs","\t\t\t\tenvConfig = configPackage.environments?[env]","\t\t\t\tconfigsToMerge.push(envConfig)  if envConfig","","\t\textendr.safeDeepExtendPlainObjects(configsToMerge...)","","\t\t@",""],"children":[]},{"id":"B210","text":"setInstanceConfig","typ":"method","icon":"method","comments":["Prepare","Figure out merging","Merge","Chain","Set Instance Configuration"],"code":["\t\tif instanceConfig","\t\t\textendr.safeDeepExtendPlainObjects(@instanceConfig, instanceConfig)","\t\t\textendr.safeDeepExtendPlainObjects(@config, instanceConfig)  if @config","\t\t@",""],"children":[]},{"id":"B211","text":"setConfig","typ":"prop","icon":"prop","comments":["Merge in the instance configurations","Set Configuration","next(err,config)"],"code":["(instanceConfig,next) =>","\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\t@setInstanceConfig(instanceConfig)  if instanceConfig","","\t\t@config.env = @instanceConfig.env or @websiteConfig.env or @initialConfig.env or process.env.NODE_ENV","","\t\tconfigPackages = [@initialConfig, @userConfig, @websiteConfig, @instanceConfig]","\t\tconfigsToMerge = [@config]","\t\tdocpad.mergeConfigurations(configPackages, configsToMerge)","","\t\t@setServer extendr.safeShallowExtendPlainObjects({","\t\t\tserverHttp: @config.serverHttp","\t\t\tserverExpress: @config.serverExpress","\t\t},  @config.server)","","\t\t@setLogLevel(@config.logLevel)","","\t\t@config.rootPath = pathUtil.resolve(@config.rootPath)","\t\t@config.outPath = pathUtil.resolve(@config.rootPath, @config.outPath)","\t\t@config.srcPath = pathUtil.resolve(@config.rootPath, @config.srcPath)","\t\t@config.databaseCachePath = pathUtil.resolve(@config.rootPath, @config.databaseCachePath)","\t\t@config.packagePath = pathUtil.resolve(@config.rootPath, @config.packagePath)","","\t\tfor type in ['documents','files','layouts']","\t\t\ttypePaths = @config[type+'Paths']","\t\t\tfor typePath,key in typePaths","\t\t\t\ttypePaths[key] = pathUtil.resolve(@config.srcPath, typePath)","","\t\tfor type in ['plugins']","\t\t\ttypePaths = @config[type+'Paths']","\t\t\tfor typePath,key in typePaths","\t\t\t\ttypePaths[key] = pathUtil.resolve(@config.rootPath, typePath)","","\t\tprocess.removeListener('uncaughtException', @error)","\t\t@removeListener('error', @error)","\t\tif @config.catchExceptions","\t\t\tprocess.setMaxListeners(0)","\t\t\tprocess.on('uncaughtException', @error)","\t\t\t@on('error', @error)","","\t\tpostTasks = new TaskGroup 'setConfig post tasks', next:(err) ->","\t\t\treturn next(err, docpad.config)","","\t\tpostTasks.addTask 'lazy depedencnies: encoding', (complete) =>","\t\t\treturn complete()  unless @config.detectEncoding","\t\t\treturn lazyRequire 'encoding', {cwd:corePath, stdio:'inherit'}, (err) ->","\t\t\t\tdocpad.warn(locale.encodingLoadFailed)  if err","\t\t\t\treturn complete()","\t\tpostTasks.addTask 'load plugins', (complete) ->","\t\t\tdocpad.loadPlugins(complete)","","\t\tpostTasks.addTask 'extend collections', (complete) ->","\t\t\tdocpad.extendCollections(complete)","","\t\tpostTasks.addTask 'fetch plugins templateData', (complete) ->","\t\t\tdocpad.emitSerial('extendTemplateData', {templateData:docpad.pluginsTemplateData}, complete)","","\t\tpostTasks.addTask 'fire the docpadLoaded event', (complete) ->","\t\t\tdocpad.emitSerial('docpadLoaded', complete)","","\t\tpostTasks.run()","","\t\t@","",""],"children":[]},{"id":"B212","text":"load","typ":"prop","icon":"prop","comments":["Prepare","Apply the instance configuration, generally we won't have it at this level","as it would have been applied earlier the load step","Apply the environment","websitePackageConfig.env is left out of the detection here as it is usually an object","that is already merged with our process.env by the environment runner","rather than a string which is the docpad convention","Merge configurations","Extract and apply the server","Extract and apply the logger","Resolve any paths","Resolve Documents, Files, Layouts paths","Resolve Plugins paths","Bind the error handler, so we don't crash on errors","Prepare the Post Tasks","","","","Fire post tasks","Chain","Load Configuration","next(err,config)"],"code":["(instanceConfig,next) =>","\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)","\t\tdocpad = @","\t\tlocale = @getLocale()","\t\tinstanceConfig or= {}","","\t\t@websitePackageConfig = {}","\t\t@websiteConfig = {}","\t\t@config = {}","","\t\t@setInstanceConfig(instanceConfig)","","\t\tpreTasks = new TaskGroup 'load tasks', next:(err) =>","\t\t\treturn next(err)  if err","\t\t\treturn @setConfig(next)","","\t\tpreTasks.addTask 'normalize the userConfigPath', (complete) =>","\t\t\tsafeps.getHomePath (err,homePath) =>","\t\t\t\treturn complete(err)  if err","\t\t\t\tdropboxPath = pathUtil.resolve(homePath, 'Dropbox')","\t\t\t\tsafefs.exists dropboxPath, (dropboxPathExists) =>","\t\t\t\t\t# @TODO: Implement checks here for","\t\t\t\t\t# https://github.com/bevry/docpad/issues/799","\t\t\t\t\tuserConfigDirPath = if dropboxPathExists then dropboxPath else homePath","\t\t\t\t\t@userConfigPath = pathUtil.resolve(userConfigDirPath, @userConfigPath)","\t\t\t\t\treturn complete()","","\t\tpreTasks.addTask \"load the user's configuration\", (complete) =>","\t\t\tconfigPath = @userConfigPath","\t\t\tdocpad.log 'debug', util.format(locale.loadingUserConfig, configPath)","\t\t\t@loadConfigPath {configPath}, (err,data) =>","\t\t\t\treturn complete(err)  if err","","\t\t\t\t# Apply loaded data","\t\t\t\textendr.extend(@userConfig, data or {})","","\t\t\t\t# Done","\t\t\t\tdocpad.log 'debug', util.format(locale.loadingUserConfig, configPath)","\t\t\t\treturn complete()","","\t\tpreTasks.addTask \"load the anonymous user's configuration\", (complete) =>","\t\t\t# Ignore if username is already identified","\t\t\treturn complete()  if @userConfig.username","","\t\t\t# User is anonymous, set their username to the hashed and salted mac address","\t\t\trequire('getmac').getMac (err,macAddress) =>","\t\t\t\tif err or !macAddress","\t\t\t\t\treturn docpad.trackError(err or new Error('no mac address'), complete)","","\t\t\t\t# Hash with salt","\t\t\t\ttry","\t\t\t\t\tmacAddressHash = require('crypto').createHmac('sha1', docpad.hashKey).update(macAddress).digest('hex')","\t\t\t\tcatch err","\t\t\t\t\treturn complete()  if err","","\t\t\t\t# Apply","\t\t\t\tif macAddressHash","\t\t\t\t\t@userConfig.name ?= \"MAC #{macAddressHash}\"","\t\t\t\t\t@userConfig.username ?= macAddressHash","","\t\t\t\t# Next","\t\t\t\treturn complete()","","\t\tpreTasks.addTask \"load the website's package data\", (complete) =>","\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @initialConfig.rootPath)","\t\t\tconfigPath = pathUtil.resolve(rootPath, @instanceConfig.packagePath or @initialConfig.packagePath)","\t\t\tdocpad.log 'debug', util.format(locale.loadingWebsitePackageConfig, configPath)","\t\t\t@loadConfigPath {configPath}, (err,data) =>","\t\t\t\treturn complete(err)  if err","\t\t\t\tdata or= {}","","\t\t\t\t# Apply loaded data","\t\t\t\t@websitePackageConfig = data","","\t\t\t\t# Done","\t\t\t\tdocpad.log 'debug', util.format(locale.loadedWebsitePackageConfig, configPath)","\t\t\t\treturn complete()","","\t\tpreTasks.addTask \"read the .env file if it exists\", (complete) =>","\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @websitePackageConfig.rootPath or @initialConfig.rootPath)","\t\t\tconfigPath = pathUtil.resolve(rootPath, '.env')","\t\t\tdocpad.log 'debug', util.format(locale.loadingEnvConfig, configPath)","\t\t\tsafefs.exists configPath, (exists) ->","\t\t\t\treturn complete()  unless exists","\t\t\t\trequire('envfile').parseFile configPath, (err,data) ->","\t\t\t\t\treturn complete(err)  if err","\t\t\t\t\tfor own key,value of data","\t\t\t\t\t\tprocess.env[key] = value","\t\t\t\t\tdocpad.log 'debug', util.format(locale.loadingEnvConfig, configPath)","\t\t\t\t\treturn complete()","","\t\tpreTasks.addTask \"load the website's configuration\", (complete) =>","\t\t\tdocpad.log 'debug', util.format(locale.loadingWebsiteConfig)","\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @initialConfig.rootPath)","\t\t\tconfigPaths = @instanceConfig.configPaths or @initialConfig.configPaths","\t\t\tfor configPath, index in configPaths","\t\t\t\tconfigPaths[index] = pathUtil.resolve(rootPath, configPath)","\t\t\t@loadConfigPath {configPaths}, (err,data) =>","\t\t\t\treturn complete(err)  if err","\t\t\t\tdata or= {}","","\t\t\t\t# Apply loaded data","\t\t\t\textendr.extend(@websiteConfig, data)","","\t\t\t\t# Done","\t\t\t\tdocpad.log 'debug', util.format(locale.loadedWebsiteConfig)","\t\t\t\treturn complete()","","\t\tpreTasks.run()","","\t\t@","",""],"children":[]},{"id":"B213","text":"updateUserConfig","typ":"prop","icon":"prop","comments":["Prepare","Reset non persistant configurations","Merge in the instance configurations","Prepare the Load Tasks","Run the load tasks synchronously","Chain","=================================","Configuration","","Update User Configuration"],"code":["(data={},next) ->","\t\t[data,next] = extractOptsAndCallback(data,next)","\t\tdocpad = @","\t\tuserConfigPath = @userConfigPath","","\t\textendr.extend(@userConfig, data)  if data","","\t\tCSON.stringify @userConfig, (err,userConfigString) ->","\t\t\t# Check","\t\t\treturn next?(err)  if err","","\t\t\t# Write it","\t\t\tsafefs.writeFile userConfigPath, userConfigString, 'utf8', (err) ->","\t\t\t\t# Forward","\t\t\t\treturn next?(err)","","\t\t@",""],"children":[]},{"id":"B214","text":"loadConfigUrl","typ":"prop","icon":"prop","comments":["Prepare","Apply back to our loaded configuration","does not apply to @config as we would have to reparse everything","and that appears to be an imaginary problem","Write it with CSON","Chain","Load a configuration url","next(err,parsedData)"],"code":["(configUrl,next) ->","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tdocpad.log 'debug', util.format(locale.loadingConfigUrl, configUrl)","","\t\tsuperAgent","\t\t\t.get(configUrl)","\t\t\t.timeout(30*1000)","\t\t\t.end (err,res) ->","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Read the string using CSON","\t\t\t\tCSON.parse(res.text, next)","","\t\t@",""],"children":[]},{"id":"B215","text":"loadConfigPath","typ":"prop","icon":"prop","comments":["Prepare","Log","Read the URL","Chain","Load the configuration path","next(err,parsedData)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tload = (configPath) ->","\t\t\t# Check","\t\t\treturn next()  unless configPath","","\t\t\t# Log","\t\t\tdocpad.log 'debug', util.format(locale.loadingConfigPath, configPath)","","\t\t\t# Check that it exists","\t\t\tsafefs.exists configPath, (exists) ->","\t\t\t\treturn next()  unless exists","","\t\t\t\t# Read the path using CSON","\t\t\t\tCSON.parseFile configPath, (err,result) ->","\t\t\t\t\tif err","\t\t\t\t\t\tdocpad.log 'error', util.format(locale.loadingConfigPathFailed, configPath)","\t\t\t\t\treturn next(err, result)","","\t\tif opts.configPath","\t\t\tload(opts.configPath)","\t\telse","\t\t\t@getConfigPath opts, (err,configPath) ->","\t\t\t\tload(configPath)","","\t\t@",""],"children":[]},{"id":"B216","text":"getConfigPath","typ":"prop","icon":"prop","comments":["Prepare","Prepare","Check","Chain","Get Config Path","next(err,path)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tresult = null","","\t\topts.configPaths ?= config.configPaths","\t\topts.configPaths = [opts.configPaths]  unless typeChecker.isArray(opts.configPaths)","","\t\ttasks = new TaskGroup 'getConfigPath tasks', next:(err) ->","\t\t\treturn next(err, result)","","\t\topts.configPaths.forEach (configPath) ->","\t\t\ttasks.addTask \"Checking if [#{configPath}] exists\", (complete) ->","\t\t\t\treturn complete()  if result","\t\t\t\tsafefs.exists configPath, (exists) ->","\t\t\t\t\tif exists","\t\t\t\t\t\tresult = configPath","\t\t\t\t\t\ttasks.exit()","\t\t\t\t\telse","\t\t\t\t\t\tcomplete()","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B217","text":"extendCollections","typ":"method","icon":"method","comments":["Prepare","Ensure array","Determine our configuration path","Run them synchronously","Chain","Extend Collecitons","next(err)"],"code":["\t\tdocpad = @","\t\tdocpadConfig = @getConfig()","\t\tlocale = @getLocale()","\t\tdatabase = @getDatabase()","","\t\t@setCollections({","\t\t\t# Standard Collections","\t\t\tdocuments: database.createLiveChildCollection()","\t\t\t\t.setQuery('isDocument', {","\t\t\t\t\trender: true","\t\t\t\t\twrite: true","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingDocument, model.getFilePath()))","\t\t\t\t)","\t\t\tfiles: database.createLiveChildCollection()","\t\t\t\t.setQuery('isFile', {","\t\t\t\t\trender: false","\t\t\t\t\twrite: true","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingFile, model.getFilePath()))","\t\t\t\t)","\t\t\tlayouts: database.createLiveChildCollection()","\t\t\t\t.setQuery('isLayout', {","\t\t\t\t\t$or:","\t\t\t\t\t\tisLayout: true","\t\t\t\t\t\tfullPath: $startsWith: docpadConfig.layoutsPaths","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingLayout, model.getFilePath()))","\t\t\t\t\tmodel.setDefaults({","\t\t\t\t\t\tisLayout: true","\t\t\t\t\t\trender: false","\t\t\t\t\t\twrite: false","\t\t\t\t\t})","\t\t\t\t)","","\t\t\t# Special Collections","\t\t\tgenerate: database.createLiveChildCollection()","\t\t\t\t.setQuery('generate', {","\t\t\t\t\tdynamic: false","\t\t\t\t\tignored: false","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingGenerate, model.getFilePath()))","\t\t\t\t)","\t\t\treferencesOthers: database.createLiveChildCollection()","\t\t\t\t.setQuery('referencesOthers', {","\t\t\t\t\tdynamic: false","\t\t\t\t\tignored: false","\t\t\t\t\treferencesOthers: true","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingReferencesOthers, model.getFilePath()))","\t\t\t\t)","\t\t\thasLayout: database.createLiveChildCollection()","\t\t\t\t.setQuery('hasLayout', {","\t\t\t\t\tdynamic: false","\t\t\t\t\tignored: false","\t\t\t\t\tlayout: $exists: true","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingHasLayout, model.getFilePath()))","\t\t\t\t)","\t\t\thtml: database.createLiveChildCollection()","\t\t\t\t.setQuery('isHTML', {","\t\t\t\t\twrite: true","\t\t\t\t\toutExtension: 'html'","\t\t\t\t})","\t\t\t\t.on('add', (model) ->","\t\t\t\t\tdocpad.log('debug', util.format(locale.addingHtml, model.getFilePath()))","\t\t\t\t)","\t\t\tstylesheet: database.createLiveChildCollection()","\t\t\t\t.setQuery('isStylesheet', {","\t\t\t\t\twrite: true","\t\t\t\t\toutExtension: 'css'","\t\t\t\t})","\t\t})","","\t\t@setBlocks({","\t\t\tmeta: new MetaCollection()","\t\t\tscripts: new ScriptsCollection()","\t\t\tstyles: new StylesCollection()","\t\t})","","\t\ttasks = new TaskGroup \"extendCollections tasks\", concurrency:0, next:(err) ->","\t\t\tdocpad.error(err)  if err","\t\t\tdocpad.emitSerial('extendCollections', next)","","\t\teachr docpadConfig.collections or {}, (fn,name) ->","\t\t\ttasks.addTask \"creating the custom collection: #{name}\", (complete) ->","\t\t\t\t# Init","\t\t\t\tambi [fn.bind(docpad), fn], database, (err, collection) ->","\t\t\t\t\t# Check for error","\t\t\t\t\tif err","\t\t\t\t\t\tdocpad.error(err)","\t\t\t\t\t\treturn complete()","","\t\t\t\t\t# Check the type of the collection","\t\t\t\t\telse unless collection instanceof QueryCollection","\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.errorInvalidCollection, name)","\t\t\t\t\t\treturn complete()","","\t\t\t\t\t# Make it a live collection","\t\t\t\t\tcollection.live(true)  if collection","","\t\t\t\t\t# Apply the collection","\t\t\t\t\tdocpad.setCollection(name, collection)","\t\t\t\t\treturn complete()","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B218","text":"resetCollections","typ":"prop","icon":"prop","comments":["Prepare","Standard Collections","Blocks","Custom Collections Group","Cycle through Custom Collections","Run Custom collections","Chain","Reset Collections","next(err)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tdatabase = docpad.getDatabase()","","\t\tdocpad.generated = false","","\t\tdatabase.reset([])","\t\tmeta = @getBlock('meta').reset([])","\t\tscripts = @getBlock('scripts').reset([])","\t\tstyles = @getBlock('styles').reset([])","\t\tmeta.add(\"\"\"<meta name=\"generator\" content=\"DocPad v#{docpad.getVersion()}\" />\"\"\")  if docpad.getConfig().poweredByDocPad isnt false","","\t\t@filesByUrl = {}","\t\t@filesBySelector = {}","\t\t@filesByOutPath = {}","","\t\tnext()","\t\t@",""],"children":[]},{"id":"B219","text":"initGitRepo","typ":"prop","icon":"prop","comments":["Prepare","Make it as if we have never generated before","Perform a complete clean of our collections","^ Backbone.js v1.1 changes the return values of these, however we change that in our Element class","because if we didn't, all our skeletons would fail","","Add default block entries","Reset caches","Chain","Init Git Repo","next(err,results)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.cwd ?= config.rootPath","\t\topts.output ?= @getDebugging()","","\t\tsafeps.initGitRepo(opts, next)","","\t\t@",""],"children":[]},{"id":"B220","text":"initNodeModules","typ":"prop","icon":"prop","comments":["Prepare","Extract","Forward","Chain","Init Node Modules","next(err,results)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.cwd ?= config.rootPath","\t\topts.output ?= docpad.getDebugging()","\t\topts.force ?= if config.offline then false else true","\t\topts.args ?= []","\t\topts.args.push('--force')  if config.force","\t\topts.args.push('--no-registry')  if config.offline","","\t\tdocpad.log('info', 'npm install')  if opts.output","","\t\tsafeps.initNodeModules(opts, next)","","\t\t@",""],"children":[]},{"id":"B221","text":"fixNodePackageVersions","typ":"method","icon":"method","comments":["Prepare","Extract","^ @todo this line causes --force to be added, when it shouldn't be","Log","Forward","Chain","Fix Node Package Versions","Combat to https://github.com/npm/npm/issues/4587issuecomment-35370453","next(err)"],"code":["\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.packagePath ?= config.packagePath","","\t\tsafefs.readFile opts.packagePath, (err,buffer) ->","\t\t\tdata = buffer.toString()","\t\t\tdata = data.replace(/(\"docpad(?:.*?)\": \")\\^/g, '$1~')","\t\t\tsafefs.writeFile opts.packagePath, data, (err) ->","\t\t\t\treturn next(err)","","\t\t@",""],"children":[]},{"id":"B222","text":"installNodeModule","typ":"prop","icon":"prop","comments":["Prepare","Extract","Read and replace","Chain","Install Node Module","next(err,result)"],"code":["(names,opts) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.cwd ?= config.rootPath","\t\topts.output ?= docpad.getDebugging()","\t\topts.args ?= []","","\t\topts.global ?= false","\t\topts.global = ['--global']             if opts.global is true","\t\topts.global = [opts.global]            if opts.global and Array.isArray(opts.global) is false","","\t\topts.save ?= !opts.global","\t\topts.save = ['--save']                 if opts.save is true","\t\topts.save = [opts.save]                if opts.save and Array.isArray(opts.save) is false","","\t\tcommand = ['npm', 'install']","","\t\tnames = names.split(/[,\\s]+/)  unless typeChecker.isArray(names)","\t\tnames.forEach (name) ->","\t\t\t# Check","\t\t\treturn  unless name","","\t\t\t# Ensure latest if version isn't specfied","\t\t\tname += '@latest'  if name.indexOf('@') is -1","","\t\t\t# Push the name to the commands","\t\t\tcommand.push(name)","","\t\tcommand.push(opts.args...)","\t\tcommand.push('--force')           if config.force","\t\tcommand.push('--no-registry')     if config.offline","\t\tcommand.push(opts.save...)        if opts.save","\t\tcommand.push(opts.global...)      if opts.global","","\t\tdocpad.log('info', command.join(' '))  if opts.output","","\t\tsafeps.spawn(command, opts, next)","","\t\t@",""],"children":[]},{"id":"B223","text":"uninstallNodeModule","typ":"prop","icon":"prop","comments":["Prepare","Extract","Command","Names","Arguments","Log","Forward","Chain","Uninstall Node Module","next(err,result)"],"code":["(names,opts) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.cwd ?= config.rootPath","\t\topts.output ?= docpad.getDebugging()","\t\topts.args ?= []","","\t\topts.global ?= false","\t\topts.global = ['--global']             if opts.global is true","\t\topts.global = [opts.global]            if opts.global and Array.isArray(opts.global) is false","","\t\topts.save ?= !opts.global","\t\topts.save = ['--save', '--save-dev']   if opts.save is true","\t\topts.save = [opts.save]                if opts.save and Array.isArray(opts.save) is false","","\t\tcommand = ['npm', 'uninstall']","","\t\tnames = names.split(/[,\\s]+/)  unless typeChecker.isArray(names)","\t\tcommand.push(names...)","","\t\tcommand.push(opts.args...)","\t\tcommand.push(opts.save...)        if opts.save","\t\tcommand.push(opts.global...)      if opts.global","","\t\tdocpad.log('info', command.join(' '))  if opts.output","","\t\tsafeps.spawn(command, opts, next)","","\t\t@","","",""],"children":[]},{"id":"B224","text":"setLogLevel","typ":"method","icon":"method","comments":["Prepare","Extract","Command","Names","Arguments","Log","Forward","Chain","=================================","Logging","","Set Log Level"],"code":["\t\t@getLogger().setConfig({level})","\t\tif level is 7","\t\t\tloggers = @getLoggers()","\t\t\tloggers.debug ?= loggers.logger","\t\t\t\t.pipe(","\t\t\t\t\tnew (require('caterpillar-human').Human)(color:false)","\t\t\t\t)","\t\t\t\t.pipe(","\t\t\t\t\trequire('fs').createWriteStream(@debugLogPath)","\t\t\t\t)","\t\t@",""],"children":[]},{"id":"B225","text":"getLogLevel","typ":"method","icon":"method","comments":["Are we debugging?"],"code":["\t\treturn @getConfig().logLevel",""],"children":[]},{"id":"B226","text":"getDebugging","typ":"method","icon":"method","comments":["Are we debugging?"],"code":["\t\treturn @getLogLevel() is 7",""],"children":[]},{"id":"B227","text":"fatal","typ":"method","icon":"method","comments":["Handle a fatal error"],"code":["\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\treturn @  unless err","","\t\t@error err, 'err', ->","\t\t\tprocess.stderr.write require('util').inspect(err.stack or err.message)","\t\t\tdocpad.destroy()","","\t\t@",""],"children":[]},{"id":"B228","text":"log","typ":"method","icon":"method","comments":["Check","Handle","Chain","Log"],"code":["\t\tlogger = @getLogger() or console","\t\tlogger.log.apply(logger, args)","","\t\t@",""],"children":[]},{"id":"B229","text":"error","typ":"prop","icon":"prop","comments":["Log","Chain","Handle an error"],"code":["(err,type='err',next) =>","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tif !err or err.logged","\t\t\tnext?()","\t\telse","\t\t\t# Log the error only if it hasn't been logged already","\t\t\terr.logged = true","\t\t\terr = new Error(err)  unless err.message?","\t\t\terr.logged = true","\t\t\tmessage = (err.stack ? err.message).toString()","\t\t\tdocpad.log(type, locale.errorOccured, '\\n'+message)","\t\t\tdocpad.notify(err.message, title:locale.errorOccured)","","\t\t\t# Track","\t\t\t@trackError(err, next)","","\t\t@",""],"children":[]},{"id":"B230","text":"trackError","typ":"prop","icon":"prop","comments":["Prepare","Check if we have already logged this error","Chain","Track error"],"code":["(err,next) =>","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\tif config.offline is false and config.reportErrors","\t\t\tdata = {}","\t\t\tdata.message = err.message","\t\t\tdata.stack = err.stack.toString()  if err.stack","\t\t\tdata.config = config","\t\t\tdata.env = process.env","\t\t\tdocpad.track('error', data, next)","\t\telse","\t\t\tsetImmediate ->  # avoid zalgo","\t\t\t\tnext?()","","\t\t@",""],"children":[]},{"id":"B231","text":"warn","typ":"prop","icon":"prop","comments":["PRepare","Track","Chain","Handle a warning"],"code":["(message,err,next) =>","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tdocpad.log('warn', message)","\t\tdocpad.error(err, 'warn', next)  if err","\t\tdocpad.notify(message, title:locale.warnOccured)","","\t\t@",""],"children":[]},{"id":"B232","text":"notify","typ":"prop","icon":"prop","comments":["Prepare","Log","Chain","Send a notify event to plugins (like growl)"],"code":["(message,options={}) =>","\t\tdocpad = @","","\t\tdocpad.emitSerial 'notify', {message,options}, (err) ->","\t\t\tdocpad.error(err)  if err","","\t\t@",""],"children":[]},{"id":"B233","text":"checkRequest","typ":"method","icon":"method","comments":["Prepare","Emit","Chain","Check Request"],"code":["\t\tnext ?= @error.bind(@)","\t\treturn (err,res) ->","\t\t\t# Check","\t\t\treturn next(err, res)  if err","","\t\t\t# Check","\t\t\tif res.body?.success is false or res.body?.error","\t\t\t\terr = new Error(res.body.error or 'unknown request error')","\t\t\t\treturn next(err, res)","","\t\t\t# Success","\t\t\treturn next(null, res)",""],"children":[]},{"id":"B234","text":"subscribe","typ":"method","icon":"method","comments":["Subscribe","next(err)"],"code":["\t\tconfig = @getConfig()","","\t\tif config.offline is false","\t\t\tif @userConfig?.email","\t\t\t\t# Data","\t\t\t\tdata = {}","\t\t\t\tdata.email = @userConfig.email  # required","\t\t\t\tdata.name = @userConfig.name or null","\t\t\t\tdata.username = @userConfig.username or null","","\t\t\t\t# Apply","\t\t\t\tsuperAgent","\t\t\t\t\t.post(config.helperUrl)","\t\t\t\t\t.type('json').set('Accept', 'application/json')","\t\t\t\t\t.query(","\t\t\t\t\t\tmethod: 'add-subscriber'","\t\t\t\t\t)","\t\t\t\t\t.send(data)","\t\t\t\t\t.timeout(30*1000)","\t\t\t\t\t.end @checkRequest next","\t\t\telse","\t\t\t\terr = new Error('Email not provided')","\t\t\t\tnext?(err)","\t\telse","\t\t\tnext?()","","\t\t@",""],"children":[]},{"id":"B235","text":"track","typ":"prop","icon":"prop","comments":["Prepare","Check","Chain","Track","next(err)"],"code":["(name,things={},next) =>","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\tif config.offline is false and config.reportStatistics","\t\t\t# Data","\t\t\tdata = {}","\t\t\tdata.userId = @userConfig.username or null","\t\t\tdata.event = name","\t\t\tdata.properties = things","","\t\t\t# Things","\t\t\tthings.websiteName = @websitePackageConfig.name  if @websitePackageConfig?.name","\t\t\tthings.platform = @getProcessPlatform()","\t\t\tthings.environment = @getEnvironment()","\t\t\tthings.version = @getVersion()","\t\t\tthings.nodeVersion = @getProcessVersion()","","\t\t\t# Plugins","\t\t\teachr docpad.loadedPlugins, (value,key) ->","\t\t\t\tthings['plugin-'+key] = value.version or true","","\t\t\t# Apply","\t\t\tdocpad.getTrackRunner().addTask 'track task', (complete) ->","\t\t\t\tsuperAgent","\t\t\t\t\t.post(config.helperUrl)","\t\t\t\t\t.type('json').set('Accept', 'application/json')","\t\t\t\t\t.query(","\t\t\t\t\t\tmethod: 'analytics'","\t\t\t\t\t\taction: 'track'","\t\t\t\t\t)","\t\t\t\t\t.send(data)","\t\t\t\t\t.timeout(30*1000)","\t\t\t\t\t.end docpad.checkRequest (err) ->","\t\t\t\t\t\tnext?(err)","\t\t\t\t\t\tcomplete(err)  # we pass the error here, as if we error, we want to stop all tracking","","\t\telse","\t\t\tnext?()","","\t\t@",""],"children":[]},{"id":"B236","text":"identify","typ":"method","icon":"method","comments":["Prepare","Check","Chain","Identify","next(err)"],"code":["\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\tif config.offline is false and config.reportStatistics and @userConfig?.username","\t\t\t# Data","\t\t\tdata = {}","\t\t\tdata.userId = @userConfig.username  # required","\t\t\tdata.traits = things = {}","","\t\t\t# Things","\t\t\tnow = new Date()","\t\t\tthings.username = @userConfig.username  # required","\t\t\tthings.email = @userConfig.email or null","\t\t\tthings.name = @userConfig.name or null","\t\t\tthings.lastLogin = now.toISOString()","\t\t\tthings.lastSeen = now.toISOString()","\t\t\tthings.countryCode = safeps.getCountryCode()","\t\t\tthings.languageCode = safeps.getLanguageCode()","\t\t\tthings.platform = @getProcessPlatform()","\t\t\tthings.version = @getVersion()","\t\t\tthings.nodeVersion = @getProcessVersion()","","\t\t\t# Is this a new user?","\t\t\tif docpad.userConfig.identified isnt true","\t\t\t\t# Update","\t\t\t\tthings.created = now.toISOString()","","\t\t\t\t# Create the new user","\t\t\t\tdocpad.getTrackRunner().addTask 'create new user', (complete) ->","\t\t\t\t\tsuperAgent","\t\t\t\t\t\t.post(config.helperUrl)","\t\t\t\t\t\t.type('json').set('Accept', 'application/json')","\t\t\t\t\t\t.query(","\t\t\t\t\t\t\tmethod: 'analytics'","\t\t\t\t\t\t\taction: 'identify'","\t\t\t\t\t\t)","\t\t\t\t\t\t.send(data)","\t\t\t\t\t\t.timeout(30*1000)","\t\t\t\t\t\t.end docpad.checkRequest (err) =>","\t\t\t\t\t\t\t# Save the changes with these","\t\t\t\t\t\t\tdocpad.updateUserConfig(identified:true)","","\t\t\t\t\t\t\t# Complete","\t\t\t\t\t\t\treturn complete(err)","","\t\t\t# Or an existing user?","\t\t\telse","\t\t\t\t# Update the existing user's information witht he latest","\t\t\t\tdocpad.getTrackRunner().addTask 'update user', (complete) =>","\t\t\t\t\tsuperAgent","\t\t\t\t\t\t.post(config.helperUrl)","\t\t\t\t\t\t.type('json').set('Accept', 'application/json')","\t\t\t\t\t\t.query(","\t\t\t\t\t\t\tmethod: 'analytics'","\t\t\t\t\t\t\taction: 'identify'","\t\t\t\t\t\t)","\t\t\t\t\t\t.send(data)","\t\t\t\t\t\t.timeout(30*1000)","\t\t\t\t\t\t.end docpad.checkRequest complete","","\t\tnext?()","\t\t@","",""],"children":[]},{"id":"B237","text":"createFile","typ":"prop","icon":"prop","comments":["Prepare","Check","Chain","=================================","Models and Collections","","---------------------------------","b/c compat functions","","Create File"],"code":["(attrs={},opts={}) ->","\t\topts.modelType = 'file'","\t\treturn @createModel(attrs, opts)",""],"children":[]},{"id":"B238","text":"createDocument","typ":"prop","icon":"prop","comments":["Create Document"],"code":["(attrs={},opts={}) ->","\t\topts.modelType = 'document'","\t\treturn @createModel(attrs, opts)",""],"children":[]},{"id":"B239","text":"parseFileDirectory","typ":"prop","icon":"prop","comments":["Parse File Directory"],"code":["(opts={},next) ->","\t\topts.modelType ?= 'file'","\t\topts.collection ?= @getDatabase()","\t\treturn @parseDirectory(opts, next)",""],"children":[]},{"id":"B240","text":"parseDocumentDirectory","typ":"prop","icon":"prop","comments":["Parse Document Directory"],"code":["(opts={},next) ->","\t\topts.modelType ?= 'document'","\t\topts.collection ?= @getDatabase()","\t\treturn @parseDirectory(opts, next)","",""],"children":[]},{"id":"B241","text":"attachModelEvents","typ":"method","icon":"method","comments":["---------------------------------","Standard functions","","Attach Model Events"],"code":["\t\tdocpad = @","","\t\tif model.attachedDocumentEvents isnt true","\t\t\tmodel.attachedDocumentEvents = true","","\t\t\t# Attach document events","\t\t\tif model.type is 'document'","\t\t\t\t# Clone","\t\t\t\tmodel.on 'clone', (clonedModel) ->","\t\t\t\t\tdocpad.attachModelEvents(clonedModel)","","\t\t\t\t# Render","\t\t\t\tmodel.on 'render', (args...) ->","\t\t\t\t\tdocpad.emitSerial('render', args...)","","\t\t\t\t# Render document","\t\t\t\tmodel.on 'renderDocument', (args...) ->","\t\t\t\t\tdocpad.emitSerial('renderDocument', args...)","","\t\t\t\t# Fetch a layout","\t\t\t\tmodel.on 'getLayout', (opts={},next) ->","\t\t\t\t\topts.collection = docpad.getCollection('layouts')","\t\t\t\t\tlayout = docpad.getFileBySelector(opts.selector, opts)","\t\t\t\t\tnext(null, {layout})","","\t\t\t# Remove","\t\t\t#model.on 'remove', (file) ->","\t\t\t#\tdocpad.getDatabase().remove(file)","\t\t\t# ^ Commented out as for some reason this stops layouts from working","","\t\t\t# Error","\t\t\tmodel.on 'error', (args...) ->","\t\t\t\tdocpad.error(args...)","","\t\t\t# Log","\t\t\tmodel.on 'log', (args...) ->","\t\t\t\tdocpad.log(args...)","","\t\t@",""],"children":[]},{"id":"B242","text":"addModel","typ":"prop","icon":"prop","comments":["Prepare","Only attach events if we haven't already done so","Chain","Add Model"],"code":["(model, opts) ->","\t\tmodel = @createModel(model, opts)","\t\t@getDatabase().add(model)","\t\treturn model",""],"children":[]},{"id":"B243","text":"addModels","typ":"prop","icon":"prop","comments":["Add Models"],"code":["(models, opts) ->","\t\tmodels = @createModels(models, opts)","\t\t@getDatabase().add(models)","\t\treturn models",""],"children":[]},{"id":"B244","text":"createModels","typ":"prop","icon":"prop","comments":["Create Models"],"code":["(models, opts) ->","\t\tfor model in models","\t\t\t@createModel(model, opts)"],"children":[]},{"id":"B245","text":"createModel","typ":"prop","icon":"prop","comments":["return the for loop results","","Create Model"],"code":["(attrs={},opts={}) ->","\t\tif attrs instanceof FileModel","\t\t\treturn attrs","","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tdatabase = @getDatabase()","\t\tfileFullPath = attrs.fullPath or null","","","\t\tif attrs.fullPath","\t\t\tresult = database.findOne(fullPath: attrs.fullPath)","\t\t\tif result","\t\t\t\treturn result","","","\t\tif fileFullPath","\t\t\t# Check if we have a document or layout","\t\t\tunless opts.modelType","\t\t\t\tfor dirPath in config.documentsPaths.concat(config.layoutsPaths)","\t\t\t\t\tif fileFullPath.indexOf(dirPath) is 0","\t\t\t\t\t\tattrs.relativePath or= fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/,'')","\t\t\t\t\t\topts.modelType = 'document'","\t\t\t\t\t\tbreak","","\t\t\t# Check if we have a file","\t\t\tunless opts.modelType","\t\t\t\tfor dirPath in config.filesPaths","\t\t\t\t\tif fileFullPath.indexOf(dirPath) is 0","\t\t\t\t\t\tattrs.relativePath or= fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/,'')","\t\t\t\t\t\topts.modelType = 'file'","\t\t\t\t\t\tbreak","","\t\topts = extendr.extend({","\t\t\tdetectEncoding: config.detectEncoding","\t\t\trootOutDirPath: config.outPath","\t\t}, opts)","","\t\tif opts.modelType is 'file'","\t\t\t# Create a file model","\t\t\tmodel = new FileModel(attrs, opts)","\t\telse","\t\t\t# Create document model","\t\t\tmodel = new DocumentModel(attrs, opts)","","\t\t@attachModelEvents(model)","","\t\treturn model",""],"children":[]},{"id":"B246","text":"parseDirectory","typ":"prop","icon":"prop","comments":["Check","Prepare","Find or create","This functionality use to be inside ensureModel","But that caused duplicates in some instances","So now we will always check","-----------------------------","Try and determine the model type","","If the type hasn't been specified try and detemrine it based on the full path","-----------------------------","Create the appropriate emodel","","Extend the opts with things we need","-----------------------------","Finish up","","Attach Events","Return","Parse a directory","next(err, files)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\t{path,createFunction} = opts","\t\tcreateFunction ?= @createModel","\t\tfiles = opts.collection or new FilesCollection()","","\t\tsafefs.exists path, (exists) ->","\t\t\t# Check","\t\t\tunless exists","\t\t\t\t# Log","\t\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryNonexistant, path)","","\t\t\t\t# Forward","\t\t\t\treturn next()","","\t\t\t# Log","\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryParsing, path)","","\t\t\t# Files","\t\t\tdocpad.scandir(","\t\t\t\t# Path","\t\t\t\tpath: path","","\t\t\t\t# File Action","\t\t\t\tfileAction: (fileFullPath,fileRelativePath,nextFile,fileStat) ->","\t\t\t\t\t# Prepare","\t\t\t\t\tdata =","\t\t\t\t\t\tfullPath: fileFullPath","\t\t\t\t\t\trelativePath: fileRelativePath","\t\t\t\t\t\tstat: fileStat","","\t\t\t\t\t# Create file","\t\t\t\t\tfile = createFunction.call(docpad, data, opts)","","\t\t\t\t\t# Update the file's stat","\t\t\t\t\t# To ensure changes files are handled correctly in generation","\t\t\t\t\tfile.action 'load', (err) ->","\t\t\t\t\t\t# Error?","\t\t\t\t\t\treturn nextFile(err)  if err","","\t\t\t\t\t\t# Add the file to the collection","\t\t\t\t\t\tfiles.add(file)","","\t\t\t\t\t\t# Next","\t\t\t\t\t\tnextFile()","","\t\t\t\t# Next","\t\t\t\tnext: (err) ->","\t\t\t\t\t# Check","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# Log","\t\t\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryParsed, path)","","\t\t\t\t\t# Forward","\t\t\t\t\treturn next(null, files)","\t\t\t)","","\t\t@","",""],"children":[]},{"id":"B247","text":"getPlugin","typ":"method","icon":"method","comments":["Prepare","Extract","Check if the directory exists","Chain","=================================","Plugins","","Get a plugin by it's name"],"code":["\t\t@loadedPlugins[pluginName]",""],"children":[]},{"id":"B248","text":"hasPlugins","typ":"method","icon":"method","comments":["Check if we have any plugins"],"code":["\t\treturn typeChecker.isEmptyObject(@loadedPlugins) is false",""],"children":[]},{"id":"B249","text":"destroyPlugins","typ":"method","icon":"method","comments":["Destroy plugins"],"code":["\t\tfor own name,plugin of @loadedPlugins","\t\t\tplugin.destroy()","\t\t\t@loadedPlugins[name] = null","\t\t@",""],"children":[]},{"id":"B250","text":"loadPlugins","typ":"method","icon":"method","comments":["Load Plugins","next(err)"],"code":["\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\t@slowPlugins = {}","\t\tsnore = balUtil.createSnore ->","\t\t\tdocpad.log 'notice', util.format(locale.pluginsSlow, Object.keys(docpad.slowPlugins).join(', '))","","\t\ttasks = new TaskGroup \"loadPlugins tasks\", concurrency:0, next:(err) ->","\t\t\tdocpad.slowPlugins = {}","\t\t\tsnore.clear()","\t\t\treturn next(err)","","\t\t(@config.pluginsPaths or []).forEach (pluginsPath) ->","\t\t\ttasks.addTask \"load the website's plugins at: #{pluginsPath}\", (complete) ->","\t\t\t\tsafefs.exists pluginsPath, (exists) ->","\t\t\t\t\treturn complete()  unless exists","\t\t\t\t\tdocpad.loadPluginsIn(pluginsPath, complete)","","\t\t(@config.pluginPaths or []).forEach (pluginPath) ->","\t\t\ttasks.addTask \"load custom plugins at: #{pluginPath}\", (complete) ->","\t\t\t\tsafefs.exists pluginPath, (exists) ->","\t\t\t\t\treturn complete()  unless exists","\t\t\t\t\tdocpad.loadPlugin(pluginPath, complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B251","text":"loadedPlugin","typ":"prop","icon":"prop","comments":["Prepare","Snore","Async","Load website plugins","Load specific plugins","Execute the loading asynchronously","Chain","Loaded Plugin","Checks if a plugin was loaded succesfully","next(err,loaded)"],"code":["(pluginName,next) ->","\t\tdocpad = @","","\t\tloaded = docpad.loadedPlugins[pluginName]?","\t\tnext(null,loaded)","","\t\t@",""],"children":[]},{"id":"B252","text":"loadPlugin","typ":"prop","icon":"prop","comments":["Prepare","Check","Chain","Load PLugin","next(err)"],"code":["(fileFullPath,_next) ->","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","\t\tnext = (err) ->","\t\t\t# Remove from slow plugins","\t\t\tdelete docpad.slowPlugins[pluginName]","\t\t\t# Forward","\t\t\treturn _next(err)","","\t\tloader = new PluginLoader(","\t\t\tdirPath: fileFullPath","\t\t\tdocpad: @","\t\t\tBasePlugin: BasePlugin","\t\t)","\t\tpluginName = loader.pluginName","\t\tenabled = (","\t\t\t(config.enableUnlistedPlugins  and  config.enabledPlugins[pluginName]? is false)  or","\t\t\tconfig.enabledPlugins[pluginName] is true","\t\t)","","\t\tif docpad.loadedPlugins[pluginName]?","\t\t\t# However we probably want to reload the configuration as perhaps the user or environment configuration has changed","\t\t\tdocpad.loadedPlugins[pluginName].setConfig()","\t\t\t# Complete","\t\t\treturn _next()","","\t\tdocpad.slowPlugins[pluginName] = true","","\t\tunless enabled","\t\t\t# Skip","\t\t\tdocpad.log 'debug', util.format(locale.pluginSkipped, pluginName)","\t\t\treturn next()","\t\telse","\t\t\t# Load","\t\t\tdocpad.log 'debug', util.format(locale.pluginLoading, pluginName)","","\t\t\t# Check existance","\t\t\tloader.exists (err,exists) ->","\t\t\t\t# Error or doesn't exist?","\t\t\t\treturn next(err)  if err or not exists","","\t\t\t\t# Check support","\t\t\t\tloader.unsupported (err,unsupported) ->","\t\t\t\t\t# Error?","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# Unsupported?","\t\t\t\t\tif unsupported","\t\t\t\t\t\t# Version?","\t\t\t\t\t\tif unsupported in ['version-docpad','version-plugin'] and config.skipUnsupportedPlugins is false","\t\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.pluginContinued, pluginName)","\t\t\t\t\t\telse","\t\t\t\t\t\t\t# Type?","\t\t\t\t\t\t\tif unsupported is 'type'","\t\t\t\t\t\t\t\tdocpad.log 'debug', util.format(locale.pluginSkippedDueTo, pluginName, unsupported)","","\t\t\t\t\t\t\t# Something else?","\t\t\t\t\t\t\telse","\t\t\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.pluginSkippedDueTo, pluginName, unsupported)","\t\t\t\t\t\t\treturn next()","","\t\t\t\t\t# Load the class","\t\t\t\t\tloader.load (err) ->","\t\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t\t# Create an instance","\t\t\t\t\t\tloader.create {}, (err,pluginInstance) ->","\t\t\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t\t\t# Add to plugin stores","\t\t\t\t\t\t\tdocpad.loadedPlugins[loader.pluginName] = pluginInstance","","\t\t\t\t\t\t\t# Log completion","\t\t\t\t\t\t\tdocpad.log 'debug', util.format(locale.pluginLoaded, pluginName)","","\t\t\t\t\t\t\t# Forward","\t\t\t\t\t\t\treturn next()","","\t\t@",""],"children":[]},{"id":"B253","text":"loadPluginsIn","typ":"prop","icon":"prop","comments":["Prepare","Prepare variables","If we've already been loaded, then exit early as there is no use for us to load again","Add to loading stores","Check","Chain","Load Plugins","next(err)"],"code":["(pluginsPath, next) ->","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\tdocpad.log 'debug', util.format(locale.pluginsLoadingFor, pluginsPath)","\t\t@scandir(","\t\t\t# Path","\t\t\tpath: pluginsPath","","\t\t\t# Skip files","\t\t\tfileAction: false","","\t\t\t# Handle directories","\t\t\tdirAction: (fileFullPath,fileRelativePath,_nextFile) ->","\t\t\t\t# Prepare","\t\t\t\tpluginName = pathUtil.basename(fileFullPath)","\t\t\t\treturn _nextFile(null, false)  if fileFullPath is pluginsPath","\t\t\t\tnextFile = (err,skip) ->","\t\t\t\t\tif err","\t\t\t\t\t\tmessage = util.format(locale.pluginFailedToLoad, pluginName, fileFullPath)+' '+locale.errorFollows","\t\t\t\t\t\tdocpad.warn(message, err)","\t\t\t\t\treturn _nextFile(null, skip)","","\t\t\t\t# Forward","\t\t\t\tdocpad.loadPlugin fileFullPath, (err) ->","\t\t\t\t\treturn nextFile(err, true)","","\t\t\t# Next","\t\t\tnext: (err) ->","\t\t\t\tdocpad.log 'debug', util.format(locale.pluginsLoadedFor, pluginsPath)","\t\t\t\treturn next(err)","\t\t)","","\t\t@","",""],"children":[]},{"id":"B254","text":"compareVersion","typ":"method","icon":"method","comments":["Prepare","Load Plugins","Chain","=================================","Utilities","","---------------------------------","Utilities: Misc","","Compare current DocPad version to the latest"],"code":["\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","","\t\treturn @  if config.offline or !config.checkVersion","","\t\tbalUtil.packageCompare(","\t\t\tlocal: @packagePath","\t\t\tremote: config.latestPackageUrl","\t\t\tnewVersionCallback: (details) ->","\t\t\t\tisLocalInstallation = docpadUtil.isLocalDocPadExecutable()","\t\t\t\tmessage = (if isLocalInstallation then locale.versionOutdatedLocal else locale.versionOutdatedGlobal)","\t\t\t\tcurrentVersion = 'v'+details.local.version","\t\t\t\tlatestVersion = 'v'+details.remote.version","\t\t\t\tupgradeUrl = details.local.upgradeUrl or details.remote.installUrl or details.remote.homepage","\t\t\t\tmessageFilled = util.format(message, currentVersion, latestVersion, upgradeUrl)","\t\t\t\tdocpad.notify(latestVersion, title:locale.versionOutdatedNotification)","\t\t\t\tdocpad.log('notice', messageFilled)","\t\t)","","\t\t@","",""],"children":[]},{"id":"B255","text":"getExchange","typ":"method","icon":"method","comments":["Prepare","Check","Check","Chain","---------------------------------","Utilities: Exchange","","Get Exchange","Get the exchange data","Requires internet access","next(err,exchange)"],"code":["\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","","\t\treturn next(null, docpad.exchange)  if typeChecker.isEmptyObject(docpad.exchange) is false","","\t\treturn next(null, null)  if config.offline","","\t\tdocpad.log('info', locale.exchangeUpdate+' '+locale.pleaseWait)","","\t\texchangeUrl = config.exchangeUrl+'?version='+@version","\t\tdocpad.loadConfigUrl exchangeUrl, (err,parsedData) ->","\t\t\t# Check","\t\t\tif err","\t\t\t\tlocale = docpad.getLocale()","\t\t\t\tdocpad.log('notice', locale.exchangeError+' '+locale.errgdorFollows, err)","\t\t\t\treturn next()","","\t\t\t# Log","\t\t\tdocpad.log('info', locale.exchangeUpdated)","","\t\t\t# Success","\t\t\tdocpad.exchange = parsedData","\t\t\treturn next(null, parsedData)","","\t\t@","",""],"children":[]},{"id":"B256","text":"contextualizeFiles","typ":"prop","icon":"prop","comments":["Prepare","Check if it is stored locally","Offline?","Log","Otherwise fetch it from the exchangeUrl","Chain","---------------------------------","Utilities: Files","","Contextualize files","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\t{collection,templateData} = opts","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","\t\tslowFilesObject = {}","\t\tslowFilesTimer = null","","\t\topts.progress?.step(\"contextualizeFiles (preparing)\").total(1).setTick(0)","","\t\tdocpad.log 'debug', util.format(locale.contextualizingFiles, collection.length)","","\t\tdocpad.emitSerial 'contextualizeBefore', {collection,templateData}, (err) ->","\t\t\t# Prepare","\t\t\treturn next(err)  if err","","\t\t\t# Completion callback","\t\t\ttasks = new TaskGroup \"contextualizeFiles tasks\", concurrency:0, next:(err) ->","\t\t\t\t# Kill the timer","\t\t\t\tclearInterval(slowFilesTimer)","\t\t\t\tslowFilesTimer = null","","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Update progress","\t\t\t\topts.progress?.step(\"contextualizeFiles (postparing)\").total(1).setTick(0)","","\t\t\t\t# After","\t\t\t\tdocpad.emitSerial 'contextualizeAfter', {collection}, (err) ->","\t\t\t\t\t# Check","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# Log","\t\t\t\t\tdocpad.log 'debug', util.format(locale.contextualizedFiles, collection.length)","","\t\t\t\t\t# Forward","\t\t\t\t\treturn next()","","\t\t\t# Add contextualize tasks","\t\t\topts.progress?.step('contextualizeFiles').total(collection.length).setTick(0)","\t\t\tcollection.forEach (file,index) ->","\t\t\t\tfilePath = file.getFilePath()","\t\t\t\tslowFilesObject[file.id] = file.get('relativePath') or file.id","\t\t\t\ttasks.addTask \"conextualizing: #{filePath}\", (complete) ->","\t\t\t\t\tfile.action 'contextualize', (err) ->","\t\t\t\t\t\tdelete slowFilesObject[file.id]","\t\t\t\t\t\topts.progress?.tick()","\t\t\t\t\t\treturn complete(err)","","\t\t\t# Setup the timer","\t\t\tslowFilesTimer = setInterval(","\t\t\t\t->","\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)","\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'contextualizeFiles')+' \\n'+slowFilesArray.join('\\n'))","\t\t\t\tconfig.slowFilesDelay","\t\t\t)","","\t\t\t# Run tasks","\t\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B257","text":"renderFiles","typ":"prop","icon":"prop","comments":["Prepare","Update progress","Log","Start contextualizing","Chain","Render files","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\t{collection,templateData,renderPasses} = opts","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","\t\tslowFilesObject = {}","\t\tslowFilesTimer = null","","\t\topts.progress?.step(\"renderFiles (preparing)\").total(1).setTick(0)","","\t\tdocpad.log 'debug', util.format(locale.renderingFiles, collection.length)","","\t\trenderFile = (file,next) ->","\t\t\t# Render","\t\t\tif file.get('render') is false or !file.get('relativePath')","\t\t\t\tfile.attributes.rtime = new Date()","\t\t\t\tnext(null, file.getOutContent(), file)","\t\t\telse","\t\t\t\tfile.action('render', {templateData}, next)","","\t\t\t# Return","\t\t\treturn file","","\t\trenderCollection = (collectionToRender,{renderPass},next) ->","\t\t\t# Plugin Event","\t\t\tdocpad.emitSerial 'renderCollectionBefore', {collection:collectionToRender,renderPass}, (err) =>","\t\t\t\t# Prepare","\t\t\t\treturn next(err)  if err","","\t\t\t\tsubTasks = new TaskGroup \"renderCollection: #{collectionToRender.options.name}\", concurrency:0, next:(err) ->","\t\t\t\t\t# Prepare","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# Plugin Event","\t\t\t\t\tdocpad.emitSerial('renderCollectionAfter', {collection:collectionToRender,renderPass}, next)","","\t\t\t\t# Cycle","\t\t\t\topts.progress?.step(\"renderFiles (pass #{renderPass})\").total(collectionToRender.length).setTick(0)","\t\t\t\tcollectionToRender.forEach (file) ->","\t\t\t\t\tfilePath = file.getFilePath()","\t\t\t\t\tslowFilesObject[file.id] = file.get('relativePath')","\t\t\t\t\tsubTasks.addTask \"rendering: #{filePath}\", (complete) ->","\t\t\t\t\t\trenderFile file, (err) ->","\t\t\t\t\t\t\tdelete slowFilesObject[file.id] or file.id","\t\t\t\t\t\t\topts.progress?.tick()","\t\t\t\t\t\t\treturn complete(err)","","\t\t\t\t# Return","\t\t\t\tsubTasks.run()","\t\t\t\treturn collectionToRender","","\t\tdocpad.emitSerial 'renderBefore', {collection,templateData}, (err) =>","\t\t\t# Prepare","\t\t\treturn next(err)  if err","","\t\t\t# Async","\t\t\ttasks = new TaskGroup \"renderCollection: renderBefore tasks\", next:(err) ->","\t\t\t\t# Kill the timer","\t\t\t\tclearInterval(slowFilesTimer)","\t\t\t\tslowFilesTimer = null","","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Update progress","\t\t\t\topts.progress?.step(\"renderFiles (postparing)\").total(1).setTick(0)","","\t\t\t\t# After","\t\t\t\tdocpad.emitSerial 'renderAfter', {collection}, (err) ->","\t\t\t\t\t# Check","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# Log","\t\t\t\t\tdocpad.log 'debug', util.format(locale.renderedFiles, collection.length)","","\t\t\t\t\t# Forward","\t\t\t\t\treturn next()","","\t\t\t# Queue the initial render","\t\t\tinitialCollection = collection.findAll('referencesOthers':false)","\t\t\tsubsequentCollection = null","\t\t\ttasks.addTask \"rendering the initial collection\", (complete) ->","\t\t\t\trenderCollection initialCollection, {renderPass:1}, (err) ->","\t\t\t\t\treturn complete(err)  if err","\t\t\t\t\tsubsequentCollection = collection.findAll('referencesOthers':true)","\t\t\t\t\trenderCollection(subsequentCollection, {renderPass:2}, complete)","","\t\t\t# Queue the subsequent renders","\t\t\tif renderPasses > 1","\t\t\t\t[3..renderPasses].forEach (renderPass) ->  tasks.addTask \"rendering the subsequent collection index #{renderPass}\", (complete) ->","\t\t\t\t\trenderCollection(subsequentCollection, {renderPass}, complete)","","\t\t\t# Setup the timer","\t\t\tslowFilesTimer = setInterval(","\t\t\t\t->","\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)","\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'renderFiles')+' \\n'+slowFilesArray.join('\\n'))","\t\t\t\tconfig.slowFilesDelay","\t\t\t)","","\t\t\t# Run tasks","\t\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B258","text":"writeFiles","typ":"prop","icon":"prop","comments":["Prepare","Update progress","Log","Render File","next(null, outContent, file)","Render Collection","Plugin Event","Chain","Write files","next(err)"],"code":["(opts={},next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\t{collection,templateData} = opts","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","\t\tslowFilesObject = {}","\t\tslowFilesTimer = null","","\t\topts.progress?.step(\"writeFiles (preparing)\").total(1).setTick(0)","","\t\tdocpad.log 'debug', util.format(locale.writingFiles, collection.length)","","\t\tdocpad.emitSerial 'writeBefore', {collection,templateData}, (err) =>","\t\t\t# Prepare","\t\t\treturn next(err)  if err","","\t\t\t# Completion callback","\t\t\ttasks = new TaskGroup \"writeFiles tasks\", concurrency:0, next:(err) ->","\t\t\t\t# Kill the timer","\t\t\t\tclearInterval(slowFilesTimer)","\t\t\t\tslowFilesTimer = null","","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Update progress","\t\t\t\topts.progress?.step(\"writeFiles (postparing)\").total(1).setTick(0)","","\t\t\t\t# After","\t\t\t\tdocpad.emitSerial 'writeAfter', {collection}, (err) ->","\t\t\t\t\t# Check","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# docpad.log 'debug', util.format(locale.wroteFiles, collection.length)","\t\t\t\t\treturn next()","","\t\t\t# Add write tasks","\t\t\topts.progress?.step('writeFiles').total(collection.length).setTick(0)","\t\t\tcollection.forEach (file,index) ->","\t\t\t\tfilePath = file.getFilePath()","\t\t\t\ttasks.addTask \"writing the file: #{filePath}\", (complete) ->","\t\t\t\t\t# Prepare","\t\t\t\t\tslowFilesObject[file.id] = file.get('relativePath')","","\t\t\t\t\t# Create sub tasks","\t\t\t\t\tfileTasks = new TaskGroup \"tasks for file write: #{filePath}\", concurrency:0, next:(err) ->","\t\t\t\t\t\tdelete slowFilesObject[file.id]","\t\t\t\t\t\topts.progress?.tick()","\t\t\t\t\t\treturn complete(err)","","\t\t\t\t\t# Write out","\t\t\t\t\tif file.get('write') isnt false and file.get('dynamic') isnt true and file.get('outPath')","\t\t\t\t\t\tfileTasks.addTask \"write out\", (complete) ->","\t\t\t\t\t\t\tfile.action('write', complete)","","\t\t\t\t\t# Write source","\t\t\t\t\tif file.get('writeSource') is true and file.get('fullPath')","\t\t\t\t\t\tfileTasks.addTask \"write source\", (complete) ->","\t\t\t\t\t\t\tfile.action('writeSource', complete)","","\t\t\t\t\t# Run sub tasks","\t\t\t\t\tfileTasks.run()","","\t\t\t# Setup the timer","\t\t\tslowFilesTimer = setInterval(","\t\t\t\t->","\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)","\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'writeFiles')+' \\n'+slowFilesArray.join('\\n'))","\t\t\t\tconfig.slowFilesDelay","\t\t\t)","","\t\t\t# Run tasks","\t\t\ttasks.run()","","\t\t@","",""],"children":[]},{"id":"B259","text":"generateStarted","typ":"prop","icon":"prop","comments":["Prepare","Update progress","Log","Plugin Event","Chain","---------------------------------","Generate","","Generate Helpers"],"code":["null"],"children":[]},{"id":"B260","text":"generateEnded","typ":"prop","icon":"prop","comments":[],"code":["null"],"children":[]},{"id":"B261","text":"generating","typ":"prop","icon":"prop","comments":[],"code":["false"],"children":[]},{"id":"B262","text":"generated","typ":"prop","icon":"prop","comments":[],"code":["false  # true once the first generation has occured"],"children":[]},{"id":"B263","text":"createProgress","typ":"method","icon":"method","comments":["Create Progress Bar"],"code":["\t\tdocpad = @","\t\tconfig = docpad.getConfig()","","\t\tprogress = null","\t\tif config.prompts and @getLogLevel() is 6","\t\t\tprogress = require('progressbar').create()","\t\t\t@getLoggers().console.unpipe(process.stdout)","\t\t\t@getLogger().once 'log', progress.logListener ?= (data) ->","\t\t\t\tif data.levelNumber <= 5  # notice or higher","\t\t\t\t\tdocpad.destroyProgress(progress)","","\t\treturn progress",""],"children":[]},{"id":"B264","text":"destroyProgress","typ":"method","icon":"method","comments":["Prepare","Only show progress if","- prompts are supported (so no servers)","- and we are log level 6 (the default level)","Return","Destroy Progress Bar"],"code":["\t\tif progress","\t\t\tprogress.finish()","\t\t\t@getLoggers().console.unpipe(process.stdout).pipe(process.stdout)","","\t\treturn progress",""],"children":[]},{"id":"B265","text":"destroyRegenerateTimer","typ":"method","icon":"method","comments":["Fetch","Return","Destroy Regenerate Timer"],"code":["\t\tdocpad = @","","\t\tif docpad.regenerateTimer","\t\t\tclearInterval(docpad.regenerateTimer)","\t\t\tdocpad.regenerateTimer = null","","\t\t@",""],"children":[]},{"id":"B266","text":"createRegenerateTimer","typ":"method","icon":"method","comments":["Prepare","Clear Regenerate Timer","Chain","Create Regenerate Timer"],"code":["\t\tdocpad = @","\t\tlocale = docpad.getLocale()","\t\tconfig = docpad.getConfig()","","\t\tif config.regenerateEvery","\t\t\tdocpad.regenerateTimer = setTimeout(","\t\t\t\t->","\t\t\t\t\tdocpad.log('info', locale.renderInterval)","\t\t\t\t\tdocpad.action('generate', config.regenerateEveryOptions)","\t\t\t\tconfig.regenerateEvery","\t\t\t)","","\t\t@",""],"children":[]},{"id":"B267","text":"generate","typ":"prop","icon":"prop","comments":["Prepare","Create Regenerate Timer","Chain","Generate","next(err)"],"code":["(opts, next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = docpad.getConfig()","\t\tlocale = docpad.getLocale()","\t\tdatabase = docpad.getDatabase()","","\t\treturn next()  if opts.collection?.length is 0","","","\t\tlastGenerateStarted = docpad.generateStarted","\t\tdocpad.generateStarted = new Date()","\t\tdocpad.generateEnded = null","\t\tdocpad.generating = true","","\t\tdocpad.databaseTempCache = new FilesCollection(database.models)  if database.models.length","","\t\topts.progress ?= docpad.createProgress()","","\t\topts.templateData = docpad.getTemplateData(opts.templateData or {})","","\t\topts.renderPasses or= config.renderPasses","","","\t\tdocpad.destroyRegenerateTimer()","","\t\tdocpad.log('notice', locale.renderNoPlugins)  unless docpad.hasPlugins()","","\t\tdocpad.log('info', locale.renderGenerating)","\t\tdocpad.notify (new Date()).toLocaleTimeString(), title: locale.renderGeneratingNotification","","","\t\ttasks = new TaskGroup(\"generate tasks\")","","\t\t\t.on('item.run', (item) ->","\t\t\t\ttotals = tasks.getTotals()","\t\t\t\topts.progress?.step(\"generate: #{item.getConfig().name}\").total(totals.total).setTick(totals.completed)","\t\t\t)","","\t\t\t.once('complete', (err) ->","\t\t\t\t# Update generating flag","\t\t\t\tdocpad.generating = false","\t\t\t\tdocpad.generateEnded = new Date()","","\t\t\t\t# Update caches","\t\t\t\tdocpad.databaseTempCache = null","","\t\t\t\t# Create Regenerate Timer","\t\t\t\tdocpad.createRegenerateTimer()","","\t\t\t\t# Clear Progress","\t\t\t\tif opts.progress","\t\t\t\t\tdocpad.destroyProgress(opts.progress)","\t\t\t\t\topts.progress = null","","\t\t\t\t# Error?","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Log success message","\t\t\t\tseconds = (docpad.generateEnded - docpad.generateStarted) / 1000","\t\t\t\thowMany = \"#{opts.collection?.length or 0}/#{database.length}\"","\t\t\t\tdocpad.log 'info', util.format(locale.renderGenerated, howMany, seconds)","\t\t\t\tdocpad.notify (new Date()).toLocaleTimeString(), {title: locale.renderGeneratedNotification}","","\t\t\t\t# Generated","\t\t\t\tif opts.initial is true","\t\t\t\t\tdocpad.generated = true","\t\t\t\t\treturn docpad.emitSerial('generated', opts, next)","","\t\t\t\t# Safety check if generated is false but initial was false too","\t\t\t\t# https://github.com/bevry/docpad/issues/811","\t\t\t\telse if docpad.generated is false","\t\t\t\t\treturn next(","\t\t\t\t\t\tnew Error('DocPad is in an invalid state, please report this on the github issue tracker. Reference 3360')","\t\t\t\t\t)","","\t\t\t\telse","\t\t\t\t\treturn next()","\t\t\t)","","\t\taddGroup = tasks.addGroup.bind(tasks)","\t\taddTask = tasks.addTask.bind(tasks)","","","\t\taddTask 'Reset our collections', (complete) ->","\t\t\t# Skip if we are not a reset generation, or an initial generation (generated is false)","\t\t\treturn complete()  unless opts.reset is true or docpad.generated is false","\t\t\treturn docpad.resetCollections(opts, complete)","","","\t\taddTask 'Figure out options', ->","\t\t\t# Mode: Cache","\t\t\t# Shall we write to the database cache?","\t\t\t# Set to true if the configuration option says we can, and we are the initial generation","\t\t\topts.cache     ?= config.databaseCache","","\t\t\t# Mode: Initial","\t\t\t# Shall we do some basic initial checks","\t\t\t# Set to the opts.reset value if specified, or whether are the initial generation","\t\t\topts.initial   ?= !(docpad.generated)","","\t\t\t# Mode: Reset","\t\t\t# Shall we reset the database","\t\t\t# Set to true if we are the initial generation","\t\t\topts.reset     ?= opts.initial","","\t\t\t# Mode: Populate","\t\t\t# Shall we fetch in new data?","\t\t\t# Set to the opts.reset value if specified, or the opts.initial value","\t\t\topts.populate  ?= opts.reset","","\t\t\t# Mode: Reload","\t\t\t# Shall we rescan the file system for changes?","\t\t\t# Set to the opts.reset value if specified, or the opts.initial value","\t\t\topts.reload    ?= opts.reset","","\t\t\t# Mode: Partial","\t\t\t# Shall we perform a partial generation (false) or a completion generation (true)?","\t\t\t# Set to false if we are the initial generation","\t\t\topts.partial   ?= !(opts.reset)","","\t\t\t# Log our opts","\t\t\tdocpad.log('debug', 'Generate options:', _.pick(opts, 'cache', 'initial', 'reset', 'populate', 'reload', 'partial', 'renderPasses'))","","","\t\taddTask 'check source directory exists', (complete) ->","\t\t\t# Skip if we are not the initial generation","\t\t\treturn complete()  unless opts.initial is true","","\t\t\t# Continue if we are the initial generation","\t\t\tsafefs.exists config.srcPath, (exists) ->","\t\t\t\t# Check","\t\t\t\tunless exists","\t\t\t\t\terr = new Error(locale.renderNonexistant)","\t\t\t\t\treturn complete(err)","","\t\t\t\t# Forward","\t\t\t\treturn complete()","","","\t\taddGroup 'fetch data to render', (addGroup, addTask) ->","\t\t\t# Fetch new data","\t\t\t# If we are a populate generation (by default an initial generation)","\t\t\tif opts.populate is true","\t\t\t\t# This will pull in new data from plugins","\t\t\t\taddTask 'populateCollectionsBefore', (complete) ->","\t\t\t\t\tdocpad.emitSerial('populateCollectionsBefore', opts, complete)","","\t\t\t\t# Import the cached data","\t\t\t\t# If we are the initial generation, and we have caching enabled","\t\t\t\tif opts.initial is true and opts.cache in [true, 'read']","\t\t\t\t\taddTask 'import data from cache', (complete) ->","\t\t\t\t\t\t# Check if we do have a databae cache","\t\t\t\t\t\tsafefs.exists config.databaseCachePath, (exists) ->","\t\t\t\t\t\t\treturn complete()  if exists is false","","\t\t\t\t\t\t\t# Read the database cache if it exists","\t\t\t\t\t\t\tsafefs.readFile config.databaseCachePath, (err, data) ->","\t\t\t\t\t\t\t\treturn complete(err)  if err","","\t\t\t\t\t\t\t\t# Parse it and apply the data values","\t\t\t\t\t\t\t\tdatabaseData = JSON.parse data.toString()","\t\t\t\t\t\t\t\topts.cache     = true","\t\t\t\t\t\t\t\topts.initial   = true","\t\t\t\t\t\t\t\topts.reset     = false","\t\t\t\t\t\t\t\topts.populate  = true","\t\t\t\t\t\t\t\topts.reload    = true","\t\t\t\t\t\t\t\topts.partial   = true","","\t\t\t\t\t\t\t\tlastGenerateStarted = new Date(databaseData.generateStarted)","\t\t\t\t\t\t\t\taddedModels = docpad.addModels(databaseData.models)","\t\t\t\t\t\t\t\tdocpad.log 'info', util.format(locale.databaseCacheRead, database.length, databaseData.models.length)","","\t\t\t\t\t\t\t\t# @TODO we need a way of detecting deleted files between generations","","\t\t\t\t\t\t\t\treturn complete()","","\t\t\t\t# Rescan the file system","\t\t\t\t# If we are a reload generation (by default an initial generation)","\t\t\t\t# This is useful when the database is out of sync with the source files","\t\t\t\t# For instance, someone shut down docpad, and made some changes, then ran docpad again","\t\t\t\t# See https://github.com/bevry/docpad/issues/705#issuecomment-29243666 for details","\t\t\t\tif opts.reload is true","\t\t\t\t\taddGroup 'import data from file system', (addGroup, addTask) ->","\t\t\t\t\t\t# Documents","\t\t\t\t\t\tconfig.documentsPaths.forEach (documentsPath) ->","\t\t\t\t\t\t\taddTask 'import documents', (complete) ->","\t\t\t\t\t\t\t\tdocpad.parseDirectory({","\t\t\t\t\t\t\t\t\tmodelType: 'document'","\t\t\t\t\t\t\t\t\tcollection: database","\t\t\t\t\t\t\t\t\tpath: documentsPath","\t\t\t\t\t\t\t\t\tnext: complete","\t\t\t\t\t\t\t\t})","","\t\t\t\t\t\t# Files","\t\t\t\t\t\tconfig.filesPaths.forEach (filesPath) ->","\t\t\t\t\t\t\taddTask 'import files', (complete) ->","\t\t\t\t\t\t\t\tdocpad.parseDirectory({","\t\t\t\t\t\t\t\t\tmodelType: 'file'","\t\t\t\t\t\t\t\t\tcollection: database","\t\t\t\t\t\t\t\t\tpath: filesPath","\t\t\t\t\t\t\t\t\tnext: complete","\t\t\t\t\t\t\t\t})","","\t\t\t\t\t\t# Layouts","\t\t\t\t\t\tconfig.layoutsPaths.forEach (layoutsPath) ->","\t\t\t\t\t\t\taddTask 'import layouts', (complete) ->","\t\t\t\t\t\t\t\tdocpad.parseDirectory({","\t\t\t\t\t\t\t\t\tmodelType: 'document'","\t\t\t\t\t\t\t\t\tcollection: database","\t\t\t\t\t\t\t\t\tpath: layoutsPath","\t\t\t\t\t\t\t\t\tnext: complete","\t\t\t\t\t\t\t\t})","","\t\t\t\t# This will pull in new data from plugins","\t\t\t\taddTask 'populateCollections', (complete) ->","\t\t\t\t\tdocpad.emitSerial('populateCollections', opts, complete)","","","\t\taddGroup 'determine files to render', (addGroup, addTask) ->","\t\t\t# Perform a complete regeneration","\t\t\t# If we are a reset generation (by default an initial non-cached generation)","\t\t\tif opts.partial is false","\t\t\t\t# Use Entire Collection","\t\t\t\taddTask 'Add all database models to render queue', ->","\t\t\t\t\topts.collection ?= new FilesCollection().add(docpad.getCollection('generate').models)","","\t\t\t# Perform a partial regeneration","\t\t\t# If we are not a reset generation (by default any non-initial generation)","\t\t\telse","\t\t\t\t# Use Partial Collection","\t\t\t\taddTask 'Add only changed models to render queue', ->","\t\t\t\t\tchangedQuery =","\t\t\t\t\t\t$or:","\t\t\t\t\t\t\t# Get changed files","\t\t\t\t\t\t\tmtime: $gte: lastGenerateStarted","","\t\t\t\t\t\t\t# Get new files","\t\t\t\t\t\t\t$and:","\t\t\t\t\t\t\t\twtime: null","\t\t\t\t\t\t\t\twrite: true","\t\t\t\t\topts.collection ?= new FilesCollection().add(docpad.getCollection('generate').findAll(changedQuery).models)","","","\t\taddTask 'generateBefore', (complete) ->","\t\t\t# Exit if we have nothing to generate","\t\t\treturn tasks.exit()  if opts.collection.length is 0","","\t\t\t# Otherwise continue down the task loop","\t\t\tdocpad.emitSerial('generateBefore', opts, complete)","","","\t\taddTask 'prepare files', (complete) ->","\t\t\t# Log the files to generate if we are in debug mode","\t\t\tdocpad.log 'debug', 'Files to generate at', (lastGenerateStarted), '\\n', (","\t\t\t\t{","\t\t\t\t\tid: model.id","\t\t\t\t\tpath: model.getFilePath()","\t\t\t\t\tmtime: model.get('mtime')","\t\t\t\t\twtime: model.get('wtime')","\t\t\t\t\tdynamic: model.get('dynamic')","\t\t\t\t\tignored: model.get('ignored')","\t\t\t\t\twrite: model.get('write')","\t\t\t\t}  for model in opts.collection.models","\t\t\t)","","\t\t\t# Add anything that references other documents (e.g. partials, listing, etc)","\t\t\t# This could eventually be way better","\t\t\tstandalones = opts.collection.pluck('standalone')","\t\t\tallStandalone = standalones.indexOf(false) is -1","\t\t\tif allStandalone is false","\t\t\t\topts.collection.add(docpad.getCollection('referencesOthers').models)","","\t\t\t# Deeply/recursively add the layout children","\t\t\taddLayoutChildren = (collection) ->","\t\t\t\tcollection.forEach (file) ->","\t\t\t\t\tif file.get('isLayout') is true","\t\t\t\t\t\t# Find","\t\t\t\t\t\tlayoutChildrenQuery =","\t\t\t\t\t\t\tlayoutRelativePath: file.get('relativePath')","\t\t\t\t\t\tlayoutChildrenCollection = docpad.getCollection('hasLayout').findAll(layoutChildrenQuery)","","\t\t\t\t\t\t# Log the files to generate if we are in debug mode","\t\t\t\t\t\tdocpad.log 'debug', 'Layout children to generate at', (lastGenerateStarted), '\\n', (","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tid: model.id","\t\t\t\t\t\t\t\tpath: model.getFilePath()","\t\t\t\t\t\t\t\tmtime: model.get('mtime')","\t\t\t\t\t\t\t\twtime: model.get('wtime')","\t\t\t\t\t\t\t\twrite: model.get('write')","\t\t\t\t\t\t\t}  for model in layoutChildrenCollection.models","\t\t\t\t\t\t), '\\n', layoutChildrenQuery","","\t\t\t\t\t\t# Recurse","\t\t\t\t\t\taddLayoutChildren(layoutChildrenCollection)","","\t\t\t\t\t\t# Add","\t\t\t\t\t\topts.collection.add(layoutChildrenCollection.models)","\t\t\taddLayoutChildren(opts.collection)","","\t\t\t# Filter out ignored, and no-render no-write files","\t\t\topts.collection.reset opts.collection.reject (file) ->","\t\t\t\treturn (file.get('render') is false and file.get('write') is false)","","\t\t\t# Log the files to generate if we are in debug mode","\t\t\tdocpad.log 'debug', 'Files to generate at', (lastGenerateStarted), '\\n', (","\t\t\t\t{","\t\t\t\t\tid: model.id","\t\t\t\t\tpath: model.getFilePath()","\t\t\t\t\tmtime: model.get('mtime')","\t\t\t\t\twtime: model.get('wtime')","\t\t\t\t\tdynamic: model.get('dynamic')","\t\t\t\t\tignored: model.get('ignored')","\t\t\t\t\twrite: model.get('write')","\t\t\t\t}  for model in opts.collection.models","\t\t\t)","","\t\t\t# Forward","\t\t\treturn complete()","","","\t\taddGroup 'process file', (addGroup, addTask) ->","\t\t\taddTask 'contextualizeFiles', {args:[opts]}, docpad.contextualizeFiles.bind(docpad)","\t\t\taddTask 'renderFiles', {args:[opts]}, docpad.renderFiles.bind(docpad)","\t\t\taddTask 'writeFiles', {args:[opts]}, docpad.writeFiles.bind(docpad)","","","\t\taddTask 'generateAfter', (complete) ->","\t\t\tdocpad.emitSerial('generateAfter', opts, complete)","","","\t\taddTask 'Write the database cache', (complete) ->","\t\t\t# Skip if we do not care for writing the cache","\t\t\treturn complete()  unless opts.cache in [true, 'write']","","\t\t\t# Write the cache","\t\t\tdatabaseData =","\t\t\t\tgenerateStarted: docpad.generateStarted","\t\t\t\tgenerateEnded: docpad.generateEnded","\t\t\t\tmodels: (model.getAttributes()  for model in database.models)","\t\t\tdatabaseDataDump = JSON.stringify(databaseData, null, '  ')","\t\t\tdocpad.log 'info', util.format(locale.databaseCacheWrite, databaseData.models.length)","\t\t\treturn safefs.writeFile(config.databaseCachePath, databaseDataDump, complete)","","","\t\ttasks.run()","","\t\t@","",""],"children":[]},{"id":"B268","text":"loadDocument","typ":"prop","icon":"prop","comments":["Prepare","Check","Update generating flag","Update the cached database","Create Progress","Can be over-written by API calls","Grab the template data we will use for rendering","How many render passes will we require?","Can be over-written by API calls","Destroy Regenerate Timer","Check plugin count","Log","Tasks","Extract functions from tasks for simplicity","when dealing with nested tasks/groups","Setup a clean database","Figure out the options","This is here as resetCollections could change our state","https://github.com/bevry/docpad/issues/811","Check directory structure","Write the cache file","Run","Chain","---------------------------------","Render","","Load a Document","next(err,document)"],"code":["(document,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","","\t\tdocument.action('load contextualize', opts, next)","","\t\t@",""],"children":[]},{"id":"B269","text":"loadAndRenderDocument","typ":"prop","icon":"prop","comments":["Prepare","Load","@TODO: don't load if already loaded","Chain","Load and Render a Document","next(err,document)"],"code":["(document,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","","\t\tdocpad.loadDocument document, opts, (err) ->","\t\t\treturn next(err)  if err","","\t\t\t# Render","\t\t\tconsole.log('now render')","\t\t\tdocpad.renderDocument(document, opts, next)","","\t\t@",""],"children":[]},{"id":"B270","text":"renderDocument","typ":"prop","icon":"prop","comments":["Prepare","Load","Chain","Render Document","next(err,result)"],"code":["(document,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","","\t\tclone = document.clone().action 'render', opts, (err) ->","\t\t\tresult = clone.getOutContent()","\t\t\treturn next(err, result, document)","","\t\t@",""],"children":[]},{"id":"B271","text":"renderPath","typ":"prop","icon":"prop","comments":["Prepare","Render","Chain","Render Path","next(err,result)"],"code":["(path,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tattributes = extendr.extend({","\t\t\tfullPath: path","\t\t},opts.attributes)","","\t\tdocument = @createDocument(attributes)","\t\t@loadAndRenderDocument(document, opts, next)","","\t\t@",""],"children":[]},{"id":"B272","text":"renderData","typ":"prop","icon":"prop","comments":["Prepare","Handle","Chain","Render Data","next(err,result)"],"code":["(content,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tattributes = extendr.extend({","\t\t\tfilename: opts.filename","\t\t\tdata: content","\t\t}, opts.attributes)","","\t\tdocument = @createDocument(attributes)","\t\t@loadAndRenderDocument(document, opts, next)","","\t\t@",""],"children":[]},{"id":"B273","text":"renderText","typ":"prop","icon":"prop","comments":["Prepare","Handle","Chain","Render Text","Doesn't extract meta information, or render layouts","TODO: Why not? Why not just have renderData?","next(err,result)"],"code":["(text,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\topts.actions ?= ['renderExtensions', 'renderDocument']","\t\tattributes = extendr.extend({","\t\t\tfilename: opts.filename","\t\t\tdata: text","\t\t\tbody: text","\t\t\tcontent: text","\t\t}, opts.attributes)","","\t\tdocument = @createDocument(attributes)","","\t\tclone = document.clone().action 'normalize contextualize render', opts, (err) ->","\t\t\tresult = clone.getOutContent()","\t\t\treturn next(err, result, document)","","\t\t@",""],"children":[]},{"id":"B274","text":"render","typ":"prop","icon":"prop","comments":["Prepare","Handle","Render","Chain","Render Action","next(err,document,result)"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tlocale = @getLocale()","","\t\tif opts.document","\t\t\t@renderDocument(opts.document, opts, next)","\t\telse if opts.data","\t\t\t@renderData(opts.data, opts, next)","\t\telse if opts.text","\t\t\t@renderText(opts.text, opts, next)","\t\telse","\t\t\tpath = opts.path or opts.fullPath or opts.filename or null","\t\t\tif path","\t\t\t\t@renderPath(path, opts, next)","\t\t\telse","\t\t\t\t# Check","\t\t\t\terr = new Error(locale.renderInvalidOptions)","\t\t\t\treturn next(err)","","\t\t@","",""],"children":[]},{"id":"B275","text":"watchers","typ":"prop","icon":"prop","comments":["Prepare","Extract document","Chain","---------------------------------","Watch","","Watchers"],"code":["null"],"children":[]},{"id":"B276","text":"destroyWatchers","typ":"method","icon":"method","comments":["Destroy Watchers"],"code":["\t\tdocpad = @","","\t\tif docpad.watchers","\t\t\t# Close each of them","\t\t\tfor watcher in docpad.watchers","\t\t\t\twatcher.close()","","\t\t\t# Reset the array","\t\t\tdocpad.watchers = []","","\t\t@",""],"children":[]},{"id":"B277","text":"watch","typ":"prop","icon":"prop","comments":["Prepare","Check","Chain","Watch"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\tlocale = @getLocale()","\t\tdatabase = @getDatabase()","\t\t@watchers ?= []","","\t\trestartWatchers = (next) ->","\t\t\t# Close our watchers","\t\t\tdocpad.destroyWatchers()","","\t\t\t# Start a group","\t\t\ttasks = new TaskGroup(\"watch tasks\", {concurrency:0, next})","","\t\t\t# Watch reload paths","\t\t\treloadPaths = _.union(config.reloadPaths, config.configPaths)","\t\t\ttasks.addTask \"watch reload paths\", (complete) -> docpad.watchdir(","\t\t\t\tpaths: reloadPaths","\t\t\t\tlisteners:","\t\t\t\t\t'log': docpad.log","\t\t\t\t\t'error': docpad.error","\t\t\t\t\t'change': ->","\t\t\t\t\t\tdocpad.log 'info', util.format(locale.watchReloadChange, new Date().toLocaleTimeString())","\t\t\t\t\t\tdocpad.action 'load', (err) ->","\t\t\t\t\t\t\treturn docpad.fatal(err)  if err","\t\t\t\t\t\t\tperformGenerate(reset:true)","\t\t\t\tnext: (err,_watchers) ->","\t\t\t\t\tif err","\t\t\t\t\t\tdocpad.log('warn', \"Watching the reload paths has failed:\", reloadPaths, err)","\t\t\t\t\t\treturn complete()","\t\t\t\t\tfor watcher in _watchers","\t\t\t\t\t\tdocpad.watchers.push(watcher)","\t\t\t\t\treturn complete()","\t\t\t)","","\t\t\t# Watch regenerate paths","\t\t\tregeneratePaths = config.regeneratePaths","\t\t\ttasks.addTask \"watch regenerate paths\", (complete) -> docpad.watchdir(","\t\t\t\tpaths: regeneratePaths","\t\t\t\tlisteners:","\t\t\t\t\t'log': docpad.log","\t\t\t\t\t'error': docpad.error","\t\t\t\t\t'change': -> performGenerate(reset:true)","\t\t\t\tnext: (err,_watchers) ->","\t\t\t\t\tif err","\t\t\t\t\t\tdocpad.log('warn', \"Watching the regenerate paths has failed:\", regeneratePaths, err)","\t\t\t\t\t\treturn complete()","\t\t\t\t\tfor watcher in _watchers","\t\t\t\t\t\tdocpad.watchers.push(watcher)","\t\t\t\t\treturn complete()","\t\t\t)","","\t\t\t# Watch the source","\t\t\tsrcPath = config.srcPath","\t\t\ttasks.addTask \"watch the source path\", (complete) -> docpad.watchdir(","\t\t\t\tpath: srcPath","\t\t\t\tlisteners:","\t\t\t\t\t'log': docpad.log","\t\t\t\t\t'error': docpad.error","\t\t\t\t\t'change': changeHandler","\t\t\t\tnext: (err,watcher) ->","\t\t\t\t\tif err","\t\t\t\t\t\tdocpad.log('warn', \"Watching the src path has failed:\", srcPath, err)","\t\t\t\t\t\treturn complete()","\t\t\t\t\tdocpad.watchers.push(watcher)","\t\t\t\t\treturn complete()","\t\t\t)","","\t\t\t# Run","\t\t\ttasks.run()","","\t\t\t# Chain","\t\t\t@","","\t\tregenerateTimer = null","\t\tqueueRegeneration = ->","\t\t\t# Reset the wait","\t\t\tif regenerateTimer","\t\t\t\tclearTimeout(regenerateTimer)","\t\t\t\tregenerateTimer = null","","\t\t\t# Regenerat after a while","\t\t\tregenerateTimer = setTimeout(performGenerate, config.regenerateDelay)","","\t\tperformGenerate = (opts={}) ->","\t\t\t# Q: Should we also pass over the collection?","\t\t\t# A: No, doing the mtime query in generate is more robust","","\t\t\t# Log","\t\t\tdocpad.log util.format(locale.watchRegenerating, new Date().toLocaleTimeString())","","\t\t\t# Afterwards, re-render anything that should always re-render","\t\t\tdocpad.action 'generate', opts, (err) ->","\t\t\t\tdocpad.error(err)  if err","\t\t\t\tdocpad.log util.format(locale.watchRegenerated, new Date().toLocaleTimeString())","","\t\tchangeHandler = (changeType,filePath,fileCurrentStat,filePreviousStat) ->","\t\t\t# Prepare","\t\t\tfileEitherStat = (fileCurrentStat or filePreviousStat)","","\t\t\t# For some reason neither of the stats may exist, this will cause errors as this is an invalid state","\t\t\t# as we depend on at least one stat existing, otherwise, what on earth is going on?","\t\t\t# Whatever the case, this should be fixed within watchr, not docpad","\t\t\t# as watchr should not be giving us invalid data","\t\t\t# https://github.com/bevry/docpad/issues/792","\t\t\tunless fileEitherStat","\t\t\t\terr = new Error(\"\"\"","\t\t\t\t\t\tDocPad has encountered an invalid state while detecting changes for your files.","\t\t\t\t\t\tSo the DocPad team can fix this right away, please provide any information you can to:","\t\t\t\t\t\thttps://github.com/bevry/docpad/issues/792","\t\t\t\t\t\t\"\"\")","\t\t\t\treturn docpad.error(err)","","\t\t\t# Log the change","\t\t\tdocpad.log 'info', util.format(locale.watchChange, new Date().toLocaleTimeString()), changeType, filePath","","\t\t\t# Check if we are a file we don't care about","\t\t\t# This check should not be needed with v2.3.3 of watchr","\t\t\t# however we've still got it here as it may still be an issue","\t\t\tisIgnored = docpad.isIgnoredPath(filePath)","\t\t\tif isIgnored","\t\t\t\tdocpad.log 'debug', util.format(locale.watchIgnoredChange, new Date().toLocaleTimeString()), filePath","\t\t\t\treturn","","\t\t\t# Don't care if we are a directory","\t\t\tisDirectory = fileEitherStat.isDirectory()","\t\t\tif isDirectory","\t\t\t\tdocpad.log 'debug', util.format(locale.watchDirectoryChange, new Date().toLocaleTimeString()), filePath","\t\t\t\treturn","","\t\t\t# Override the stat's mtime to now","\t\t\t# This is because renames will not update the mtime","\t\t\tfileCurrentStat?.mtime = new Date()","","\t\t\t# Create the file object","\t\t\tfile = docpad.addModel({fullPath:filePath, stat:fileCurrentStat})","\t\t\tfile.setStat(fileCurrentStat)  if changeType is 'update'","","\t\t\t# File was deleted, delete the rendered file, and remove it from the database","\t\t\tif changeType is 'delete'","\t\t\t\tdatabase.remove(file)","\t\t\t\tfile.action 'delete', (err) ->","\t\t\t\t\treturn docpad.error(err)  if err","\t\t\t\t\tqueueRegeneration()","","\t\t\t# File is new or was changed, update it's mtime by setting the stat","\t\t\telse if changeType in ['create', 'update']","\t\t\t\tfile.action 'load', (err) ->","\t\t\t\t\treturn docpad.error(err)  if err","\t\t\t\t\tqueueRegeneration()","","\t\tdocpad.log(locale.watchStart)","\t\trestartWatchers (err) ->","\t\t\treturn next(err)  if err","\t\t\tdocpad.log(locale.watchStarted)","\t\t\treturn next()","","\t\t@","",""],"children":[]},{"id":"B278","text":"run","typ":"prop","icon":"prop","comments":["Prepare","Restart our watchers","Timer","Change event handler","Watch","Chain","---------------------------------","Run Action",""],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts, next)","\t\tdocpad = @","\t\tlocale = @getLocale()","\t\tconfig = @getConfig()","\t\t{srcPath, rootPath} = config","","\t\trun = (complete) ->","\t\t\tbalUtil.flow(","\t\t\t\tobject: docpad","\t\t\t\taction: 'server generate watch'","\t\t\t\targs: [opts]","\t\t\t\tnext: complete","\t\t\t)","","\t\tsafefs.exists srcPath, (exists) ->","\t\t\t# Check if have the correct structure, if so let's proceed with DocPad","\t\t\treturn run(next)  if exists","","\t\t\t# We don't have the correct structure","\t\t\t# Check if we are running on an empty directory","\t\t\tsafefs.readdir rootPath, (err,files) ->","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Check if our directory is empty","\t\t\t\tif files.length","\t\t\t\t\t# It isn't empty, display a warning","\t\t\t\t\tdocpad.log('warn', \"\\n\"+util.format(locale.skeletonNonexistant, rootPath))","\t\t\t\t\treturn next()","\t\t\t\telse","\t\t\t\t\tdocpad.skeleton opts, (err) ->","\t\t\t\t\t\t# Check","\t\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t\t# Keep in global?","\t\t\t\t\t\treturn run(next)  if opts.global is true or docpad.getConfig().global is true","","\t\t\t\t\t\t# Log","\t\t\t\t\t\tdocpad.log('notice', locale.startLocal)","","\t\t\t\t\t\t# Destroy our DocPad instance so we can boot the local one","\t\t\t\t\t\tdocpad.destroy (err) ->","\t\t\t\t\t\t\t# Check","\t\t\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t\t\t# Forward onto the local DocPad Instance now that it has been installed","\t\t\t\t\t\t\treturn docpadUtil.startLocalDocPadExecutable(next)","","\t\t@","",""],"children":[]},{"id":"B279","text":"initInstall","typ":"prop","icon":"prop","comments":["Prepare","Prepare","Check if we have the docpad structure","Chain","---------------------------------","Skeleton","","Init Install","next(err)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\ttasks = new TaskGroup(\"initInstall tasks\", {concurrency:0, next})","","\t\ttasks.addTask \"node modules\", (complete) ->","\t\t\tpath = pathUtil.join(config.rootPath, 'node_modules')","\t\t\tsafefs.ensurePath(path, complete)","","\t\ttasks.addTask \"package\", (complete) ->","\t\t\t# Exists?","\t\t\tpath = pathUtil.join(config.rootPath, 'package.json')","\t\t\tsafefs.exists path, (exists) ->","\t\t\t\t# Check","\t\t\t\treturn complete()  if exists","","\t\t\t\t# Write","\t\t\t\tdata = JSON.stringify({","\t\t\t\t\tname: 'no-skeleton.docpad'","\t\t\t\t\tversion: '0.1.0'","\t\t\t\t\tdescription: 'New DocPad project without using a skeleton'","\t\t\t\t\tengines:","\t\t\t\t\t\tnode: '0.10'","\t\t\t\t\t\tnpm: '1.3'","\t\t\t\t\tdependencies:","\t\t\t\t\t\tdocpad: '~'+docpad.getVersion()","\t\t\t\t\tmain: 'node_modules/docpad/bin/docpad-server'","\t\t\t\t\tscripts:","\t\t\t\t\t\tstart: 'node_modules/docpad/bin/docpad-server'","\t\t\t\t}, null, '  ')","\t\t\t\tsafefs.writeFile(path, data, complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B280","text":"uninstall","typ":"prop","icon":"prop","comments":["Prepare","Tasks","Run","Chain","Uninstall","next(err)"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\ttasks = new TaskGroup(\"uninstall tasks\", {next})","","\t\tif opts.plugin","\t\t\ttasks.addTask \"uninstall the plugin: #{opts.plugin}\", (complete) ->","\t\t\t\tplugins =","\t\t\t\t\tfor plugin in opts.plugin.split(/[,\\s]+/)","\t\t\t\t\t\tplugin = \"docpad-plugin-#{plugin}\"  if plugin.indexOf('docpad-plugin-') isnt 0","\t\t\t\t\t\tplugin","\t\t\t\tdocpad.uninstallNodeModule(plugins, {","\t\t\t\t\toutput: true","\t\t\t\t\tnext: complete","\t\t\t\t})","","\t\ttasks.addTask \"re-load configuration\", (complete) ->","\t\t\tdocpad.load(complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B281","text":"install","typ":"prop","icon":"prop","comments":["Prepare","Tasks","Uninstall a plugin","Re-load configuration","Run","Chain","Install","next(err)"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\ttasks = new TaskGroup(\"install tasks\", {next})","","\t\ttasks.addTask \"init the installation\", (complete) ->","\t\t\tdocpad.initInstall(opts, complete)","","\t\tif opts.plugin","\t\t\ttasks.addTask \"install the plugin: #{opts.plugin}\", (complete) ->","\t\t\t\tplugins =","\t\t\t\t\tfor plugin in opts.plugin.split(/[,\\s]+/)","\t\t\t\t\t\tplugin = \"docpad-plugin-#{plugin}\"  if plugin.indexOf('docpad-plugin-') isnt 0","\t\t\t\t\t\tplugin += '@'+docpad.pluginVersion  if plugin.indexOf('@') is -1","\t\t\t\t\t\tplugin","\t\t\t\tdocpad.installNodeModule(plugins, {","\t\t\t\t\toutput: true","\t\t\t\t\tnext: complete","\t\t\t\t})","","\t\ttasks.addTask \"re-initialize the website's modules\", (complete) ->","\t\t\tdocpad.initNodeModules({","\t\t\t\toutput: true","\t\t\t\tnext: complete","\t\t\t})","","\t\ttasks.addTask \"fix node package versions\", (complete) ->","\t\t\tdocpad.fixNodePackageVersions(complete)","","\t\ttasks.addTask \"re-load the configuration\", (complete) ->","\t\t\tdocpad.load(complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B282","text":"upgrade","typ":"prop","icon":"prop","comments":["Prepare","Tasks","Install a plugin","Run","Chain","Upgrade","next(err)"],"code":["(opts,next) =>","\t\t@installNodeModule('npm docpad@6', {","\t\t\tglobal: true","\t\t\toutput: true","\t\t\tnext: next","\t\t})","","\t\t@",""],"children":[]},{"id":"B283","text":"update","typ":"prop","icon":"prop","comments":["Update Global NPM and DocPad","Chain","Update","next(err)"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\ttasks = new TaskGroup(\"update tasks\", {next})","","\t\ttasks.addTask \"init the install\", (complete) ->","\t\t\tdocpad.initInstall(opts, complete)","","\t\tdependencies = []","\t\teachr docpad.websitePackageConfig.dependencies, (version,name) ->","\t\t\treturn  if /^docpad-plugin-/.test(name) is false or /// :// ///.test(version) is true","\t\t\tdependencies.push(name+'@'+docpad.pluginVersion)","\t\tif dependencies.length isnt 0","\t\t\ttasks.addTask \"update plugins that are dependencies\", (complete) ->","\t\t\t\tdocpad.installNodeModule('docpad@6 '+dependencies, {","\t\t\t\t\toutput: true","\t\t\t\t\tnext: complete","\t\t\t\t})","","\t\tdevDependencies = []","\t\teachr docpad.websitePackageConfig.devDependencies, (version,name) ->","\t\t\treturn  if /^docpad-plugin-/.test(name) is false","\t\t\tdevDependencies.push(name+'@'+docpad.pluginVersion)","\t\tif devDependencies.length isnt 0","\t\t\ttasks.addTask \"update plugins that are dev dependencies\", (complete) ->","\t\t\t\tdocpad.installNodeModule(devDependencies, {","\t\t\t\t\tsave: '--save-dev'","\t\t\t\t\toutput: true","\t\t\t\t\tnext: complete","\t\t\t\t})","","\t\ttasks.addTask \"fix node package versions\", (complete) ->","\t\t\tdocpad.fixNodePackageVersions(complete)","","\t\ttasks.addTask \"re-initialize the rest of the website's modules\", (complete) ->","\t\t\tdocpad.initNodeModules({","\t\t\t\toutput: true","\t\t\t\tnext: complete","\t\t\t})","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B284","text":"clean","typ":"prop","icon":"prop","comments":["Prepare","Tasks","Update the local docpad and plugin dependencies","Grouped together to avoid npm dependency shortcuts that can cause missing dependencies","But don't update git/http/https dependencies, those are special for some reason","> https://github.com/bevry/docpad/pull/701","Update the plugin dev dependencies","Run","Chain","Clean","next(err)"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = docpad.getConfig()","\t\tlocale = @getLocale()","","\t\tdocpad.log('info', locale.renderCleaning)","","\t\ttasks = new TaskGroup \"clean tasks\", {concurrency:0}, next:(err) ->","\t\t\t# Error?","\t\t\treturn next(err)  if err","","\t\t\t# Log","\t\t\tdocpad.log('info', locale.renderCleaned)","","\t\t\t# Forward","\t\t\treturn next()","","\t\ttasks.addTask 'reset the collecitons', (complete) ->","\t\t\tdocpad.resetCollections(opts, complete)","","\t\ttasks.addTask 'delete out path', (complete) ->","\t\t\t# Check if our outPath is higher than our root path, so do not remove files","\t\t\treturn complete()  if config.rootPath.indexOf(config.outPath) isnt -1","","\t\t\t# Our outPath is not related or lower than our root path, so do remove it","\t\t\tbalUtil.rmdirDeep(config.outPath, complete)","","\t\ttasks.addTask 'delete database cache file', (complete) ->","\t\t\tsafefs.unlink(config.databaseCachePath, complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B285","text":"initSkeleton","typ":"prop","icon":"prop","comments":["Prepare","Log","Tasks","Delete out path","but only if our outPath is not a parent of our rootPath","Delete database cache","Run tasks","Chain","Initialize a Skeleton into to a Directory","next(err)"],"code":["(skeletonModel,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\topts.destinationPath ?= config.rootPath","","\t\ttasks = new TaskGroup(\"initSkeleton tasks\", {next})","","\t\ttasks.addTask \"ensure the path we are writing to exists\", (complete) ->","\t\t\tsafefs.ensurePath(opts.destinationPath, complete)","","\t\tif skeletonModel? and skeletonModel.id isnt 'none'","\t\t\ttasks.addTask \"clone out the git repo\", (complete) ->","\t\t\t\tdocpad.initGitRepo({","\t\t\t\t\tpath: opts.destinationPath","\t\t\t\t\turl: skeletonModel.get('repo')","\t\t\t\t\tbranch: skeletonModel.get('branch')","\t\t\t\t\tremote: 'skeleton'","\t\t\t\t\toutput: true","\t\t\t\t\tnext: complete","\t\t\t\t})","\t\telse","\t\t\ttasks.addTask \"ensure src path exists\", (complete) ->","\t\t\t\tsafefs.ensurePath(config.srcPath, complete)","","\t\t\ttasks.addGroup \"initialize the website directory files\", ->","\t\t\t\t@setConfig(concurrency:0)","","\t\t\t\t# README","\t\t\t\t@addTask \"README.md\", (complete) ->","\t\t\t\t\t# Exists?","\t\t\t\t\tpath = pathUtil.join(config.rootPath, 'README.md')","\t\t\t\t\tsafefs.exists path, (exists) ->","\t\t\t\t\t\t# Check","\t\t\t\t\t\treturn complete()  if exists","","\t\t\t\t\t\t# Write","\t\t\t\t\t\tdata = \"\"\"","\t\t\t\t\t\t\t# Your [DocPad](http://docpad.org) Project","","\t\t\t\t\t\t\t## License","\t\t\t\t\t\t\tCopyright &copy; #{(new Date()).getFullYear()}+ All rights reserved.","\t\t\t\t\t\t\t\"\"\"","\t\t\t\t\t\tsafefs.writeFile(path, data, complete)","","\t\t\t\t# Config","\t\t\t\t@addTask \"docpad.coffee configuration file\", (complete) ->","\t\t\t\t\t# Exists?","\t\t\t\t\tdocpad.getConfigPath (err,path) ->","\t\t\t\t\t\t# Check","\t\t\t\t\t\treturn complete(err)  if err or path","\t\t\t\t\t\tpath = pathUtil.join(config.rootPath, 'docpad.coffee')","","\t\t\t\t\t\t# Write","\t\t\t\t\t\tdata = \"\"\"","\t\t\t\t\t\t\t# DocPad Configuration File","\t\t\t\t\t\t\t# http://docpad.org/docs/config","","\t\t\t\t\t\t\t# Define the DocPad Configuration","\t\t\t\t\t\t\tdocpadConfig = {","\t\t\t\t\t\t\t\t# ...","\t\t\t\t\t\t\t}","","\t\t\t\t\t\t\t# Export the DocPad Configuration","\t\t\t\t\t\t\tmodule.exports = docpadConfig","\t\t\t\t\t\t\t\"\"\"","\t\t\t\t\t\tsafefs.writeFile(path, data, complete)","","\t\t\t\t# Documents","\t\t\t\t@addTask \"documents directory\", (complete) ->","\t\t\t\t\tsafefs.ensurePath(config.documentsPaths[0], complete)","","\t\t\t\t# Layouts","\t\t\t\t@addTask \"layouts directory\", (complete) ->","\t\t\t\t\tsafefs.ensurePath(config.layoutsPaths[0], complete)","","\t\t\t\t# Files","\t\t\t\t@addTask \"files directory\", (complete) ->","\t\t\t\t\tsafefs.ensurePath(config.filesPaths[0], complete)","","\t\ttasks.run()","","\t\t@",""],"children":[]},{"id":"B286","text":"installSkeleton","typ":"prop","icon":"prop","comments":["Prepare","Defaults","Tasks","Clone out the repository if applicable","Run","Chain","Install a Skeleton into a Directory","next(err)"],"code":["(skeletonModel,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","","\t\topts.destinationPath ?= @getConfig().rootPath","","\t\tdocpad.initSkeleton skeletonModel, opts, (err) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Forward","\t\t\tdocpad.install(opts, next)","","\t\t@",""],"children":[]},{"id":"B287","text":"useSkeleton","typ":"prop","icon":"prop","comments":["Prepare","Defaults","Initialize and install the skeleton","Chain","Use a Skeleton","next(err)"],"code":["(skeletonModel,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tlocale = @getLocale()","","\t\topts.destinationPath ?= @getConfig().rootPath","","\t\tskeletonId = skeletonModel?.id or 'none'","\t\tskeletonName = skeletonModel?.get('name') or locale.skeletonNoneName","","\t\tdocpad.track('skeleton-use', {skeletonId})","","\t\tdocpad.log('info', util.format(locale.skeletonInstall, skeletonName, opts.destinationPath)+' '+locale.pleaseWait)","","\t\tdocpad.installSkeleton skeletonModel, opts, (err) ->","\t\t\t# Error?","\t\t\treturn next(err)  if err","","\t\t\t# Log","\t\t\tdocpad.log('info', locale.skeletonInstalled)","","\t\t\t# Forward","\t\t\treturn next(err)","","\t\t@",""],"children":[]},{"id":"B288","text":"selectSkeleton","typ":"prop","icon":"prop","comments":["Prepare","Defaults","Extract","Track","Log","Install Skeleton","Chain","Select a Skeleton","next(err,skeletonModel)"],"code":["(opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\topts.selectSkeletonCallback ?= null","","\t\tdocpad.track('skeleton-ask')","","\t\tdocpad.getSkeletons (err,skeletonsCollection) ->","\t\t\t# Check","\t\t\treturn next(err)  if err","","\t\t\t# Provide selection to the interface","\t\t\topts.selectSkeletonCallback(skeletonsCollection, next)","","\t\t@",""],"children":[]},{"id":"B289","text":"skeleton","typ":"prop","icon":"prop","comments":["Prepare","Track","Get the available skeletons","Chain","Skeleton"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @getConfig()","\t\topts.selectSkeletonCallback ?= null","","\t\tsafefs.exists config.srcPath, (exists) ->","\t\t\t# Check","\t\t\tif exists","\t\t\t\terr = new Error(locale.skeletonExists)","\t\t\t\treturn next(err)","","\t\t\t# Select Skeleton","\t\t\tdocpad.selectSkeleton opts, (err,skeletonModel) ->","\t\t\t\t# Check","\t\t\t\treturn next(err)  if err","","\t\t\t\t# Use Skeleton","\t\t\t\tdocpad.useSkeleton(skeletonModel, next)","","\t\t@",""],"children":[]},{"id":"B290","text":"init","typ":"prop","icon":"prop","comments":["Prepare","Don't do anything if the src path exists","Chain","Init"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tlocale = @getLocale()","\t\tconfig = @getConfig()","","\t\tsafefs.exists config.srcPath, (exists) ->","\t\t\t# Check","\t\t\tif exists","\t\t\t\terr = new Error(locale.skeletonExists)","\t\t\t\treturn next(err)","","\t\t\t# No Skeleton","\t\t\tdocpad.useSkeleton(null, next)","","\t\t@","",""],"children":[]},{"id":"B291","text":"serveDocument","typ":"prop","icon":"prop","comments":["Prepare","Don't do anything if the src path exists","Chain","---------------------------------","Server","","Serve Document"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\t{document,err,req,res} = opts","\t\tdocpad = @","\t\tconfig = @getConfig()","","\t\tunless document","\t\t\tif opts.statusCode?","\t\t\t\treturn res.send(opts.statusCode)","\t\t\telse","\t\t\t\treturn next()","","\t\tres.setHeaderIfMissing ?= (name, value) ->","\t\t\tres.setHeader(name, value)  unless res.getHeader(name)","","\t\tencoding = document.get('encoding')","\t\tcharset = 'utf-8'  if encoding in ['utf8', 'utf-8']","\t\tcontentType = document.get('outContentType') or document.get('contentType')","\t\tres.setHeaderIfMissing('Content-Type', contentType + (if charset then \"; charset=#{charset}\" else ''))","","\t\tres.setHeaderIfMissing('Cache-Control', \"public, max-age=#{config.maxAge}\")  if config.maxAge","","\t\tdynamic = document.get('dynamic')","\t\tif dynamic","\t\t\t# If you are debugging why a dynamic document isn't rendering","\t\t\t# it could be that you don't have cleanurls installed","\t\t\t# e.g. if index.html is dynamic, and you are accessing it via /","\t\t\t# then this code will not be reached, as we don't register that url","\t\t\t# where if we have the cleanurls plugin installed, then do register that url","\t\t\t# against the document, so this is reached","\t\t\tcollection = new FilesCollection([document], {name:'dynamic collection'})","\t\t\ttemplateData = extendr.extend({}, req.templateData or {}, {req,err})","\t\t\tdocpad.action 'generate', {collection, templateData}, (err) ->","\t\t\t\tcontent = document.getOutContent()","\t\t\t\tif err","\t\t\t\t\tdocpad.error(err)","\t\t\t\t\treturn next(err)","\t\t\t\telse","\t\t\t\t\tif opts.statusCode?","\t\t\t\t\t\treturn res.send(opts.statusCode, content)","\t\t\t\t\telse","\t\t\t\t\t\treturn res.send(content)","","\t\telse","\t\t\t# ETag: `\"<size>-<mtime>\"`","\t\t\tctime = document.get('date')    # use the date or mtime, it should always exist","\t\t\tmtime = document.get('wtime')   # use the last generate time, it may not exist though","\t\t\tstat = document.getStat()","\t\t\tetag = stat.size + '-' + Number(mtime)   if mtime and stat","\t\t\tres.setHeaderIfMissing('ETag', '\"' + etag + '\"')  if etag","","\t\t\t# Date","\t\t\tres.setHeaderIfMissing('Date', ctime.toUTCString())  if ctime?.toUTCString?","\t\t\tres.setHeaderIfMissing('Last-Modified', mtime.toUTCString())  if mtime?.toUTCString?","\t\t\t# @TODO:","\t\t\t# The above .toUTCString? check is a workaround because sometimes the date object","\t\t\t# isn't really a date object, this needs to be fixed properly","\t\t\t# https://github.com/bevry/docpad/pull/781","","\t\t\t# Send","\t\t\tif etag and etag is (req.get('If-None-Match') or '').replace(/^\"|\"$/g, '')","\t\t\t\tres.send(304)  # not modified","\t\t\telse","\t\t\t\tcontent = document.getOutContent()","\t\t\t\tif content","\t\t\t\t\tif opts.statusCode?","\t\t\t\t\t\tres.send(opts.statusCode, content)","\t\t\t\t\telse","\t\t\t\t\t\tres.send(content)","\t\t\t\telse","\t\t\t\t\tif opts.statusCode?","\t\t\t\t\t\tres.send(opts.statusCode)","\t\t\t\t\telse","\t\t\t\t\t\tnext()","","\t\t@",""],"children":[]},{"id":"B292","text":"serverMiddlewareHeader","typ":"prop","icon":"prop","comments":["Prepare","If no document, then exit early","Prepare","Content Type + Encoding/Charset","Cache-Control (max-age)","Send","Chain","Server Middleware: Header"],"code":["(req,res,next) =>","\t\tdocpad = @","","\t\ttools = res.get('X-Powered-By').split(/[,\\s]+/g)","\t\ttools.push(\"DocPad v#{docpad.getVersion()}\")","\t\ttools = tools.join(', ')","\t\tres.set('X-Powered-By', tools)","","\t\tnext()","","\t\t@",""],"children":[]},{"id":"B293","text":"serverMiddlewareRouter","typ":"prop","icon":"prop","comments":["Prepare","Handle","Always enable this until we get a complaint about not having it","For instance, Express.js also forces this","Forward","Chain","Server Middleware: Router"],"code":["(req,res,next) =>","\t\tdocpad = @","","\t\tdocpad.getFileByRoute req.url, (err,file) ->","\t\t\t# Check","\t\t\treturn next(err)  if err or file? is false","","\t\t\t# Check if we are the desired url","\t\t\t# if we aren't do a permanent redirect","\t\t\turl = file.get('url')","\t\t\tcleanUrl = docpad.getUrlPathname(url)","\t\t\tif (url isnt cleanUrl) and (url isnt req.url)","\t\t\t\treturn res.redirect(301, url)","","\t\t\t# Serve the file to the user","\t\t\tdocpad.serveDocument({document:file, req, res, next})","","\t\t@","","\tserverMiddleware404: (req,res,next) =>","\t\tdocpad = @","\t\tdatabase = docpad.getDatabaseSafe()","","\t\tdocpad.log('notice', \"404 Not Found:\", req.url)","","\t\treturn res.send(500)  unless database","","\t\tdocument = database.findOne({relativeOutPath: '404.html'})","\t\tdocpad.serveDocument({document, req, res, next, statusCode:404})","","\t\t@","","\tserverMiddleware500: (err,req,res,next) =>","\t\tdocpad = @","\t\tdatabase = docpad.getDatabaseSafe()","","\t\treturn res.send(500)  unless database","","\t\tdocument = database.findOne({relativeOutPath: '500.html'})","\t\tdocpad.serveDocument({document,err,req,res,next,statusCode:500})","","\t\t@",""],"children":[]},{"id":"B294","text":"server","typ":"prop","icon":"prop","comments":["Prepare","Get the file","Chain","Server Middleware: 404","Prepare","Notify the user of a 404","Check","Serve the document to the user","Chain","Server Middleware: 500","Prepare","Check","Serve the document to the user","Chain","Server"],"code":["(opts,next) =>","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tdocpad = @","\t\tconfig = @config","\t\tlocale = @getLocale()","\t\tport = @getPort()","\t\thostname = @getHostname()","","\t\thttp = require('http')","\t\texpress = require('express')","","\t\tservers = @getServer(true)","\t\topts.serverExpress ?= servers.serverExpress","\t\topts.serverHttp ?= servers.serverHttp","\t\topts.middlewareBodyParser ?= config.middlewareBodyParser ? config.middlewareStandard","\t\topts.middlewareMethodOverride ?= config.middlewareMethodOverride ? config.middlewareStandard","\t\topts.middlewareExpressRouter ?= config.middlewareExpressRouter ? config.middlewareStandard","\t\topts.middleware404 ?= config.middleware404","\t\topts.middleware500 ?= config.middleware500","\t\ttasks = new TaskGroup(\"server tasks\", {next})","","\t\ttasks.addTask \"emit serverBefore\", (complete) ->","\t\t\tdocpad.emitSerial('serverBefore', complete)","","\t\tif !opts.serverExpress or !opts.serverHttp","\t\t\ttasks.addTask \"create server\", ->","\t\t\t\topts.serverExpress or= express()","\t\t\t\topts.serverHttp or= http.createServer(opts.serverExpress)","\t\t\t\tdocpad.setServer(opts)","","\t\tif config.extendServer is true","\t\t\ttasks.addTask \"extend the server\", (complete) ->","\t\t\t\t# Parse url-encoded and json encoded form data","\t\t\t\tif opts.middlewareBodyParser isnt false","\t\t\t\t\topts.serverExpress.use(express.urlencoded())","\t\t\t\t\topts.serverExpress.use(express.json())","","\t\t\t\t# Allow over-riding of the request type (e.g. GET, POST, PUT, DELETE)","\t\t\t\tif opts.middlewareMethodOverride isnt false","\t\t\t\t\topts.serverExpress.use(express.methodOverride())","","\t\t\t\t# Emit the serverExtend event","\t\t\t\t# So plugins can define their routes earlier than the DocPad routes","\t\t\t\tdocpad.emitSerial 'serverExtend', {","\t\t\t\t\tserver: opts.serverExpress # b/c","\t\t\t\t\texpress: opts.serverExpress # b/c","\t\t\t\t\tserverHttp: opts.serverHttp","\t\t\t\t\tserverExpress: opts.serverExpress","\t\t\t\t}, (err) ->","\t\t\t\t\treturn next(err)  if err","","\t\t\t\t\t# DocPad Header Middleware","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\topts.serverExpress.use(docpad.serverMiddlewareHeader)","","\t\t\t\t\t# Router Middleware","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\topts.serverExpress.use(opts.serverExpress.router)  if opts.middlewareExpressRouter isnt false","","\t\t\t\t\t# DocPad Router Middleware","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\topts.serverExpress.use(docpad.serverMiddlewareRouter)","","\t\t\t\t\t# Static","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\tif config.maxAge","\t\t\t\t\t\topts.serverExpress.use(express.static(config.outPath, {maxAge:config.maxAge}))","\t\t\t\t\telse","\t\t\t\t\t\topts.serverExpress.use(express.static(config.outPath))","","\t\t\t\t\t# DocPad 404 Middleware","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\topts.serverExpress.use(docpad.serverMiddleware404)  if opts.middleware404 isnt false","","\t\t\t\t\t# DocPad 500 Middleware","\t\t\t\t\t# Keep it after the serverExtend event","\t\t\t\t\topts.serverExpress.use(docpad.serverMiddleware500)  if opts.middleware500 isnt false","","\t\t\t\t\t# Done","\t\t\t\t\treturn complete()","","\t\ttasks.addTask \"start the server\", (complete) ->","\t\t\t# Catch","\t\t\topts.serverHttp.once 'error', (err) ->","\t\t\t\t# Friendlify the error message if it is what we suspect it is","\t\t\t\tif err.message.indexOf('EADDRINUSE') isnt -1","\t\t\t\t\terr = new Error(util.format(locale.serverInUse, port))","","\t\t\t\t# Done","\t\t\t\treturn complete(err)","","\t\t\t# Listen","\t\t\tdocpad.log 'debug', util.format(locale.serverStart, hostname, port, config.outPath)","\t\t\topts.serverHttp.listen port, hostname,  ->","\t\t\t\t# Log","\t\t\t\taddress = opts.serverHttp.address()","\t\t\t\tserverHostname = address.address","\t\t\t\tserverPort = address.port","\t\t\t\tserverLocation = \"http://#{serverHostname}:#{serverPort}/\"","\t\t\t\tdocpad.log 'info', util.format(locale.serverStarted, serverLocation, config.outPath)","","\t\t\t\t# Done","\t\t\t\treturn complete()","","\t\ttasks.addTask \"emit serverAfter\", (complete) ->","\t\t\tdocpad.emitSerial('serverAfter', {","\t\t\t\tserver: opts.serverExpress # b/c","\t\t\t\texpress: opts.serverExpress # b/c","\t\t\t\tserverHttp: opts.serverHttp","\t\t\t\tserverExpress: opts.serverExpress","\t\t\t}, complete)","","\t\ttasks.run()","","\t\t@","",""],"children":[]},{"id":"B295","text":"DocPad","typ":"prop","icon":"prop","comments":["Prepare","Require","Config","@TODO: Why do we do opts here instead of config???","","Tasks","Before Plugin Event","Create server when none is defined","Extend the server with our middlewares","Start Server","After Plugin Event","Run the tasks","Chain","=====================================","Export","","Export","Modules"],"code":["DocPad"],"children":[]},{"id":"B296","text":"queryEngine","typ":"prop","icon":"prop","comments":[],"code":["queryEngine"],"children":[]},{"id":"B297","text":"Backbone","typ":"prop","icon":"prop","comments":[],"code":["Backbone"],"children":[]},{"id":"B298","text":"createInstance","typ":"method","icon":"method","comments":["Create Instance","Wrapper for creating a DocPad instance","good for future compatibility in case the API changes"],"code":["\t\treturn new DocPad(args...)"],"children":[]}]}]}