{
    "text" : "Docpad Lib",
    "id" : "root",
    "children" : [{
            "id" : 1,
            "text" : "DocPad",
            "typ" : "class",
            "children" : [{
                    "text" : "Events",
                    "comments" : ["Variables", "Modules", "Base"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 22,
                    "icon" : "prop",
                    "code" : ["Events"]
                }, {
                    "text" : "Model",
                    "typ" : "object",
                    "children" : [],
                    "id" : 23,
                    "icon" : "prop",
                    "code" : ["Model"]
                }, {
                    "text" : "Collection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 24,
                    "icon" : "prop",
                    "code" : ["Collection"]
                }, {
                    "text" : "View",
                    "typ" : "object",
                    "children" : [],
                    "id" : 25,
                    "icon" : "prop",
                    "code" : ["View"]
                }, {
                    "text" : "QueryCollection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 26,
                    "icon" : "prop",
                    "code" : ["QueryCollection"]
                }, {
                    "text" : "FileModel",
                    "comments" : ["Models"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 27,
                    "icon" : "prop",
                    "code" : ["FileModel"]
                }, {
                    "text" : "DocumentModel",
                    "typ" : "object",
                    "children" : [],
                    "id" : 28,
                    "icon" : "prop",
                    "code" : ["DocumentModel"]
                }, {
                    "text" : "FilesCollection",
                    "comments" : ["Collections"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 29,
                    "icon" : "prop",
                    "code" : ["FilesCollection"]
                }, {
                    "text" : "ElementsCollection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 30,
                    "icon" : "prop",
                    "code" : ["ElementsCollection"]
                }, {
                    "text" : "MetaCollection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 31,
                    "icon" : "prop",
                    "code" : ["MetaCollection"]
                }, {
                    "text" : "ScriptsCollection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 32,
                    "icon" : "prop",
                    "code" : ["ScriptsCollection"]
                }, {
                    "text" : "StylesCollection",
                    "typ" : "object",
                    "children" : [],
                    "id" : 33,
                    "icon" : "prop",
                    "code" : ["StylesCollection"]
                }, {
                    "text" : "PluginLoader",
                    "comments" : ["Plugins"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 34,
                    "icon" : "prop",
                    "code" : ["PluginLoader"]
                }, {
                    "text" : "BasePlugin",
                    "typ" : "object",
                    "children" : [],
                    "id" : 35,
                    "icon" : "prop",
                    "code" : ["BasePlugin"]
                }, {
                    "text" : "version",
                    "comments" : ["DocPad", "DocPad's version number"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 36,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getVersion",
                    "typ" : "function",
                    "params" : null,
                    "id" : 37,
                    "icon" : "method",
                    "code" : ["\t\t@version ?= require(@packagePath).version", "\t\treturn @version"]
                }, {
                    "text" : "getVersionString",
                    "typ" : "function",
                    "params" : null,
                    "id" : 38,
                    "icon" : "method",
                    "code" : ["\t\tif docpadUtil.isLocalDocPadExecutable()", "\t\t\treturn util.format(@getLocale().versionLocal, @getVersion(), @corePath)", "\t\telse", "\t\t\treturn util.format(@getLocale().versionGlobal, @getVersion(), @corePath)"]
                }, {
                    "text" : "pluginVersion",
                    "comments" : ["Plugin version requirements"],
                    "typ" : "string",
                    "value" : "'2'",
                    "id" : 39,
                    "icon" : "string",
                    "code" : ["'2'"]
                }, {
                    "text" : "getProcessPlatform",
                    "comments" : ["Process getters"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 40,
                    "icon" : "method",
                    "code" : ["process.platform"]
                }, {
                    "text" : "getProcessVersion",
                    "typ" : "function",
                    "params" : null,
                    "id" : 41,
                    "icon" : "method",
                    "code" : ["process.version.replace(/^v/,'')"]
                }, {
                    "text" : "serverExpress",
                    "comments" : ["The express and http server instances bound to docpad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 42,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "serverHttp",
                    "typ" : "object",
                    "children" : [],
                    "id" : 43,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getServer",
                    "typ" : "function",
                    "params" : "(both=false)",
                    "id" : 44,
                    "icon" : "method",
                    "code" : ["\t\t{serverExpress,serverHttp} = @", "\t\tif both", "\t\t\treturn {serverExpress, serverHttp}", "\t\telse", "\t\t\treturn serverExpress"]
                }, {
                    "text" : "setServer",
                    "typ" : "function",
                    "params" : "(servers)",
                    "id" : 45,
                    "icon" : "method",
                    "code" : ["\t\t# Apply", "\t\tif servers.serverExpress and servers.serverHttp", "\t\t\t@serverExpress = servers.serverExpress", "\t\t\t@serverHttp = servers.serverHttp", "\t\t# Cleanup", "\t\tdelete @config.serverHttp", "\t\tdelete @config.serverExpress", "\t\tdelete @config.server"]
                }, {
                    "text" : "destroyServer",
                    "typ" : "function",
                    "params" : null,
                    "id" : 46,
                    "icon" : "method",
                    "code" : ["\t\t@serverHttp?.close()", "\t\t@serverHttp = null", "\t\t# @TODO figure out how to destroy the express server"]
                }, {
                    "text" : "loggerInstances",
                    "comments" : ["The caterpillar instances bound to docpad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 47,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getLogger",
                    "typ" : "function",
                    "params" : null,
                    "id" : 48,
                    "icon" : "method",
                    "code" : ["@loggerInstances?.logger"]
                }, {
                    "text" : "getLoggers",
                    "typ" : "function",
                    "params" : null,
                    "id" : 49,
                    "icon" : "method",
                    "code" : ["@loggerInstances"]
                }, {
                    "text" : "setLoggers",
                    "typ" : "function",
                    "params" : "(loggers)",
                    "id" : 50,
                    "icon" : "method",
                    "code" : ["\t\tif @loggerInstances", "\t\t\t@warn('Loggers have already been set')", "\t\telse", "\t\t\t@loggerInstances = loggers", "\t\t\t@loggerInstances.logger.setConfig(dry:true)", "\t\t\t@loggerInstances.console.setConfig(dry:false).pipe(process.stdout)", "\t\treturn loggers"]
                }, {
                    "text" : "destroyLoggers",
                    "typ" : "function",
                    "params" : null,
                    "id" : 51,
                    "icon" : "method",
                    "code" : ["\t\tif @loggerInstances", "\t\t\tfor own key,value of @loggerInstances", "\t\t\t\tvalue.end()", "\t\t@"]
                }, {
                    "text" : "actionRunnerInstance",
                    "comments" : ["The action runner instance bound to docpad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 52,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getActionRunner",
                    "typ" : "function",
                    "params" : null,
                    "id" : 53,
                    "icon" : "method",
                    "code" : ["@actionRunnerInstance"]
                }, {
                    "text" : "action",
                    "typ" : "function",
                    "params" : null,
                    "id" : 54,
                    "icon" : "method",
                    "code" : ["docpadUtil.action.apply(@, args)"]
                }, {
                    "text" : "errorRunnerInstance",
                    "comments" : ["The error runner instance bound to docpad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 55,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getErrorRunner",
                    "typ" : "function",
                    "params" : null,
                    "id" : 56,
                    "icon" : "method",
                    "code" : ["@errorRunnerInstance"]
                }, {
                    "text" : "trackRunnerInstance",
                    "comments" : ["The track runner instance bound to docpad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 57,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getTrackRunner",
                    "typ" : "function",
                    "params" : null,
                    "id" : 58,
                    "icon" : "method",
                    "code" : ["@trackRunnerInstance"]
                }, {
                    "text" : "events",
                    "comments" : ["Event Listing", "Whenever a event is created, it must be applied here to be available to plugins and configuration files", "https://github.com/bevry/docpad/wiki/Events"],
                    "typ" : "object",
                    "id" : 59,
                    "icon" : "prop",
                    "code" : ["\t\t'extendTemplateData'           # fired each load", "\t\t'extendCollections'            # fired each load", "\t\t'docpadLoaded'                 # fired multiple times, first time command line configuration hasn't been applied yet", "\t\t'docpadReady'                  # fired only once", "\t\t'docpadDestroy'                # fired once on shutdown", "\t\t'consoleSetup'                 # fired once", "\t\t'generateBefore'", "\t\t'populateCollectionsBefore'", "\t\t'populateCollections'", "\t\t'contextualizeBefore'", "\t\t'contextualizeAfter'", "\t\t'renderBefore'", "\t\t'renderCollectionBefore'", "\t\t'render'                       # fired for each extension conversion", "\t\t'renderDocument'               # fired for each document render, including layouts and render passes", "\t\t'renderCollectionAfter'", "\t\t'renderAfter'", "\t\t'writeBefore'", "\t\t'writeAfter'", "\t\t'generateAfter'", "\t\t'generated'", "\t\t'serverBefore'", "\t\t'serverExtend'", "\t\t'serverAfter'", "\t\t'notify'"]
                }, {
                    "text" : "getEvents",
                    "typ" : "function",
                    "params" : null,
                    "id" : 60,
                    "icon" : "method",
                    "code" : ["\t\t@events"]
                }, {
                    "text" : "database",
                    "comments" : ["Collections", "Database collection"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 61,
                    "icon" : "prop",
                    "code" : ["null  # QueryEngine Collection"]
                }, {
                    "text" : "databaseTempCache",
                    "typ" : "object",
                    "children" : [],
                    "id" : 62,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getDatabase",
                    "typ" : "function",
                    "params" : null,
                    "id" : 63,
                    "icon" : "method",
                    "code" : ["@database"]
                }, {
                    "text" : "getDatabaseSafe",
                    "typ" : "function",
                    "params" : null,
                    "id" : 64,
                    "icon" : "method",
                    "code" : ["@databaseTempCache or @database"]
                }, {
                    "text" : "destroyDatabase",
                    "typ" : "function",
                    "params" : null,
                    "id" : 65,
                    "icon" : "method",
                    "code" : ["\t\tif @database?", "\t\t\t@database.destroy()", "\t\t\t@database = null", "\t\tif @databaseTempCache?", "\t\t\t@databaseTempCache.destroy()", "\t\t\t@databaseTempCache = null", "\t\t@"]
                }, {
                    "text" : "filesByUrl",
                    "comments" : ["Files by URL", "Used to speed up fetching"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 66,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "filesBySelector",
                    "comments" : ["Files by Selector", "Used to speed up fetching"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 67,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "filesByOutPath",
                    "comments" : ["Files by Out Path", "Used to speed up conflict detection", "Do not use for anything else"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 68,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "blocks",
                    "comments" : ["Blocks"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 69,
                    "icon" : "prop",
                    "code" : ["null", "### {", "# A collection of meta elements", "meta: null  # Elements Collection", "", "# A collection of script elements", "scripts: null  # Scripts Collection", "", "# Collection of style elements", "styles: null  # Styles Collection", "} ###"]
                }, {
                    "text" : "getBlock",
                    "comments" : ["Get a block"],
                    "typ" : "function",
                    "params" : "(name,clone)",
                    "id" : 70,
                    "icon" : "method",
                    "code" : ["\t\tblock = @blocks[name]", "\t\tif clone", "\t\t\tclassname = name[0].toUpperCase()+name[1..]+'Collection'", "\t\t\tblock = new @[classname](block.models)", "\t\treturn block"]
                }, {
                    "text" : "setBlock",
                    "comments" : ["Set a block"],
                    "typ" : "function",
                    "params" : "(name,value)",
                    "id" : 71,
                    "icon" : "method",
                    "code" : ["\t\tif @blocks[name]?", "\t\t\t@blocks[name].destroy()", "\t\t\tif value", "\t\t\t\t@blocks[name] = value", "\t\t\telse", "\t\t\t\tdelete @blocks[name]", "\t\telse", "\t\t\t@blocks[name] = value", "\t\t@"]
                }, {
                    "text" : "getBlocks",
                    "comments" : ["Get blocks"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 72,
                    "icon" : "method",
                    "code" : ["@blocks"]
                }, {
                    "text" : "setBlocks",
                    "comments" : ["Set blocks"],
                    "typ" : "function",
                    "params" : "(blocks)",
                    "id" : 73,
                    "icon" : "method",
                    "code" : ["\t\tfor own name,value of blocks", "\t\t\t@setBlock(name,value)", "\t\t@"]
                }, {
                    "text" : "eachBlock",
                    "comments" : ["Each block"],
                    "typ" : "function",
                    "params" : "(fn)",
                    "id" : 74,
                    "icon" : "method",
                    "code" : ["\t\teachr(@blocks, fn)", "\t\t@"]
                }, {
                    "text" : "destroyBlocks",
                    "comments" : ["Destroy Blocks"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 75,
                    "icon" : "method",
                    "code" : ["\t\tif @blocks", "\t\t\tfor own name,block of @blocks", "\t\t\t\tblock.destroy()", "\t\t\t\t@blocks[name] = null", "\t\t@"]
                }, {
                    "text" : "collections",
                    "comments" : ["Collections"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 76,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getCollection",
                    "comments" : ["Get a collection"],
                    "typ" : "function",
                    "params" : "(value)",
                    "id" : 77,
                    "icon" : "method",
                    "code" : ["\t\tif value", "\t\t\tif typeof value is 'string'", "\t\t\t\tif value is 'database'", "\t\t\t\t\treturn @getDatabase()", "\t\t\t\telse", "\t\t\t\t\tfor collection in @collections", "\t\t\t\t\t\tif value in [collection.options.name, collection.options.key]", "\t\t\t\t\t\t\treturn collection", "\t\t\telse", "\t\t\t\tfor collection in @collections", "\t\t\t\t\tif value is collection", "\t\t\t\t\t\treturn collection", "\t\treturn null"]
                }, {
                    "text" : "destroyCollection",
                    "comments" : ["Get a collection"],
                    "typ" : "function",
                    "params" : "(value)",
                    "id" : 78,
                    "icon" : "method",
                    "code" : ["\t\tif value", "\t\t\tif typeof value is 'string' and value isnt 'database'", "\t\t\t\t@collections = @collections.filter (collection) ->", "\t\t\t\t\tif value in [collection.options.name, collection.options.key]", "\t\t\t\t\t\tcollection?.destroy()", "\t\t\t\t\t\treturn false", "\t\t\t\t\telse", "\t\t\t\t\t\treturn true", "\t\t\telse if value isnt @getDatabase()", "\t\t\t\t@collections = @collections.filter (collection) ->", "\t\t\t\t\tif value is collection", "\t\t\t\t\t\tcollection?.destroy()", "\t\t\t\t\t\treturn false", "\t\t\t\t\telse", "\t\t\t\t\t\treturn true", "\t\treturn null"]
                }, {
                    "text" : "addCollection",
                    "comments" : ["Add a collection"],
                    "typ" : "function",
                    "params" : "(collection)",
                    "id" : 79,
                    "icon" : "method",
                    "code" : ["\t\tif collection and collection not in [@getDatabase(), @getCollection(collection)]", "\t\t\t@collections.push(collection)", "\t\t@"]
                }, {
                    "text" : "setCollection",
                    "comments" : ["Set a collection", "A collection can have multiple names"],
                    "typ" : "function",
                    "params" : "(name, collection)",
                    "id" : 80,
                    "icon" : "method",
                    "code" : ["\t\tif collection", "\t\t\tif name", "\t\t\t\tcollection.options.name = name", "\t\t\t\tif @getCollection(name) isnt collection", "\t\t\t\t\t@destroyCollection(name)", "\t\t\t@addCollection(collection)", "\t\telse", "\t\t\t@destroyCollection(name)"]
                }, {
                    "text" : "getCollections",
                    "comments" : ["Get collections"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 81,
                    "icon" : "method",
                    "code" : ["\t\treturn @collections"]
                }, {
                    "text" : "setCollections",
                    "comments" : ["Set collections"],
                    "typ" : "function",
                    "params" : "(collections)",
                    "id" : 82,
                    "icon" : "method",
                    "code" : ["\t\tif Array.isArray(collections)", "\t\t\tfor value in collections", "\t\t\t\t@addCollection(value)", "\t\telse", "\t\t\tfor own name,value of collections", "\t\t\t\t@setCollection(name, value)", "\t\t@"]
                }, {
                    "text" : "eachCollection",
                    "comments" : ["Each collection"],
                    "typ" : "function",
                    "params" : "(fn)",
                    "id" : 83,
                    "icon" : "method",
                    "code" : ["\t\tfn(@getDatabase(), 'database')", "\t\tfor collection,index in @collections", "\t\t\tfn(collection, collection.options.name or collection.options.key or index)", "\t\t@"]
                }, {
                    "text" : "destroyCollections",
                    "comments" : ["Destroy Collections"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 84,
                    "icon" : "method",
                    "code" : ["\t\tif @collections", "\t\t\tfor collection in @collections", "\t\t\t\tcollection.destroy()", "\t\t\t@collections = []", "\t\t@"]
                }, {
                    "text" : "getFiles",
                    "comments" : ["Collection Helpers", "Get files (will use live collections)"],
                    "typ" : "function",
                    "params" : "(query,sorting,paging)",
                    "id" : 85,
                    "icon" : "method",
                    "code" : ["\t\tkey = JSON.stringify({query, sorting, paging})", "\t\tcollection = @getCollection(key)", "\t\tunless collection", "\t\t\tcollection = @getDatabase().findAllLive(query, sorting, paging)", "\t\t\tcollection.options.key = key", "\t\t\t@addCollection(collection)", "\t\treturn collection"]
                }, {
                    "text" : "getFile",
                    "comments" : ["Get a single file based on a query"],
                    "typ" : "function",
                    "params" : "(query,sorting,paging)",
                    "id" : 86,
                    "icon" : "method",
                    "code" : ["\t\tfile = @getDatabase().findOne(query, sorting, paging)", "\t\treturn file"]
                }, {
                    "text" : "getFilesAtPath",
                    "comments" : ["Get files at a path"],
                    "typ" : "function",
                    "params" : "(path,sorting,paging)",
                    "id" : 87,
                    "icon" : "method",
                    "code" : ["\t\tquery = $or: [{relativePath: $startsWith: path}, {fullPath: $startsWith: path}]", "\t\tfiles = @getFiles(query, sorting, paging)", "\t\treturn files"]
                }, {
                    "text" : "getFileAtPath",
                    "comments" : ["Get a file at a relative or absolute path or url"],
                    "typ" : "function",
                    "params" : "(path,sorting,paging)",
                    "id" : 88,
                    "icon" : "method",
                    "code" : ["\t\tfile = @getDatabase().fuzzyFindOne(path, sorting, paging)", "\t\treturn file"]
                }, {
                    "text" : "getFileByUrl",
                    "comments" : ["Get a file by its url", "TODO: Does this still work???"],
                    "typ" : "function",
                    "params" : "(url,opts={})",
                    "id" : 89,
                    "icon" : "method",
                    "code" : ["\t\topts.collection ?= @getDatabase()", "\t\tfile = opts.collection.get(@filesByUrl[url])", "\t\treturn file"]
                }, {
                    "text" : "getFileById",
                    "comments" : ["Get a file by its id"],
                    "typ" : "function",
                    "params" : "(id,opts={})",
                    "id" : 90,
                    "icon" : "method",
                    "code" : ["\t\topts.collection ?= @getDatabase()", "\t\tfile = opts.collection.get(id)", "\t\treturn file"]
                }, {
                    "text" : "getUrlPathname",
                    "comments" : ["Remove the query string from a url", "Pathname convention taken from document.location.pathname"],
                    "typ" : "function",
                    "params" : "(url)",
                    "id" : 91,
                    "icon" : "method",
                    "code" : ["\t\t return url.replace(/\\?.*/,'')"]
                }, {
                    "text" : "getFileByRoute",
                    "comments" : ["Get a file by its route", "next(err,file)"],
                    "typ" : "function",
                    "params" : "(url,next)",
                    "id" : 92,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# If we have not performed a generation yet then wait until the initial generation has completed", "\t\tif docpad.generated is false", "\t\t\t# Wait until generation has completed and recall ourselves", "\t\t\tdocpad.once 'generated', ->", "\t\t\t\treturn docpad.getFileByRoute(url, next)", "\t\t\t# hain", "\t\t\treturn @", "\t\t# @TODO the above causes a signifcant delay when importing external documents (like tumblr data) into the database", "\t\t# we need to figure out a better way of doing this", "\t\t# perhaps it is via `writeSource: once` for imported documents", "\t\t# or providing an option to disable this so it forward onto the static handler instead", "\t\t# Prepare", "\t\tdatabase = docpad.getDatabaseSafe()", "\t\t# Fetch", "\t\tcleanUrl = docpad.getUrlPathname(url)", "\t\tfile = docpad.getFileByUrl(url, {collection:database}) or docpad.getFileByUrl(cleanUrl, {collection:database})", "\t\t# Forward", "\t\tnext(null, file)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "getFileBySelector",
                    "comments" : ["Get a file by its selector", "TODO: What on earth is a selector?"],
                    "typ" : "function",
                    "params" : "(selector,opts={})",
                    "id" : 93,
                    "icon" : "method",
                    "code" : ["\t\topts.collection ?= @getDatabase()", "\t\tfile = opts.collection.get(@filesBySelector[selector])", "\t\tunless file", "\t\t\tfile = opts.collection.fuzzyFindOne(selector)", "\t\t\tif file", "\t\t\t\t@filesBySelector[selector] = file.id", "\t\treturn file"]
                }, {
                    "text" : "skeletonsCollection",
                    "comments" : ["Skeletons", "Skeletons Collection"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 94,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getSkeletons",
                    "comments" : ["Get Skeletons", "Get all the available skeletons for us and their details", "next(err,skeletonsCollection)"],
                    "typ" : "function",
                    "params" : "(next)",
                    "id" : 95,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Check if we have cached locally", "\t\tif @skeletonsCollection?", "\t\t\treturn next(null,@skeletonsCollection)", "\t\t# Fetch the skeletons from the exchange", "\t\t@skeletonsCollection = new Collection()", "\t\t@skeletonsCollection.comparator = queryEngine.generateComparator(position:1, name:1)", "\t\t@getExchange (err,exchange) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err", "\t\t\t# Prepare", "\t\t\tindex = 0", "\t\t\t# If we have the exchange data, then add the skeletons from it", "\t\t\tif exchange", "\t\t\t\tfor own skeletonKey,skeleton of exchange.skeletons", "\t\t\t\t\tskeleton.id ?= skeletonKey", "\t\t\t\t\tskeleton.name ?= skeletonKey", "\t\t\t\t\tskeleton.position ?= index", "\t\t\t\t\tdocpad.skeletonsCollection.add(new Model(skeleton))", "\t\t\t\t\t++index", "\t\t\t# Add No Skeleton Option", "\t\t\tdocpad.skeletonsCollection.add(new Model(", "\t\t\t\tid: 'none'", "\t\t\t\tname: locale.skeletonNoneName", "\t\t\t\tdescription: locale.skeletonNoneDescription", "\t\t\t\tposition: index", "\t\t\t))", "\t\t\t# Return Collection", "\t\t\treturn next(null, docpad.skeletonsCollection)", "\t\t@"],
                }, {
                    "text" : "slowPlugins",
                    "comments" : ["Plugins", "Plugins that are loading really slow"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 96,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "loadedPlugins",
                    "comments" : ["Loaded plugins indexed by name"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 97,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "exchange",
                    "comments" : ["A listing of all the available extensions for DocPad"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 98,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "corePath",
                    "comments" : ["Paths", "The DocPad directory"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 99,
                    "icon" : "prop",
                    "code" : ["corePath"]
                }, {
                    "text" : "libPath",
                    "comments" : ["The DocPad library directory"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 100,
                    "icon" : "prop",
                    "code" : ["__dirname"]
                }, {
                    "text" : "mainPath",
                    "comments" : ["The main DocPad file"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 101,
                    "icon" : "prop",
                    "code" : ["pathUtil.resolve(__dirname, 'docpad')"]
                }, {
                    "text" : "packagePath",
                    "comments" : ["The DocPad package.json path"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 102,
                    "icon" : "prop",
                    "code" : ["pathUtil.resolve(__dirname, '..', '..', 'package.json')"]
                }, {
                    "text" : "localePath",
                    "comments" : ["The DocPad locale path"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 103,
                    "icon" : "prop",
                    "code" : ["pathUtil.resolve(__dirname, '..', '..', 'locale')"]
                }, {
                    "text" : "debugLogPath",
                    "comments" : ["The DocPad debug log path"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 104,
                    "icon" : "prop",
                    "code" : ["pathUtil.join(process.cwd(), 'docpad-debug.log')"]
                }, {
                    "text" : "userConfigPath",
                    "comments" : ["The User's configuration path"],
                    "typ" : "string",
                    "value" : "'.docpad.cson'",
                    "id" : 105,
                    "icon" : "string",
                    "code" : ["'.docpad.cson'"]
                }, {
                    "text" : "initialTemplateData",
                    "comments" : ["Template Data", "DocPad's Template Data"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 106,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "pluginsTemplateData",
                    "comments" : ["Plugin's Extended Template Data"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 107,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "getTemplateData",
                    "comments" : ["Get Complete Template Data"],
                    "typ" : "function",
                    "params" : "(userTemplateData)",
                    "id" : 108,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tuserTemplateData or= {}", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Set the initial docpad template data", "\t\t@initialTemplateData ?=", "\t\t\t# Site Properties", "\t\t\tsite: {}", "\t\t\t# Environment", "\t\t\tgetEnvironment: ->", "\t\t\t\treturn docpad.getEnvironment()", "\t\t\t# Environments", "\t\t\tgetEnvironments: ->", "\t\t\t\treturn docpad.getEnvironments()", "\t\t\t# Set that we reference other files", "\t\t\treferencesOthers: (flag) ->", "\t\t\t\tdocument = @getDocument()", "\t\t\t\tdocument.referencesOthers()", "\t\t\t\treturn null", "\t\t\t# Get the Document", "\t\t\tgetDocument: ->", "\t\t\t\treturn @documentModel", "\t\t\t# Get a Path in respect to the current document", "\t\t\tgetPath: (path,parentPath) ->", "\t\t\t\tdocument = @getDocument()", "\t\t\t\tpath = document.getPath(path, parentPath)", "\t\t\t\treturn path", "\t\t\t# Get Files", "\t\t\tgetFiles: (query,sorting,paging) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\tresult = docpad.getFiles(query, sorting, paging)", "\t\t\t\treturn result", "\t\t\t# Get another file's URL based on a relative path", "\t\t\tgetFile: (query,sorting,paging) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\tresult = docpad.getFile(query,sorting,paging)", "\t\t\t\treturn result", "\t\t\t# Get Files At Path", "\t\t\tgetFilesAtPath: (path,sorting,paging) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\tpath = @getPath(path)", "\t\t\t\tresult = docpad.getFilesAtPath(path, sorting, paging)", "\t\t\t\treturn result", "\t\t\t# Get another file's model based on a relative path", "\t\t\tgetFileAtPath: (relativePath) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\tpath = @getPath(relativePath)", "\t\t\t\tresult = docpad.getFileAtPath(path)", "\t\t\t\treturn result", "\t\t\t# Get a specific file by its id", "\t\t\tgetFileById: (id) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\tresult = docpad.getFileById(id)", "\t\t\t\treturn result", "\t\t\t# Get the entire database", "\t\t\tgetDatabase: ->", "\t\t\t\t@referencesOthers()", "\t\t\t\treturn docpad.getDatabase()", "\t\t\t# Get a pre-defined collection", "\t\t\tgetCollection: (name) ->", "\t\t\t\t@referencesOthers()", "\t\t\t\treturn docpad.getCollection(name)", "\t\t\t# Get a block", "\t\t\tgetBlock: (name) ->", "\t\t\t\treturn docpad.getBlock(name,true)", "\t\t\t# Include another file taking in a relative path", "\t\t\tinclude: (subRelativePath,strict=true) ->", "\t\t\t\tfile = @getFileAtPath(subRelativePath)", "\t\t\t\tif file", "\t\t\t\t\tif strict and file.get('rendered') is false", "\t\t\t\t\t\tif docpad.getConfig().renderPasses is 1", "\t\t\t\t\t\t\tdocpad.warn util.format(locale.renderedEarlyViaInclude, subRelativePath)", "\t\t\t\t\t\treturn null", "\t\t\t\t\treturn file.getOutContent()", "\t\t\t\telse", "\t\t\t\t\terr = new Error(util.format(locale.includeFailed, subRelativePath))", "\t\t\t\t\tthrow err", "\t\t# Fetch our result template data", "\t\ttemplateData = extendr.extend({}, @initialTemplateData, @pluginsTemplateData, @getConfig().templateData, userTemplateData)", "\t\t# Add site data", "\t\ttemplateData.site.url or= 'http://'+(docpad.getHostname() or 'localhost')+':'+(docpad.getPort())", "\t\ttemplateData.site.date or= new Date()", "\t\ttemplateData.site.keywords or= []", "\t\tif typeChecker.isString(templateData.site.keywords)", "\t\t\ttemplateData.site.keywords = templateData.site.keywords.split(/,\\s*/g)", "\t\t# Return", "\t\ttemplateData"],
                }, {
                    "text" : "locale",
                    "comments" : ["Locales", "Determined locale"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 109,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getLocale",
                    "comments" : ["Get Locale"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 110,
                    "icon" : "method",
                    "code" : ["\t\tif @locale? is false", "\t\t\tconfig = @getConfig()", "\t\t\tcodes = _.uniq [", "\t\t\t\t'en'", "\t\t\t\tsafeps.getLanguageCode config.localeCode", "\t\t\t\tsafeps.getLanguageCode safeps.getLocaleCode()", "\t\t\t\tsafeps.getLocaleCode   config.localeCode", "\t\t\t\tsafeps.getLocaleCode   safeps.getLocaleCode()", "\t\t\t]", "\t\t\tlocales = (@loadLocale(code)  for code in codes)", "\t\t\t@locale = extendr.extend(locales...)", "\t\treturn @locale"]
                }, {
                    "text" : "loadLocale",
                    "comments" : ["Load Locale"],
                    "typ" : "function",
                    "params" : "(code)",
                    "id" : 111,
                    "icon" : "method",
                    "code" : ["\t\tlocalePath = pathUtil.join(@localePath, \"#{code}.cson\")", "\t\treturn null  unless safefs.existsSync(localePath)", "\t\tlocale = CSON.parseFileSync(localePath)", "\t\treturn locale"]
                }, {
                    "text" : "getEnvironment",
                    "comments" : ["Environments", "Get Environment"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 112,
                    "icon" : "method",
                    "code" : ["\t\tenv = @getConfig().env or 'development'", "\t\treturn env"]
                }, {
                    "text" : "getEnvironments",
                    "comments" : ["Get Environments"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 113,
                    "icon" : "method",
                    "code" : ["\t\tenv = @getEnvironment()", "\t\tenvs = env.split(/[, ]+/)", "\t\treturn envs"]
                }, {
                    "text" : "hashKey",
                    "comments" : ["-----------------------------", "Configuration", "Hash Key", "The key that we use to hash some data before sending it to our statistic server"],
                    "typ" : "string",
                    "value" : "'7>9}$3hP86o,4=@T'",
                    "id" : 114,
                    "icon" : "string",
                    "code" : ["'7>9}$3hP86o,4=@T'  # const"]
                }, {
                    "text" : "websitePackageConfig",
                    "comments" : ["Website Package Configuration"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 115,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "config",
                    "comments" : ["Merged Configuration", "Merged in the order of:", "- initialConfig", "- userConfig", "- websiteConfig", "- instanceConfig", "- environmentConfig"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 116,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "instanceConfig",
                    "comments" : ["Instance Configuration"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 117,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "websiteConfig",
                    "comments" : ["Website Configuration"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 118,
                    "icon" : "prop",
                    "code" : ["null  # {}"]
                }, {
                    "text" : "userConfig",
                    "comments" : ["User Configuraiton"],
                    "typ" : "object",
                    "id" : 119,
                    "icon" : "prop",
                    "code" : ["\t\t# Name", "\t\tname: null", "\t\t# Email", "\t\temail: null", "\t\t# Username", "\t\tusername: null", "\t\t# Subscribed", "\t\tsubscribed: null", "\t\t# Subcribe Try Again", "\t\t# If our subscription has failed, when should we try again?", "\t\tsubscribeTryAgain: null", "\t\t# Terms of Service", "\t\ttos: null", "\t\t# Identified", "\t\tidentified: null"],
                    "children" : [{
                            "text" : "name",
                            "typ" : "object",
                            "children" : [],
                            "id" : 120,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "email",
                            "typ" : "object",
                            "children" : [],
                            "id" : 121,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "username",
                            "typ" : "object",
                            "children" : [],
                            "id" : 122,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "subscribed",
                            "typ" : "object",
                            "children" : [],
                            "id" : 123,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "subscribeTryAgain",
                            "typ" : "object",
                            "children" : [],
                            "id" : 124,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "tos",
                            "typ" : "object",
                            "children" : [],
                            "id" : 125,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "identified",
                            "typ" : "object",
                            "children" : [],
                            "id" : 126,
                            "icon" : "prop",
                            "code" : ["null"]
                        }]
                }, {
                    "text" : "initialConfig",
                    "comments" : ["Initial Configuration"],
                    "typ" : "object",
                    "id" : 127,
                    "icon" : "prop",
                    "code" : ["\t\t# Plugins", "\t\t# Force re-install of all plugin dependencies", "\t\tforce: false", "\t\t# Whether or not we should use the global docpad instance", "\t\tglobal: false", "\t\t# Whether or not we should enable plugins that have not been listed or not", "\t\tenableUnlistedPlugins: true", "\t\t# Plugins which should be enabled or not pluginName: pluginEnabled", "\t\tenabledPlugins: {}", "\t\t# Whether or not we should skip unsupported plugins", "\t\tskipUnsupportedPlugins: true", "\t\t# Configuration to pass to any plugins pluginName: pluginConfiguration", "\t\tplugins: {}", "\t\t# Where to fetch the exchange information from", "\t\texchangeUrl: 'http://docpad.org/exchange.json'", "\t\t# -----------------------------", "\t\t# Project Paths", "\t\t# The project directory", "\t\trootPath: process.cwd()", "\t\t# The project's database cache path", "\t\tdatabaseCachePath: '.docpad.db'", "\t\t# The project's package.json path", "\t\tpackagePath: 'package.json'", "\t\t# Where to get the latest package information from", "\t\tlatestPackageUrl: 'http://docpad.org/latest.json'", "\t\t# The project's configuration paths", "\t\t# Reads only the first one that exists", "\t\t# If you want to read multiple configuration paths, then point it to a coffee|js file that requires", "\t\t# the other paths you want and exports the merged config", "\t\tconfigPaths: [", "\t\t\t'docpad.js'", "\t\t\t'docpad.coffee'", "\t\t\t'docpad.json'", "\t\t\t'docpad.cson'", "\t\t]", "\t\t# Plugin directories to load", "\t\tpluginPaths: []", "\t\t# The project's plugins directory", "\t\tpluginsPaths: [", "\t\t\t'node_modules'", "\t\t\t'plugins'", "\t\t]", "\t\t# Paths that we should watch for reload changes in", "\t\treloadPaths: []", "\t\t# Paths that we should watch for regeneration changes in", "\t\tregeneratePaths: []", "\t\t# The time to wait after a source file has changed before using it to regenerate", "\t\tregenerateDelay: 100", "\t\t# The time to wait before outputting the files we are waiting on", "\t\tslowFilesDelay: 20*1000", "\t\t# The project's out directory", "\t\toutPath: 'out'", "\t\t# The project's src directory", "\t\tsrcPath: 'src'", "\t\t# The project's documents directories", "\t\t# relative to the srcPath", "\t\tdocumentsPaths: [", "\t\t\t'documents'", "\t\t\t'render'", "\t\t]", "\t\t# The project's files directories", "\t\t# relative to the srcPath", "\t\tfilesPaths: [", "\t\t\t'files'", "\t\t\t'static'", "\t\t\t'public'", "\t\t]", "\t\t# The project's layouts directory", "\t\t# relative to the srcPath", "\t\tlayoutsPaths: [", "\t\t\t'layouts'", "\t\t]", "\t\t# Ignored file patterns during directory parsing", "\t\tignorePaths: false", "\t\tignoreHiddenFiles: false", "\t\tignoreCommonPatterns: true", "\t\tignoreCustomPatterns: false", "\t\t# Watch options", "\t\twatchOptions: null", "\t\t# -----------------------------", "\t\t# Server", "\t\t# Port", "\t\t# The port that the server should use", "\t\t# Defaults to these environment variables:", "\t\t# - PORT — Heroku, Nodejitsu, Custom", "\t\t# - VCAP_APP_PORT — AppFog", "\t\t# - VMC_APP_PORT — CloudFoundry", "\t\tport: null", "\t\t# Hostname", "\t\t# The hostname we wish to listen to", "\t\t# Defaults to these environment variables:", "\t\t# HOSTNAME — Generic", "\t\t# Do not set to \"localhost\" it does not work on heroku", "\t\thostname: null", "\t\t# Max Age", "\t\t# The caching time limit that is sent to the client", "\t\tmaxAge: 86400000", "\t\t# Server", "\t\t# The Express.js server that we want docpad to use", "\t\tserverExpress: null", "\t\t# The HTTP server that we want docpad to use", "\t\tserverHttp: null", "\t\t# Extend Server", "\t\t# Whether or not we should extend the server with extra middleware and routing", "\t\textendServer: true", "\t\t# Which middlewares would you like us to activate", "\t\t# The standard middlewares (bodyParser, methodOverride, express router)", "\t\tmiddlewareStandard: true", "\t\t# The standard bodyParser middleware", "\t\tmiddlewareBodyParser: true", "\t\t# The standard methodOverride middleware", "\t\tmiddlewareMethodOverride: true", "\t\t# The standard express router middleware", "\t\tmiddlewareExpressRouter: true", "\t\t# Our own 404 middleware", "\t\tmiddleware404: true", "\t\t# Our own 500 middleware", "\t\tmiddleware500: true", "\t\t# -----------------------------", "\t\t# Logging", "\t\t# Log Level", "\t\t# Which level of logging should we actually output", "\t\tlogLevel: (if ('-d' in process.argv) then 7 else 6)", "\t\t# Catch uncaught exceptions", "\t\tcatchExceptions: true", "\t\t# Report Errors", "\t\t# Whether or not we should report our errors back to DocPad", "\t\t# By default it is only enabled if we are not running inside a test", "\t\treportErrors: process.argv.join('').indexOf('test') is -1", "\t\t# Report Statistics", "\t\t# Whether or not we should report statistics back to DocPad", "\t\t# By default it is only enabled if we are not running inside a test", "\t\treportStatistics: process.argv.join('').indexOf('test') is -1", "\t\t# -----------------------------", "\t\t# Other", "\t\t# Utilise the database cache", "\t\tdatabaseCache: false  # [false, true, 'write']", "\t\t# Detect Encoding", "\t\t# Should we attempt to auto detect the encoding of our files?", "\t\t# Useful when you are using foreign encoding (e.g. GBK) for your files", "\t\tdetectEncoding: false", "\t\t# Render Single Extensions", "\t\t# Whether or not we should render single extensions by default", "\t\trenderSingleExtensions: false", "\t\t# Render Passes", "\t\t# How many times should we render documents that reference other documents?", "\t\trenderPasses: 1", "\t\t# Offline", "\t\t# Whether or not we should run in offline mode", "\t\t# Offline will disable the following:", "\t\t# - checkVersion", "\t\t# - reportErrors", "\t\t# - reportStatistics", "\t\toffline: false", "\t\t# Check Version", "\t\t# Whether or not to check for newer versions of DocPad", "\t\tcheckVersion: false", "\t\t# Welcome", "\t\t# Whether or not we should display any custom welcome callbacks", "\t\twelcome: false", "\t\t# Prompts", "\t\t# Whether or not we should display any prompts", "\t\tprompts: false", "\t\t# Powered By DocPad", "\t\t# Whether or not we should include DocPad in the Powered-By meta header", "\t\t# Please leave this enabled as it is a standard practice and promotes DocPad in the web eco-system", "\t\tpoweredByDocPad: true", "\t\t# Helper Url", "\t\t# Used for subscribing to newsletter, account information, and statistics etc", "\t\t# Helper's source-code can be found at: https://github.com/bevry/docpad-helper", "\t\thelperUrl: if true then 'http://docpad-helper.herokuapp.com/' else 'http://localhost:8000/'", "\t\t# Safe Mode", "\t\t# If enabled, we will try our best to sandbox our template rendering so that they cannot modify things outside of them", "\t\t# Not yet implemented", "\t\tsafeMode: false", "\t\t# Template Data", "\t\t# What data would you like to expose to your templates", "\t\ttemplateData: {}", "\t\t# Collections", "\t\t# A hash of functions that create collections", "\t\tcollections: {}", "\t\t# Events", "\t\t# A hash of event handlers", "\t\tevents: {}", "\t\t# Regenerate Every", "\t\t# Performs a regenerate every x milliseconds, useful for always having the latest data", "\t\tregenerateEvery: false", "\t\t# Regerenate Every Options", "\t\t# The generate options to use on the regenerate every call", "\t\tregenerateEveryOptions:", "\t\t\tpopulate: true", "\t\t\tpartial:  false", "\t\t# Environment Configuration", "\t\t# Locale Code", "\t\t# The code we shall use for our locale (e.g. en, fr, etc)", "\t\tlocaleCode: null", "\t\t# Environment", "\t\t# Whether or not we are in production or development", "\t\t# Separate environments using a comma or a space", "\t\tenv: null", "\t\t# Environments", "\t\t# Environment specific configuration to over-ride the global configuration", "\t\tenvironments:", "\t\t\tdevelopment:", "\t\t\t\t# Always refresh from server", "\t\t\t\tmaxAge: false", "\t\t\t\t# Only do these if we are running standalone (aka not included in a module)", "\t\t\t\tcheckVersion: /docpad$/.test(process.argv[1] or '')", "\t\t\t\twelcome: /docpad$/.test(process.argv[1] or '')", "\t\t\t\tprompts: /docpad$/.test(process.argv[1] or '')"],
                    "children" : [{
                            "text" : "force",
                            "typ" : "object",
                            "children" : [],
                            "id" : 128,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "global",
                            "typ" : "object",
                            "children" : [],
                            "id" : 129,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "enableUnlistedPlugins",
                            "typ" : "object",
                            "children" : [],
                            "id" : 130,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "enabledPlugins",
                            "typ" : "object",
                            "children" : [],
                            "id" : 131,
                            "icon" : "prop",
                            "code" : ["{}"]
                        }, {
                            "text" : "skipUnsupportedPlugins",
                            "typ" : "object",
                            "children" : [],
                            "id" : 132,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "plugins",
                            "typ" : "object",
                            "children" : [],
                            "id" : 133,
                            "icon" : "prop",
                            "code" : ["{}"]
                        }, {
                            "text" : "exchangeUrl",
                            "typ" : "string",
                            "value" : "'http://docpad.org/exchange.json'",
                            "id" : 134,
                            "icon" : "string",
                            "code" : ["'http://docpad.org/exchange.json'"]
                        }, {
                            "text" : "rootPath",
                            "typ" : "object",
                            "children" : [],
                            "id" : 135,
                            "icon" : "prop",
                            "code" : ["process.cwd()"]
                        }, {
                            "text" : "databaseCachePath",
                            "typ" : "string",
                            "value" : "'.docpad.db'",
                            "id" : 136,
                            "icon" : "string",
                            "code" : ["'.docpad.db'"]
                        }, {
                            "text" : "packagePath",
                            "typ" : "string",
                            "value" : "'package.json'",
                            "id" : 137,
                            "icon" : "string",
                            "code" : ["'package.json'"]
                        }, {
                            "text" : "latestPackageUrl",
                            "typ" : "string",
                            "value" : "'http://docpad.org/latest.json'",
                            "id" : 138,
                            "icon" : "string",
                            "code" : ["'http://docpad.org/latest.json'"]
                        }, {
                            "text" : "configPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 139,
                            "icon" : "prop",
                            "code" : ["["]
                        }, {
                            "text" : "pluginPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 140,
                            "icon" : "prop",
                            "code" : ["[]"]
                        }, {
                            "text" : "pluginsPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 141,
                            "icon" : "prop",
                            "code" : ["["]
                        }, {
                            "text" : "reloadPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 142,
                            "icon" : "prop",
                            "code" : ["[]"]
                        }, {
                            "text" : "regeneratePaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 143,
                            "icon" : "prop",
                            "code" : ["[]"]
                        }, {
                            "text" : "regenerateDelay",
                            "typ" : "number",
                            "value" : 100,
                            "id" : 144,
                            "icon" : "number",
                            "code" : ["100"]
                        }, {
                            "text" : "slowFilesDelay",
                            "typ" : "number",
                            "value" : null,
                            "id" : 145,
                            "icon" : "number",
                            "code" : ["20*1000"]
                        }, {
                            "text" : "outPath",
                            "typ" : "string",
                            "value" : "'out'",
                            "id" : 146,
                            "icon" : "string",
                            "code" : ["'out'"]
                        }, {
                            "text" : "srcPath",
                            "typ" : "string",
                            "value" : "'src'",
                            "id" : 147,
                            "icon" : "string",
                            "code" : ["'src'"]
                        }, {
                            "text" : "documentsPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 148,
                            "icon" : "prop",
                            "code" : ["["]
                        }, {
                            "text" : "filesPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 149,
                            "icon" : "prop",
                            "code" : ["["]
                        }, {
                            "text" : "layoutsPaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 150,
                            "icon" : "prop",
                            "code" : ["["]
                        }, {
                            "text" : "ignorePaths",
                            "typ" : "object",
                            "children" : [],
                            "id" : 151,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "ignoreHiddenFiles",
                            "typ" : "object",
                            "children" : [],
                            "id" : 152,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "ignoreCommonPatterns",
                            "typ" : "object",
                            "children" : [],
                            "id" : 153,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "ignoreCustomPatterns",
                            "typ" : "object",
                            "children" : [],
                            "id" : 154,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "watchOptions",
                            "typ" : "object",
                            "children" : [],
                            "id" : 155,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "port",
                            "typ" : "object",
                            "children" : [],
                            "id" : 156,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "hostname",
                            "typ" : "object",
                            "children" : [],
                            "id" : 157,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "maxAge",
                            "typ" : "number",
                            "value" : 86400000,
                            "id" : 158,
                            "icon" : "number",
                            "code" : ["86400000"]
                        }, {
                            "text" : "serverExpress",
                            "typ" : "object",
                            "children" : [],
                            "id" : 159,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "serverHttp",
                            "typ" : "object",
                            "children" : [],
                            "id" : 160,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "extendServer",
                            "typ" : "object",
                            "children" : [],
                            "id" : 161,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "middlewareStandard",
                            "typ" : "object",
                            "children" : [],
                            "id" : 162,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "middlewareBodyParser",
                            "typ" : "object",
                            "children" : [],
                            "id" : 163,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "middlewareMethodOverride",
                            "typ" : "object",
                            "children" : [],
                            "id" : 164,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "middlewareExpressRouter",
                            "typ" : "object",
                            "children" : [],
                            "id" : 165,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "logLevel",
                            "typ" : "object",
                            "children" : [],
                            "id" : 166,
                            "icon" : "prop",
                            "code" : ["(if ('-d' in process.argv) then 7 else 6)"]
                        }, {
                            "text" : "catchExceptions",
                            "typ" : "object",
                            "children" : [],
                            "id" : 167,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "reportErrors",
                            "typ" : "object",
                            "children" : [],
                            "id" : 168,
                            "icon" : "prop",
                            "code" : ["process.argv.join('').indexOf('test') is -1"]
                        }, {
                            "text" : "reportStatistics",
                            "typ" : "object",
                            "children" : [],
                            "id" : 169,
                            "icon" : "prop",
                            "code" : ["process.argv.join('').indexOf('test') is -1"]
                        }, {
                            "text" : "databaseCache",
                            "typ" : "object",
                            "children" : [],
                            "id" : 170,
                            "icon" : "prop",
                            "code" : ["false  # [false, true, 'write']"]
                        }, {
                            "text" : "detectEncoding",
                            "typ" : "object",
                            "children" : [],
                            "id" : 171,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "renderSingleExtensions",
                            "typ" : "object",
                            "children" : [],
                            "id" : 172,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "renderPasses",
                            "typ" : "object",
                            "children" : [],
                            "id" : 173,
                            "icon" : "prop",
                            "code" : ["1"]
                        }, {
                            "text" : "offline",
                            "typ" : "object",
                            "children" : [],
                            "id" : 174,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "checkVersion",
                            "typ" : "object",
                            "children" : [],
                            "id" : 175,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "welcome",
                            "typ" : "object",
                            "children" : [],
                            "id" : 176,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "prompts",
                            "typ" : "object",
                            "children" : [],
                            "id" : 177,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "poweredByDocPad",
                            "typ" : "object",
                            "children" : [],
                            "id" : 178,
                            "icon" : "prop",
                            "code" : ["true"]
                        }, {
                            "text" : "helperUrl",
                            "typ" : "object",
                            "children" : [],
                            "id" : 179,
                            "icon" : "prop",
                            "code" : ["if true then 'http://docpad-helper.herokuapp.com/' else 'http://localhost:8000/'"]
                        }, {
                            "text" : "safeMode",
                            "typ" : "object",
                            "children" : [],
                            "id" : 180,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "templateData",
                            "typ" : "object",
                            "children" : [],
                            "id" : 181,
                            "icon" : "prop",
                            "code" : ["{}"]
                        }, {
                            "text" : "collections",
                            "typ" : "object",
                            "children" : [],
                            "id" : 182,
                            "icon" : "prop",
                            "code" : ["{}"]
                        }, {
                            "text" : "events",
                            "typ" : "object",
                            "children" : [],
                            "id" : 183,
                            "icon" : "prop",
                            "code" : ["{}"]
                        }, {
                            "text" : "regenerateEvery",
                            "typ" : "object",
                            "children" : [],
                            "id" : 184,
                            "icon" : "prop",
                            "code" : ["false"]
                        }, {
                            "text" : "regenerateEveryOptions",
                            "typ" : "object",
                            "children" : [],
                            "id" : 185,
                            "icon" : "prop",
                            "code" : []
                        }, {
                            "text" : "localeCode",
                            "typ" : "object",
                            "children" : [],
                            "id" : 186,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "env",
                            "typ" : "object",
                            "children" : [],
                            "id" : 187,
                            "icon" : "prop",
                            "code" : ["null"]
                        }, {
                            "text" : "environments",
                            "typ" : "object",
                            "children" : [],
                            "id" : 188,
                            "icon" : "prop",
                            "code" : []
                        }],

                }, {
                    "text" : "regenerateTimer",
                    "comments" : ["Regenerate Timer", "When config.regenerateEvery is set to a value, we create a timer here"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 189,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "getConfig",
                    "comments" : ["Get the Configuration"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 190,
                    "icon" : "method",
                    "code" : ["\t\treturn @config or {}"]
                }, {
                    "text" : "getPort",
                    "comments" : ["Get the Port"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 191,
                    "icon" : "method",
                    "code" : ["\t\treturn @getConfig().port ? process.env.PORT ? process.env.VCAP_APP_PORT ? process.env.VMC_APP_PORT ? 9778"]
                }, {
                    "text" : "getHostname",
                    "comments" : ["Get the Hostname"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 192,
                    "icon" : "method",
                    "code" : ["\t\treturn @getConfig().hostname ? process.env.HOSTNAME ? null"]
                }, {
                    "text" : "constructor",
                    "comments" : ["=================================", "Initialization Functions", "Construct DocPad", "next(err)"],
                    "typ" : "function",
                    "params" : "(instanceConfig,next)",
                    "id" : 193,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig, next)", "\t\tdocpad = @", "\t\t# Allow DocPad to have unlimited event listeners", "\t\t@setMaxListeners(0)", "\t\t# Setup configuration event wrappers", "\t\tconfigEventContext = {docpad}  # here to allow the config event context to persist between event calls", "\t\t@getEvents().forEach (eventName) ->", "\t\t\t# Bind to the event", "\t\t\tdocpad.on eventName, (opts,next) ->", "\t\t\t\teventHandler = docpad.getConfig().events?[eventName]", "\t\t\t\t# Fire the config event handler for this event, if it exists", "\t\t\t\tif typeChecker.isFunction(eventHandler)", "\t\t\t\t\targs = [opts,next]", "\t\t\t\t\tambi(eventHandler.bind(configEventContext), args...)", "\t\t\t\t# It doesn't exist, so lets continue", "\t\t\t\telse", "\t\t\t\t\tnext()", "\t\t# Create our action runner", "\t\t@actionRunnerInstance = new TaskGroup('action runner').run().on 'complete', (err) ->", "\t\t\tdocpad.error(err)  if err", "\t\t# Create our error runner", "\t\t@errorRunnerInstance = new TaskGroup('error runner').run().on 'complete', (err) ->", "\t\t\tif err and docpad.getDebugging()", "\t\t\t\tlocale = docpad.getLocale()", "\t\t\t\tdocpad.log('warn', locale.reportError+' '+locale.errorFollows, (err.stack ? err.message).toString())", "\t\t# Create our track runner", "\t\t@trackRunnerInstance = new TaskGroup('track runner').run().on 'complete', (err) ->", "\t\t\tif err and docpad.getDebugging()", "\t\t\t\tlocale = docpad.getLocale()", "\t\t\t\tdocpad.log('warn', locale.trackError+' '+locale.errorFollows, (err.stack ? err.message).toString())", "\t\t# Initialize the loggers", "\t\tif (loggers = instanceConfig.loggers)", "\t\t\tdelete instanceConfig.loggers", "\t\telse", "\t\t\t# Create", "\t\t\tlogger = new (require('caterpillar').Logger)(lineOffset: 2)", "\t\t\t# console", "\t\t\tloggerConsole = logger", "\t\t\t\t.pipe(", "\t\t\t\t\tnew (require('caterpillar-filter').Filter)", "\t\t\t\t)", "\t\t\t\t.pipe(", "\t\t\t\t\tnew (require('caterpillar-human').Human)", "\t\t\t\t)", "\t\t\t# Apply", "\t\t\tloggers = {logger, console:loggerConsole}", "\t\t# Apply the loggers", "\t\tsafefs.unlink(@debugLogPath, ->)  # Remove the old debug log file", "\t\t@setLoggers(loggers)  # Apply the logger streams", "\t\t@setLogLevel(@initialConfig.logLevel)  # Set the default log level", "\t\t# Log to bubbled events", "\t\t@on 'log', (args...) ->", "\t\t\tdocpad.log.apply(@,args)", "\t\t# Dereference and initialise advanced variables", "\t\t# we deliberately ommit initialTemplateData here, as it is setup in getTemplateData", "\t\t@slowPlugins = {}", "\t\t@loadedPlugins = {}", "\t\t@exchange = {}", "\t\t@pluginsTemplateData = {}", "\t\t@instanceConfig = {}", "\t\t@collections = []", "\t\t@blocks = {}", "\t\t@filesByUrl = {}", "\t\t@filesBySelector = {}", "\t\t@filesByOutPath = {}", "\t\t@database = new FilesCollection(null, {name:'database'})", "\t\t\t.on('remove', (model,options) ->", "\t\t\t\t# Skip if we are not a writeable file", "\t\t\t\treturn  if model.get('write') is false", "\t\t\t\t# Delete the urls", "\t\t\t\tfor url in model.get('urls') or []", "\t\t\t\t\tdelete docpad.filesByUrl[url]", "\t\t\t\t# Ensure we regenerate anything (on the next regeneration) that was using the same outPath", "\t\t\t\toutPath = model.get('outPath')", "\t\t\t\tif outPath", "\t\t\t\t\tupdatedModels = docpad.database.findAll({outPath})", "\t\t\t\t\tupdatedModels.remove(model)", "\t\t\t\t\tupdatedModels.each (model) ->", "\t\t\t\t\t\tmodel.set('mtime': new Date())", "\t\t\t\t\t# Log", "\t\t\t\t\tdocpad.log('debug', 'Updated mtime for these models due to remove of a similar one', updatedModels.pluck('relativePath'))", "\t\t\t\t# Return safely", "\t\t\t\treturn true", "\t\t\t)", "\t\t\t.on('add change:urls', (model) ->", "\t\t\t\t# Skip if we are not a writeable file", "\t\t\t\treturn  if model.get('write') is false", "\t\t\t\t# Delete the old urls", "\t\t\t\tfor url in model.previous('urls') or []", "\t\t\t\t\tdelete docpad.filesByUrl[url]", "\t\t\t\t# Add the new urls", "\t\t\t\tfor url in model.get('urls')", "\t\t\t\t\tdocpad.filesByUrl[url] = model.cid", "\t\t\t\t# Return safely", "\t\t\t\treturn true", "\t\t\t)", "\t\t\t.on('add change:outPath', (model) ->", "\t\t\t\t# Skip if we are not a writeable file", "\t\t\t\treturn  if model.get('write') is false", "\t\t\t\t# Check if we have changed our outPath", "\t\t\t\tpreviousOutPath = model.previous('outPath')", "\t\t\t\tif previousOutPath", "\t\t\t\t\t# Ensure we regenerate anything (on the next regeneration) that was using the same outPath", "\t\t\t\t\tpreviousModels = docpad.database.findAll(outPath:previousOutPath)", "\t\t\t\t\tpreviousModels.remove(model)", "\t\t\t\t\tpreviousModels.each (model) ->", "\t\t\t\t\t\tmodel.set('mtime': new Date())", "\t\t\t\t\t# Log", "\t\t\t\t\tdocpad.log('debug', 'Updated mtime for these models due to addition of a similar one', previousModels.pluck('relativePath'))", "\t\t\t\t\t# Update the cache entry with another file that has the same outPath or delete it if there aren't any others", "\t\t\t\t\tpreviousModelId = docpad.filesByOutPath[previousOutPath]", "\t\t\t\t\tif previousModelId is model.id", "\t\t\t\t\t\tif previousModels.length", "\t\t\t\t\t\t\tdocpad.filesByOutPath[previousOutPath] = previousModelId", "\t\t\t\t\t\telse", "\t\t\t\t\t\t\tdelete docpad.filesByOutPath[previousOutPath]", "\t\t\t\t# Update the cache entry and fetch the latest if it was already set", "\t\t\t\tif (outPath = model.get('outPath'))", "\t\t\t\t\texistingModelId = docpad.filesByOutPath[outPath] ?= model.id", "\t\t\t\t\tif existingModelId isnt model.id", "\t\t\t\t\t\texistingModel = docpad.database.get(existingModelId)", "\t\t\t\t\t\tif existingModel", "\t\t\t\t\t\t\t# We have a conflict, let the user know", "\t\t\t\t\t\t\tmodelPath = model.get('fullPath') or (model.get('relativePath')+':'+model.id)", "\t\t\t\t\t\t\texistingModelPath = existingModel.get('fullPath') or (existingModel.get('relativePath')+':'+existingModel.id)", "\t\t\t\t\t\t\tmessage =  util.format(docpad.getLocale().outPathConflict, outPath, modelPath, existingModelPath)", "\t\t\t\t\t\t\tdocpad.warn(message)", "\t\t\t\t\t\telse", "\t\t\t\t\t\t\t# There reference was old, update it with our new one", "\t\t\t\t\t\t\tdocpad.filesByOutPath[outPath] = model.id", "\t\t\t\t# Return safely", "\t\t\t\treturn true", "\t\t\t)", "\t\t@userConfig = extendr.dereference(@userConfig)", "\t\t@initialConfig = extendr.dereference(@initialConfig)", "\t\t# Extract action", "\t\tif instanceConfig.action?", "\t\t\taction = instanceConfig.action", "\t\telse", "\t\t\taction = 'load ready'", "\t\t# Check if we want to perform an action", "\t\tif action", "\t\t\t@action action, instanceConfig, (err) ->", "\t\t\t\treturn docpad.fatal(err)  if err", "\t\t\t\tnext?(null,docpad)", "\t\telse", "\t\t\tnext?(null,docpad)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "destroy",
                    "comments" : ["Destroy", "This is an action, and should be called as such", "E.g. docpad.action('destroy', next)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 194,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\t# Destroy Regenerate Timer", "\t\tdocpad.destroyRegenerateTimer()", "\t\t# Destroy Plugins", "\t\tdocpad.emitSerial 'docpadDestroy', (err) ->", "\t\t\t# Check", "\t\t\treturn next?(err)  if err", "\t\t\t# Destroy Plugins", "\t\t\tdocpad.destroyPlugins()", "\t\t\t# Destroy Server", "\t\t\tdocpad.destroyServer()", "\t\t\t# Destroy Watchers", "\t\t\tdocpad.destroyWatchers()", "\t\t\t# Destroy Blocks", "\t\t\tdocpad.destroyBlocks()", "\t\t\t# Destroy Collections", "\t\t\tdocpad.destroyCollections()", "\t\t\t# Destroy Database", "\t\t\tdocpad.destroyDatabase()", "\t\t\t# Destroy Logging", "\t\t\tdocpad.destroyLoggers()", "\t\t\t# Destroy Process Listners", "\t\t\tprocess.removeListener('uncaughtException', docpad.error)", "\t\t\t# Destroy DocPad Listeners", "\t\t\tdocpad.removeAllListeners()", "\t\t\t# Forward", "\t\t\treturn next?()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "emitSerial",
                    "comments" : ["Emit Serial"],
                    "typ" : "function",
                    "params" : "(eventName, opts, next)",
                    "id" : 195,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tlocale = docpad.getLocale()", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.emittingEvent, eventName)", "\t\t# Emit", "\t\tsuper eventName, opts, (err) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err", "\t\t\t# Log", "\t\t\tdocpad.log 'debug', util.format(locale.emittedEvent, eventName)", "\t\t\t# Forward", "\t\t\treturn next(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "emitParallel",
                    "comments" : ["Emit Parallel"],
                    "typ" : "function",
                    "params" : "(eventName, opts, next)",
                    "id" : 196,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tlocale = docpad.getLocale()", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.emittingEvent, eventName)", "\t\t# Emit", "\t\tsuper eventName, opts, (err) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err", "\t\t\t# Log", "\t\t\tdocpad.log 'debug', util.format(locale.emittedEvent, eventName)", "\t\t\t# Forward", "\t\t\treturn next(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "getIgnoreOpts",
                    "comments" : ["=================================", "Helpers"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 197,
                    "icon" : "method",
                    "code" : ["\t\treturn _.pick(@config, 'ignorePaths', 'ignoreHiddenFiles', 'ignoreCommonPatterns', 'ignoreCustomPatterns')"]
                }, {
                    "text" : "isIgnoredPath",
                    "comments" : ["Is Ignored Path"],
                    "typ" : "function",
                    "params" : "(path,opts={})",
                    "id" : 198,
                    "icon" : "method",
                    "code" : ["\t\topts = extendr.extend(@getIgnoreOpts(), opts)", "\t\treturn ignorefs.isIgnoredPath(path, opts)"]
                }, {
                    "text" : "scandir",
                    "comments" : ["Scan Directory"],
                    "typ" : "function",
                    "params" : "(opts={})",
                    "id" : 199,
                    "icon" : "method",
                    "code" : ["\t\topts = extendr.extend(@getIgnoreOpts(), opts)", "\t\treturn balUtil.scandir(opts)"]
                }, {
                    "text" : "watchdir",
                    "comments" : ["Watch Directory"],
                    "typ" : "function",
                    "params" : "(opts={})",
                    "id" : 200,
                    "icon" : "method",
                    "code" : ["\t\topts = extendr.extend(@getIgnoreOpts(), opts, @config.watchOptions)", "\t\treturn require('watchr').watch(opts)"]
                }, {
                    "text" : "ready",
                    "comments" : ["Setup and Loading", "Ready", "next(err,docpadInstance)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 201,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\t# Render Single Extensions", "\t\t@DocumentModel::defaults.renderSingleExtensions = config.renderSingleExtensions", "\t\t# Version Check", "\t\t@compareVersion()", "\t\t# Welcome Prepare", "\t\tif @getDebugging()", "\t\t\tpluginsList = (\"#{pluginName} v#{@loadedPlugins[pluginName].version}\"  for pluginName in Object.keys(@loadedPlugins).sort()).join(', ')", "\t\telse", "\t\t\tpluginsList = Object.keys(@loadedPlugins).sort().join(', ')", "\t\t# Welcome Output", "\t\tdocpad.log 'info', util.format(locale.welcome, @getVersionString())", "\t\tdocpad.log 'notice', locale.welcomeDonate", "\t\tdocpad.log 'info', locale.welcomeContribute", "\t\tdocpad.log 'info', util.format(locale.welcomePlugins, pluginsList)", "\t\tdocpad.log 'info', util.format(locale.welcomeEnvironment, @getEnvironment())", "\t\t# Prepare", "\t\ttasks = new TaskGroup 'ready tasks', next:(err) ->", "\t\t\t# Error?", "\t\t\treturn docpad.error(err)  if err", "\t\t\t# All done, forward our DocPad instance onto our creator", "\t\t\treturn next?(null,docpad)", "\t\ttasks.addTask 'welcome event', (complete) ->", "\t\t\t# No welcome", "\t\t\treturn complete()  unless config.welcome", "\t\t\t# Welcome", "\t\t\tdocpad.emitSerial('welcome', {docpad}, complete)", "\t\ttasks.addTask 'track', (complete) ->", "\t\t\t# Identify", "\t\t\treturn docpad.identify(complete)", "\t\ttasks.addTask 'emit docpadReady', (complete) ->", "\t\t\tdocpad.emitSerial('docpadReady', {docpad}, complete)", "\t\t# Run tasks", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "mergeConfigurations",
                    "comments" : ["Merge Configurations"],
                    "typ" : "function",
                    "params" : "(configPackages,configsToMerge)",
                    "id" : 202,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tenvs = @getEnvironments()", "\t\t# Figure out merging", "\t\tfor configPackage in configPackages", "\t\t\tcontinue  unless configPackage", "\t\t\tconfigsToMerge.push(configPackage)", "\t\t\tfor env in envs", "\t\t\t\tenvConfig = configPackage.environments?[env]", "\t\t\t\tconfigsToMerge.push(envConfig)  if envConfig", "\t\t# Merge", "\t\textendr.safeDeepExtendPlainObjects(configsToMerge...)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "setInstanceConfig",
                    "comments" : ["Set Instance Configuration"],
                    "typ" : "function",
                    "params" : "(instanceConfig)",
                    "id" : 203,
                    "icon" : "method",
                    "code" : ["\t\t# Merge in the instance configurations", "\t\tif instanceConfig", "\t\t\textendr.safeDeepExtendPlainObjects(@instanceConfig, instanceConfig)", "\t\t\textendr.safeDeepExtendPlainObjects(@config, instanceConfig)  if @config", "\t\t@"]
                }, {
                    "text" : "setConfig",
                    "comments" : ["Set Configuration", "next(err,config)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 204,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Apply the instance configuration, generally we won't have it at this level", "\t\t# as it would have been applied earlier the load step", "\t\t@setInstanceConfig(instanceConfig)  if instanceConfig", "\t\t# Apply the environment", "\t\t# websitePackageConfig.env is left out of the detection here as it is usually an object", "\t\t# that is already merged with our process.env by the environment runner", "\t\t# rather than a string which is the docpad convention", "\t\t@config.env = @instanceConfig.env or @websiteConfig.env or @initialConfig.env or process.env.NODE_ENV", "\t\t# Merge configurations", "\t\tconfigPackages = [@initialConfig, @userConfig, @websiteConfig, @instanceConfig]", "\t\tconfigsToMerge = [@config]", "\t\tdocpad.mergeConfigurations(configPackages, configsToMerge)", "\t\t# Extract and apply the server", "\t\t@setServer extendr.safeShallowExtendPlainObjects({", "\t\t\tserverHttp: @config.serverHttp", "\t\t\tserverExpress: @config.serverExpress", "\t\t},  @config.server)", "\t\t# Extract and apply the logger", "\t\t@setLogLevel(@config.logLevel)", "\t\t# Resolve any paths", "\t\t@config.rootPath = pathUtil.resolve(@config.rootPath)", "\t\t@config.outPath = pathUtil.resolve(@config.rootPath, @config.outPath)", "\t\t@config.srcPath = pathUtil.resolve(@config.rootPath, @config.srcPath)", "\t\t@config.databaseCachePath = pathUtil.resolve(@config.rootPath, @config.databaseCachePath)", "\t\t@config.packagePath = pathUtil.resolve(@config.rootPath, @config.packagePath)", "\t\t# Resolve Documents, Files, Layouts paths", "\t\tfor type in ['documents','files','layouts']", "\t\t\ttypePaths = @config[type+'Paths']", "\t\t\tfor typePath,key in typePaths", "\t\t\t\ttypePaths[key] = pathUtil.resolve(@config.srcPath, typePath)", "\t\t# Resolve Plugins paths", "\t\tfor type in ['plugins']", "\t\t\ttypePaths = @config[type+'Paths']", "\t\t\tfor typePath,key in typePaths", "\t\t\t\ttypePaths[key] = pathUtil.resolve(@config.rootPath, typePath)", "\t\t# Bind the error handler, so we don't crash on errors", "\t\tprocess.removeListener('uncaughtException', @error)", "\t\t@removeListener('error', @error)", "\t\tif @config.catchExceptions", "\t\t\tprocess.setMaxListeners(0)", "\t\t\tprocess.on('uncaughtException', @error)", "\t\t\t@on('error', @error)", "\t\t# Prepare the Post Tasks", "\t\tpostTasks = new TaskGroup 'setConfig post tasks', next:(err) ->", "\t\t\treturn next(err, docpad.config)", "\t\t###", "\t\tpostTasks.addTask 'lazy depedencnies: encoding', (complete) =>", "\t\t\treturn complete()  unless @config.detectEncoding", "\t\t\treturn lazyRequire 'encoding', {cwd:corePath, stdio:'inherit'}, (err) ->", "\t\t\t\tdocpad.warn(locale.encodingLoadFailed)  if err", "\t\t\t\treturn complete()", "\t\t###", "\t\tpostTasks.addTask 'load plugins', (complete) ->", "\t\t\tdocpad.loadPlugins(complete)", "\t\tpostTasks.addTask 'extend collections', (complete) ->", "\t\t\tdocpad.extendCollections(complete)", "\t\tpostTasks.addTask 'fetch plugins templateData', (complete) ->", "\t\t\tdocpad.emitSerial('extendTemplateData', {templateData:docpad.pluginsTemplateData}, complete)", "\t\tpostTasks.addTask 'fire the docpadLoaded event', (complete) ->", "\t\t\tdocpad.emitSerial('docpadLoaded', complete)", "\t\t# Fire post tasks", "\t\tpostTasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "load",
                    "comments" : ["Load Configuration", "next(err,config)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 205,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[instanceConfig,next] = extractOptsAndCallback(instanceConfig,next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\tinstanceConfig or= {}", "\t\t# Reset non persistant configurations", "\t\t@websitePackageConfig = {}", "\t\t@websiteConfig = {}", "\t\t@config = {}", "\t\t# Merge in the instance configurations", "\t\t@setInstanceConfig(instanceConfig)", "\t\t# Prepare the Load Tasks", "\t\tpreTasks = new TaskGroup 'load tasks', next:(err) =>", "\t\t\treturn next(err)  if err", "\t\t\treturn @setConfig(next)", "\t\tpreTasks.addTask 'normalize the userConfigPath', (complete) =>", "\t\t\tsafeps.getHomePath (err,homePath) =>", "\t\t\t\treturn complete(err)  if err", "\t\t\t\tdropboxPath = pathUtil.resolve(homePath, 'Dropbox')", "\t\t\t\tsafefs.exists dropboxPath, (dropboxPathExists) =>", "\t\t\t\t\t# @TODO: Implement checks here for", "\t\t\t\t\t# https://github.com/bevry/docpad/issues/799", "\t\t\t\t\tuserConfigDirPath = if dropboxPathExists then dropboxPath else homePath", "\t\t\t\t\t@userConfigPath = pathUtil.resolve(userConfigDirPath, @userConfigPath)", "\t\t\t\t\treturn complete()", "\t\tpreTasks.addTask \"load the user's configuration\", (complete) =>", "\t\t\tconfigPath = @userConfigPath", "\t\t\tdocpad.log 'debug', util.format(locale.loadingUserConfig, configPath)", "\t\t\t@loadConfigPath {configPath}, (err,data) =>", "\t\t\t\treturn complete(err)  if err", "\t\t\t\t# Apply loaded data", "\t\t\t\textendr.extend(@userConfig, data or {})", "\t\t\t\t# Done", "\t\t\t\tdocpad.log 'debug', util.format(locale.loadingUserConfig, configPath)", "\t\t\t\treturn complete()", "\t\tpreTasks.addTask \"load the anonymous user's configuration\", (complete) =>", "\t\t\t# Ignore if username is already identified", "\t\t\treturn complete()  if @userConfig.username", "\t\t\t# User is anonymous, set their username to the hashed and salted mac address", "\t\t\trequire('getmac').getMac (err,macAddress) =>", "\t\t\t\tif err or !macAddress", "\t\t\t\t\treturn docpad.trackError(err or new Error('no mac address'), complete)", "\t\t\t\t# Hash with salt", "\t\t\t\ttry", "\t\t\t\t\tmacAddressHash = require('crypto').createHmac('sha1', docpad.hashKey).update(macAddress).digest('hex')", "\t\t\t\tcatch err", "\t\t\t\t\treturn complete()  if err", "\t\t\t\t# Apply", "\t\t\t\tif macAddressHash", "\t\t\t\t\t@userConfig.name ?= \"MAC #{macAddressHash}\"", "\t\t\t\t\t@userConfig.username ?= macAddressHash", "\t\t\t\t# Next", "\t\t\t\treturn complete()", "\t\tpreTasks.addTask \"load the website's package data\", (complete) =>", "\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @initialConfig.rootPath)", "\t\t\tconfigPath = pathUtil.resolve(rootPath, @instanceConfig.packagePath or @initialConfig.packagePath)", "\t\t\tdocpad.log 'debug', util.format(locale.loadingWebsitePackageConfig, configPath)", "\t\t\t@loadConfigPath {configPath}, (err,data) =>", "\t\t\t\treturn complete(err)  if err", "\t\t\t\tdata or= {}", "\t\t\t\t# Apply loaded data", "\t\t\t\t@websitePackageConfig = data", "\t\t\t\t# Done", "\t\t\t\tdocpad.log 'debug', util.format(locale.loadedWebsitePackageConfig, configPath)", "\t\t\t\treturn complete()", "\t\tpreTasks.addTask \"read the .env file if it exists\", (complete) =>", "\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @websitePackageConfig.rootPath or @initialConfig.rootPath)", "\t\t\tconfigPath = pathUtil.resolve(rootPath, '.env')", "\t\t\tdocpad.log 'debug', util.format(locale.loadingEnvConfig, configPath)", "\t\t\tsafefs.exists configPath, (exists) ->", "\t\t\t\treturn complete()  unless exists", "\t\t\t\trequire('envfile').parseFile configPath, (err,data) ->", "\t\t\t\t\treturn complete(err)  if err", "\t\t\t\t\tfor own key,value of data", "\t\t\t\t\t\tprocess.env[key] = value", "\t\t\t\t\tdocpad.log 'debug', util.format(locale.loadingEnvConfig, configPath)", "\t\t\t\t\treturn complete()", "\t\tpreTasks.addTask \"load the website's configuration\", (complete) =>", "\t\t\tdocpad.log 'debug', util.format(locale.loadingWebsiteConfig)", "\t\t\trootPath = pathUtil.resolve(@instanceConfig.rootPath or @initialConfig.rootPath)", "\t\t\tconfigPaths = @instanceConfig.configPaths or @initialConfig.configPaths", "\t\t\tfor configPath, index in configPaths", "\t\t\t\tconfigPaths[index] = pathUtil.resolve(rootPath, configPath)", "\t\t\t@loadConfigPath {configPaths}, (err,data) =>", "\t\t\t\treturn complete(err)  if err", "\t\t\t\tdata or= {}", "\t\t\t\t# Apply loaded data", "\t\t\t\textendr.extend(@websiteConfig, data)", "\t\t\t\t# Done", "\t\t\t\tdocpad.log 'debug', util.format(locale.loadedWebsiteConfig)", "\t\t\t\treturn complete()", "\t\t# Run the load tasks synchronously", "\t\tpreTasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "updateUserConfig",
                    "comments" : ["=================================", "Configuration", "Update User Configuration"],
                    "typ" : "function",
                    "params" : "(data={},next)",
                    "id" : 206,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[data,next] = extractOptsAndCallback(data,next)", "\t\tdocpad = @", "\t\tuserConfigPath = @userConfigPath", "\t\t# Apply back to our loaded configuration", "\t\t# does not apply to @config as we would have to reparse everything", "\t\t# and that appears to be an imaginary problem", "\t\textendr.extend(@userConfig, data)  if data", "\t\t# Write it with CSON", "\t\tCSON.stringify @userConfig, (err,userConfigString) ->", "\t\t\t# Check", "\t\t\treturn next?(err)  if err", "\t\t\t# Write it", "\t\t\tsafefs.writeFile userConfigPath, userConfigString, 'utf8', (err) ->", "\t\t\t\t# Forward", "\t\t\t\treturn next?(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadConfigUrl",
                    "comments" : ["Load a configuration url", "next(err,parsedData)"],
                    "typ" : "function",
                    "params" : "(configUrl,next)",
                    "id" : 207,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.loadingConfigUrl, configUrl)", "\t\t# Read the URL", "\t\tsuperAgent", "\t\t\t.get(configUrl)", "\t\t\t.timeout(30*1000)", "\t\t\t.end (err,res) ->", "\t\t\t\t# Check", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Read the string using CSON", "\t\t\t\tCSON.parse(res.text, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadConfigPath",
                    "comments" : ["Load the configuration path", "next(err,parsedData)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 208,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Prepare", "\t\tload = (configPath) ->", "\t\t\t# Check", "\t\t\treturn next()  unless configPath", "\t\t\t# Log", "\t\t\tdocpad.log 'debug', util.format(locale.loadingConfigPath, configPath)", "\t\t\t# Check that it exists", "\t\t\tsafefs.exists configPath, (exists) ->", "\t\t\t\treturn next()  unless exists", "\t\t\t\t# Read the path using CSON", "\t\t\t\tCSON.parseFile configPath, (err,result) ->", "\t\t\t\t\tif err", "\t\t\t\t\t\tdocpad.log 'error', util.format(locale.loadingConfigPathFailed, configPath)", "\t\t\t\t\treturn next(err, result)", "\t\t# Check", "\t\tif opts.configPath", "\t\t\tload(opts.configPath)", "\t\telse", "\t\t\t@getConfigPath opts, (err,configPath) ->", "\t\t\t\tload(configPath)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "getConfigPath",
                    "comments" : ["Get Config Path", "next(err,path)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 209,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tresult = null", "\t\t# Ensure array", "\t\topts.configPaths ?= config.configPaths", "\t\topts.configPaths = [opts.configPaths]  unless typeChecker.isArray(opts.configPaths)", "\t\ttasks = new TaskGroup 'getConfigPath tasks', next:(err) ->", "\t\t\treturn next(err, result)", "\t\t# Determine our configuration path", "\t\topts.configPaths.forEach (configPath) ->", "\t\t\ttasks.addTask \"Checking if [#{configPath}] exists\", (complete) ->", "\t\t\t\treturn complete()  if result", "\t\t\t\tsafefs.exists configPath, (exists) ->", "\t\t\t\t\tif exists", "\t\t\t\t\t\tresult = configPath", "\t\t\t\t\t\ttasks.exit()", "\t\t\t\t\telse", "\t\t\t\t\t\tcomplete()", "\t\t# Run them synchronously", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "extendCollections",
                    "comments" : ["Extend Collecitons", "next(err)"],
                    "typ" : "function",
                    "params" : "(next)",
                    "id" : 210,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tdocpadConfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tdatabase = @getDatabase()", "\t\t# Standard Collections", "\t\t@setCollections({", "\t\t\t# Standard Collections", "\t\t\tdocuments: database.createLiveChildCollection()", "\t\t\t\t.setQuery('isDocument', {", "\t\t\t\t\trender: true", "\t\t\t\t\twrite: true", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingDocument, model.getFilePath()))", "\t\t\t\t)", "\t\t\tfiles: database.createLiveChildCollection()", "\t\t\t\t.setQuery('isFile', {", "\t\t\t\t\trender: false", "\t\t\t\t\twrite: true", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingFile, model.getFilePath()))", "\t\t\t\t)", "\t\t\tlayouts: database.createLiveChildCollection()", "\t\t\t\t.setQuery('isLayout', {", "\t\t\t\t\t$or:", "\t\t\t\t\t\tisLayout: true", "\t\t\t\t\t\tfullPath: $startsWith: docpadConfig.layoutsPaths", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingLayout, model.getFilePath()))", "\t\t\t\t\tmodel.setDefaults({", "\t\t\t\t\t\tisLayout: true", "\t\t\t\t\t\trender: false", "\t\t\t\t\t\twrite: false", "\t\t\t\t\t})", "\t\t\t\t)", "\t\t\t# Special Collections", "\t\t\tgenerate: database.createLiveChildCollection()", "\t\t\t\t.setQuery('generate', {", "\t\t\t\t\tdynamic: false", "\t\t\t\t\tignored: false", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingGenerate, model.getFilePath()))", "\t\t\t\t)", "\t\t\treferencesOthers: database.createLiveChildCollection()", "\t\t\t\t.setQuery('referencesOthers', {", "\t\t\t\t\tdynamic: false", "\t\t\t\t\tignored: false", "\t\t\t\t\treferencesOthers: true", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingReferencesOthers, model.getFilePath()))", "\t\t\t\t)", "\t\t\thasLayout: database.createLiveChildCollection()", "\t\t\t\t.setQuery('hasLayout', {", "\t\t\t\t\tdynamic: false", "\t\t\t\t\tignored: false", "\t\t\t\t\tlayout: $exists: true", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingHasLayout, model.getFilePath()))", "\t\t\t\t)", "\t\t\thtml: database.createLiveChildCollection()", "\t\t\t\t.setQuery('isHTML', {", "\t\t\t\t\twrite: true", "\t\t\t\t\toutExtension: 'html'", "\t\t\t\t})", "\t\t\t\t.on('add', (model) ->", "\t\t\t\t\tdocpad.log('debug', util.format(locale.addingHtml, model.getFilePath()))", "\t\t\t\t)", "\t\t\tstylesheet: database.createLiveChildCollection()", "\t\t\t\t.setQuery('isStylesheet', {", "\t\t\t\t\twrite: true", "\t\t\t\t\toutExtension: 'css'", "\t\t\t\t})", "\t\t})", "\t\t# Blocks", "\t\t@setBlocks({", "\t\t\tmeta: new MetaCollection()", "\t\t\tscripts: new ScriptsCollection()", "\t\t\tstyles: new StylesCollection()", "\t\t})", "\t\t# Custom Collections Group", "\t\ttasks = new TaskGroup \"extendCollections tasks\", concurrency:0, next:(err) ->", "\t\t\tdocpad.error(err)  if err", "\t\t\tdocpad.emitSerial('extendCollections', next)", "\t\t# Cycle through Custom Collections", "\t\teachr docpadConfig.collections or {}, (fn,name) ->", "\t\t\ttasks.addTask \"creating the custom collection: #{name}\", (complete) ->", "\t\t\t\t# Init", "\t\t\t\tambi [fn.bind(docpad), fn], database, (err, collection) ->", "\t\t\t\t\t# Check for error", "\t\t\t\t\tif err", "\t\t\t\t\t\tdocpad.error(err)", "\t\t\t\t\t\treturn complete()", "\t\t\t\t\t# Check the type of the collection", "\t\t\t\t\telse unless collection instanceof QueryCollection", "\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.errorInvalidCollection, name)", "\t\t\t\t\t\treturn complete()", "\t\t\t\t\t# Make it a live collection", "\t\t\t\t\tcollection.live(true)  if collection", "\t\t\t\t\t# Apply the collection", "\t\t\t\t\tdocpad.setCollection(name, collection)", "\t\t\t\t\treturn complete()", "\t\t# Run Custom collections", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "resetCollections",
                    "comments" : ["Reset Collections", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 211,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tdatabase = docpad.getDatabase()", "\t\t# Make it as if we have never generated before", "\t\tdocpad.generated = false", "\t\t# Perform a complete clean of our collections", "\t\tdatabase.reset([])", "\t\tmeta = @getBlock('meta').reset([])", "\t\tscripts = @getBlock('scripts').reset([])", "\t\tstyles = @getBlock('styles').reset([])", "\t\t# ^ Backbone.js v1.1 changes the return values of these, however we change that in our Element class", "\t\t# because if we didn't, all our skeletons would fail", "\t\t# Add default block entries", "\t\tmeta.add(\"\"\"<meta name=\"generator\" content=\"DocPad v#{docpad.getVersion()}\" />\"\"\")  if docpad.getConfig().poweredByDocPad isnt false", "\t\t# Reset caches", "\t\t@filesByUrl = {}", "\t\t@filesBySelector = {}", "\t\t@filesByOutPath = {}", "\t\t# Chain", "\t\tnext()", "\t\t@"]
                }, {
                    "text" : "initGitRepo",
                    "comments" : ["Init Git Repo", "next(err,results)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 212,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Extract", "\t\topts.cwd ?= config.rootPath", "\t\topts.output ?= @getDebugging()", "\t\t# Forward", "\t\tsafeps.initGitRepo(opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "initNodeModules",
                    "comments" : ["Init Node Modules", "next(err,results)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 213,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Extract", "\t\topts.cwd ?= config.rootPath", "\t\topts.output ?= docpad.getDebugging()", "\t\topts.force ?= if config.offline then false else true", "\t\t# ^ @todo this line causes --force to be added, when it shouldn't be", "\t\topts.args ?= []", "\t\topts.args.push('--force')  if config.force", "\t\topts.args.push('--no-registry')  if config.offline", "\t\t# Log", "\t\tdocpad.log('info', 'npm install')  if opts.output", "\t\t# Forward", "\t\tsafeps.initNodeModules(opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "fixNodePackageVersions",
                    "comments" : ["Fix Node Package Versions", "Combat to https://github.com/npm/npm/issues/4587#issuecomment-35370453", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts)",
                    "id" : 214,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Extract", "\t\topts.packagePath ?= config.packagePath", "\t\t# Read and replace", "\t\tsafefs.readFile opts.packagePath, (err,buffer) ->", "\t\t\tdata = buffer.toString()", "\t\t\tdata = data.replace(/(\"docpad(?:.*?)\": \")\\^/g, '$1~')", "\t\t\tsafefs.writeFile opts.packagePath, data, (err) ->", "\t\t\t\treturn next(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "installNodeModule",
                    "comments" : ["Install Node Module", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(names,opts)",
                    "id" : 215,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Extract", "\t\topts.cwd ?= config.rootPath", "\t\topts.output ?= docpad.getDebugging()", "\t\topts.args ?= []", "\t\topts.global ?= false", "\t\topts.global = ['--global']             if opts.global is true", "\t\topts.global = [opts.global]            if opts.global and Array.isArray(opts.global) is false", "\t\topts.save ?= !opts.global", "\t\topts.save = ['--save']                 if opts.save is true", "\t\topts.save = [opts.save]                if opts.save and Array.isArray(opts.save) is false", "\t\t# Command", "\t\tcommand = ['npm', 'install']", "\t\t# Names", "\t\tnames = names.split(/[,\\s]+/)  unless typeChecker.isArray(names)", "\t\tnames.forEach (name) ->", "\t\t\t# Check", "\t\t\treturn  unless name", "\t\t\t# Ensure latest if version isn't specfied", "\t\t\tname += '@latest'  if name.indexOf('@') is -1", "\t\t\t# Push the name to the commands", "\t\t\tcommand.push(name)", "\t\t# Arguments", "\t\tcommand.push(opts.args...)", "\t\tcommand.push('--force')           if config.force", "\t\tcommand.push('--no-registry')     if config.offline", "\t\tcommand.push(opts.save...)        if opts.save", "\t\tcommand.push(opts.global...)      if opts.global", "\t\t# Log", "\t\tdocpad.log('info', command.join(' '))  if opts.output", "\t\t# Forward", "\t\tsafeps.spawn(command, opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "uninstallNodeModule",
                    "comments" : ["Uninstall Node Module", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(names,opts)",
                    "id" : 216,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Extract", "\t\topts.cwd ?= config.rootPath", "\t\topts.output ?= docpad.getDebugging()", "\t\topts.args ?= []", "\t\topts.global ?= false", "\t\topts.global = ['--global']             if opts.global is true", "\t\topts.global = [opts.global]            if opts.global and Array.isArray(opts.global) is false", "\t\topts.save ?= !opts.global", "\t\topts.save = ['--save', '--save-dev']   if opts.save is true", "\t\topts.save = [opts.save]                if opts.save and Array.isArray(opts.save) is false", "\t\t# Command", "\t\tcommand = ['npm', 'uninstall']", "\t\t# Names", "\t\tnames = names.split(/[,\\s]+/)  unless typeChecker.isArray(names)", "\t\tcommand.push(names...)", "\t\t# Arguments", "\t\tcommand.push(opts.args...)", "\t\tcommand.push(opts.save...)        if opts.save", "\t\tcommand.push(opts.global...)      if opts.global", "\t\t# Log", "\t\tdocpad.log('info', command.join(' '))  if opts.output", "\t\t# Forward", "\t\tsafeps.spawn(command, opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "setLogLevel",
                    "comments" : ["=================================", "Logging", "Set Log Level"],
                    "typ" : "function",
                    "params" : "(level)",
                    "id" : 217,
                    "icon" : "method",
                    "code" : ["\t\t@getLogger().setConfig({level})", "\t\tif level is 7", "\t\t\tloggers = @getLoggers()", "\t\t\tloggers.debug ?= loggers.logger", "\t\t\t\t.pipe(", "\t\t\t\t\tnew (require('caterpillar-human').Human)(color:false)", "\t\t\t\t)", "\t\t\t\t.pipe(", "\t\t\t\t\trequire('fs').createWriteStream(@debugLogPath)", "\t\t\t\t)", "\t\t@"]
                }, {
                    "text" : "getLogLevel",
                    "comments" : ["Are we debugging?"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 218,
                    "icon" : "method",
                    "code" : ["\t\treturn @getConfig().logLevel"]
                }, {
                    "text" : "getDebugging",
                    "comments" : ["Are we debugging?"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 219,
                    "icon" : "method",
                    "code" : ["\t\treturn @getLogLevel() is 7"]
                }, {
                    "text" : "fatal",
                    "comments" : ["Handle a fatal error"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 220,
                    "icon" : "method",
                    "code" : ["\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Check", "\t\treturn @  unless err", "\t\t# Handle", "\t\t@error err, 'err', ->", "\t\t\tprocess.stderr.write require('util').inspect(err.stack or err.message)", "\t\t\tdocpad.destroy()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "log",
                    "comments" : ["Log"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 221,
                    "icon" : "method",
                    "code" : ["\t\t# Log", "\t\tlogger = @getLogger() or console", "\t\tlogger.log.apply(logger, args)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "error",
                    "comments" : ["Handle an error"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 222,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Check if we have already logged this error", "\t\tif !err or err.logged", "\t\t\tnext?()", "\t\telse", "\t\t\t# Log the error only if it hasn't been logged already", "\t\t\terr.logged = true", "\t\t\terr = new Error(err)  unless err.message?", "\t\t\terr.logged = true", "\t\t\tmessage = (err.stack ? err.message).toString()", "\t\t\tdocpad.log(type, locale.errorOccured, '\\n'+message)", "\t\t\tdocpad.notify(err.message, title:locale.errorOccured)", "\t\t\t# Track", "\t\t\t@trackError(err, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "trackError",
                    "comments" : ["Track error"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 223,
                    "icon" : "method",
                    "code" : ["\t\t# PRepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Track", "\t\tif config.offline is false and config.reportErrors", "\t\t\tdata = {}", "\t\t\tdata.message = err.message", "\t\t\tdata.stack = err.stack.toString()  if err.stack", "\t\t\tdata.config = config", "\t\t\tdata.env = process.env", "\t\t\tdocpad.track('error', data, next)", "\t\telse", "\t\t\tsetImmediate ->  # avoid zalgo", "\t\t\t\tnext?()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "warn",
                    "comments" : ["Handle a warning"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 224,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Log", "\t\tdocpad.log('warn', message)", "\t\tdocpad.error(err, 'warn', next)  if err", "\t\tdocpad.notify(message, title:locale.warnOccured)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "notify",
                    "comments" : ["Send a notify event to plugins (like growl)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 225,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Emit", "\t\tdocpad.emitSerial 'notify', {message,options}, (err) ->", "\t\t\tdocpad.error(err)  if err", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "checkRequest",
                    "comments" : ["Check Request"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 226,
                    "icon" : "method",
                    "code" : ["\t\tnext ?= @error.bind(@)", "\t\treturn (err,res) ->", "\t\t\t# Check", "\t\t\treturn next(err, res)  if err", "\t\t\t# Check", "\t\t\tif res.body?.success is false or res.body?.error", "\t\t\t\terr = new Error(res.body.error or 'unknown request error')", "\t\t\t\treturn next(err, res)", "\t\t\t# Success", "\t\t\treturn next(null, res)"]
                }, {
                    "text" : "subscribe",
                    "comments" : ["Subscribe", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 227,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tconfig = @getConfig()", "\t\t# Check", "\t\tif config.offline is false", "\t\t\tif @userConfig?.email", "\t\t\t\t# Data", "\t\t\t\tdata = {}", "\t\t\t\tdata.email = @userConfig.email  # required", "\t\t\t\tdata.name = @userConfig.name or null", "\t\t\t\tdata.username = @userConfig.username or null", "\t\t\t\t# Apply", "\t\t\t\tsuperAgent", "\t\t\t\t\t.post(config.helperUrl)", "\t\t\t\t\t.type('json').set('Accept', 'application/json')", "\t\t\t\t\t.query(", "\t\t\t\t\t\tmethod: 'add-subscriber'", "\t\t\t\t\t)", "\t\t\t\t\t.send(data)", "\t\t\t\t\t.timeout(30*1000)", "\t\t\t\t\t.end @checkRequest next", "\t\t\telse", "\t\t\t\terr = new Error('Email not provided')", "\t\t\t\tnext?(err)", "\t\telse", "\t\t\tnext?()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "track",
                    "comments" : ["Track", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 228,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Check", "\t\tif config.offline is false and config.reportStatistics", "\t\t\t# Data", "\t\t\tdata = {}", "\t\t\tdata.userId = @userConfig.username or null", "\t\t\tdata.event = name", "\t\t\tdata.properties = things", "\t\t\t# Things", "\t\t\tthings.websiteName = @websitePackageConfig.name  if @websitePackageConfig?.name", "\t\t\tthings.platform = @getProcessPlatform()", "\t\t\tthings.environment = @getEnvironment()", "\t\t\tthings.version = @getVersion()", "\t\t\tthings.nodeVersion = @getProcessVersion()", "\t\t\t# Plugins", "\t\t\teachr docpad.loadedPlugins, (value,key) ->", "\t\t\t\tthings['plugin-'+key] = value.version or true", "\t\t\t# Apply", "\t\t\tdocpad.getTrackRunner().addTask 'track task', (complete) ->", "\t\t\t\tsuperAgent", "\t\t\t\t\t.post(config.helperUrl)", "\t\t\t\t\t.type('json').set('Accept', 'application/json')", "\t\t\t\t\t.query(", "\t\t\t\t\t\tmethod: 'analytics'", "\t\t\t\t\t\taction: 'track'", "\t\t\t\t\t)", "\t\t\t\t\t.send(data)", "\t\t\t\t\t.timeout(30*1000)", "\t\t\t\t\t.end docpad.checkRequest (err) ->", "\t\t\t\t\t\tnext?(err)", "\t\t\t\t\t\tcomplete(err)  # we pass the error here, as if we error, we want to stop all tracking", "\t\telse", "\t\t\tnext?()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "identify",
                    "comments" : ["Identify", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 229,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Check", "\t\tif config.offline is false and config.reportStatistics and @userConfig?.username", "\t\t\t# Data", "\t\t\tdata = {}", "\t\t\tdata.userId = @userConfig.username  # required", "\t\t\tdata.traits = things = {}", "\t\t\t# Things", "\t\t\tnow = new Date()", "\t\t\tthings.username = @userConfig.username  # required", "\t\t\tthings.email = @userConfig.email or null", "\t\t\tthings.name = @userConfig.name or null", "\t\t\tthings.lastLogin = now.toISOString()", "\t\t\tthings.lastSeen = now.toISOString()", "\t\t\tthings.countryCode = safeps.getCountryCode()", "\t\t\tthings.languageCode = safeps.getLanguageCode()", "\t\t\tthings.platform = @getProcessPlatform()", "\t\t\tthings.version = @getVersion()", "\t\t\tthings.nodeVersion = @getProcessVersion()", "\t\t\t# Is this a new user?", "\t\t\tif docpad.userConfig.identified isnt true", "\t\t\t\t# Update", "\t\t\t\tthings.created = now.toISOString()", "\t\t\t\t# Create the new user", "\t\t\t\tdocpad.getTrackRunner().addTask 'create new user', (complete) ->", "\t\t\t\t\tsuperAgent", "\t\t\t\t\t\t.post(config.helperUrl)", "\t\t\t\t\t\t.type('json').set('Accept', 'application/json')", "\t\t\t\t\t\t.query(", "\t\t\t\t\t\t\tmethod: 'analytics'", "\t\t\t\t\t\t\taction: 'identify'", "\t\t\t\t\t\t)", "\t\t\t\t\t\t.send(data)", "\t\t\t\t\t\t.timeout(30*1000)", "\t\t\t\t\t\t.end docpad.checkRequest (err) =>", "\t\t\t\t\t\t\t# Save the changes with these", "\t\t\t\t\t\t\tdocpad.updateUserConfig(identified:true)", "\t\t\t\t\t\t\t# Complete", "\t\t\t\t\t\t\treturn complete(err)", "\t\t\t# Or an existing user?", "\t\t\telse", "\t\t\t\t# Update the existing user's information witht he latest", "\t\t\t\tdocpad.getTrackRunner().addTask 'update user', (complete) =>", "\t\t\t\t\tsuperAgent", "\t\t\t\t\t\t.post(config.helperUrl)", "\t\t\t\t\t\t.type('json').set('Accept', 'application/json')", "\t\t\t\t\t\t.query(", "\t\t\t\t\t\t\tmethod: 'analytics'", "\t\t\t\t\t\t\taction: 'identify'", "\t\t\t\t\t\t)", "\t\t\t\t\t\t.send(data)", "\t\t\t\t\t\t.timeout(30*1000)", "\t\t\t\t\t\t.end docpad.checkRequest complete", "\t\t# Chain", "\t\tnext?()", "\t\t@"]
                }, {
                    "text" : "createFile",
                    "comments" : ["=================================", "Models and Collections", "---------------------------------", "b/c compat functions", "Create File"],
                    "typ" : "function",
                    "params" : "(attrs={},opts={})",
                    "id" : 230,
                    "icon" : "method",
                    "code" : ["\t\topts.modelType = 'file'", "\t\treturn @createModel(attrs, opts)"]
                }, {
                    "text" : "createDocument",
                    "comments" : ["Create Document"],
                    "typ" : "function",
                    "params" : "(attrs={},opts={})",
                    "id" : 231,
                    "icon" : "method",
                    "code" : ["\t\topts.modelType = 'document'", "\t\treturn @createModel(attrs, opts)"]
                }, {
                    "text" : "parseFileDirectory",
                    "comments" : ["Parse File Directory"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 232,
                    "icon" : "method",
                    "code" : ["\t\topts.modelType ?= 'file'", "\t\topts.collection ?= @getDatabase()", "\t\treturn @parseDirectory(opts, next)"]
                }, {
                    "text" : "parseDocumentDirectory",
                    "comments" : ["Parse Document Directory"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 233,
                    "icon" : "method",
                    "code" : ["\t\topts.modelType ?= 'document'", "\t\topts.collection ?= @getDatabase()", "\t\treturn @parseDirectory(opts, next)"]
                }, {
                    "text" : "attachModelEvents",
                    "comments" : ["---------------------------------", "Standard functions", "Attach Model Events"],
                    "typ" : "function",
                    "params" : "(model)",
                    "id" : 234,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Only attach events if we haven't already done so", "\t\tif model.attachedDocumentEvents isnt true", "\t\t\tmodel.attachedDocumentEvents = true", "\t\t\t# Attach document events", "\t\t\tif model.type is 'document'", "\t\t\t\t# Clone", "\t\t\t\tmodel.on 'clone', (clonedModel) ->", "\t\t\t\t\tdocpad.attachModelEvents(clonedModel)", "\t\t\t\t# Render", "\t\t\t\tmodel.on 'render', (args...) ->", "\t\t\t\t\tdocpad.emitSerial('render', args...)", "\t\t\t\t# Render document", "\t\t\t\tmodel.on 'renderDocument', (args...) ->", "\t\t\t\t\tdocpad.emitSerial('renderDocument', args...)", "\t\t\t\t# Fetch a layout", "\t\t\t\tmodel.on 'getLayout', (opts={},next) ->", "\t\t\t\t\topts.collection = docpad.getCollection('layouts')", "\t\t\t\t\tlayout = docpad.getFileBySelector(opts.selector, opts)", "\t\t\t\t\tnext(null, {layout})", "\t\t\t# Remove", "\t\t\t#model.on 'remove', (file) ->", "\t\t\t#\tdocpad.getDatabase().remove(file)", "\t\t\t# ^ Commented out as for some reason this stops layouts from working", "\t\t\t# Error", "\t\t\tmodel.on 'error', (args...) ->", "\t\t\t\tdocpad.error(args...)", "\t\t\t# Log", "\t\t\tmodel.on 'log', (args...) ->", "\t\t\t\tdocpad.log(args...)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "addModel",
                    "comments" : ["Add Model"],
                    "typ" : "function",
                    "params" : "(model, opts)",
                    "id" : 235,
                    "icon" : "method",
                    "code" : ["\t\tmodel = @createModel(model, opts)", "\t\t@getDatabase().add(model)", "\t\treturn model"]
                }, {
                    "text" : "addModels",
                    "comments" : ["Add Models"],
                    "typ" : "function",
                    "params" : "(models, opts)",
                    "id" : 236,
                    "icon" : "method",
                    "code" : ["\t\tmodels = @createModels(models, opts)", "\t\t@getDatabase().add(models)", "\t\treturn models"]
                }, {
                    "text" : "createModels",
                    "comments" : ["Create Models"],
                    "typ" : "function",
                    "params" : "(models, opts)",
                    "id" : 237,
                    "icon" : "method",
                    "code" : ["\t\tfor model in models", "\t\t\t@createModel(model, opts)", "\t\t# return the for loop results"]
                }, {
                    "text" : "createModel",
                    "comments" : ["Create Model"],
                    "typ" : "function",
                    "params" : "(attrs={},opts={})",
                    "id" : 238,
                    "icon" : "method",
                    "code" : ["\t\t# Check", "\t\tif attrs instanceof FileModel", "\t\t\treturn attrs", "\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tdatabase = @getDatabase()", "\t\tfileFullPath = attrs.fullPath or null", "\t\t# Find or create", "\t\t# This functionality use to be inside ensureModel", "\t\t# But that caused duplicates in some instances", "\t\t# So now we will always check", "\t\tif attrs.fullPath", "\t\t\tresult = database.findOne(fullPath: attrs.fullPath)", "\t\t\tif result", "\t\t\t\treturn result", "\t\t# -----------------------------", "\t\t# Try and determine the model type", "\t\t# If the type hasn't been specified try and detemrine it based on the full path", "\t\tif fileFullPath", "\t\t\t# Check if we have a document or layout", "\t\t\tunless opts.modelType", "\t\t\t\tfor dirPath in config.documentsPaths.concat(config.layoutsPaths)", "\t\t\t\t\tif fileFullPath.indexOf(dirPath) is 0", "\t\t\t\t\t\tattrs.relativePath or= fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/,'')", "\t\t\t\t\t\topts.modelType = 'document'", "\t\t\t\t\t\tbreak", "\t\t\t# Check if we have a file", "\t\t\tunless opts.modelType", "\t\t\t\tfor dirPath in config.filesPaths", "\t\t\t\t\tif fileFullPath.indexOf(dirPath) is 0", "\t\t\t\t\t\tattrs.relativePath or= fileFullPath.replace(dirPath, '').replace(/^[\\/\\\\]/,'')", "\t\t\t\t\t\topts.modelType = 'file'", "\t\t\t\t\t\tbreak", "\t\t# -----------------------------", "\t\t# Create the appropriate emodel", "\t\t# Extend the opts with things we need", "\t\topts = extendr.extend({", "\t\t\tdetectEncoding: config.detectEncoding", "\t\t\trootOutDirPath: config.outPath", "\t\t}, opts)", "\t\tif opts.modelType is 'file'", "\t\t\t# Create a file model", "\t\t\tmodel = new FileModel(attrs, opts)", "\t\telse", "\t\t\t# Create document model", "\t\t\tmodel = new DocumentModel(attrs, opts)", "\t\t# -----------------------------", "\t\t# Finish up", "\t\t# Attach Events", "\t\t@attachModelEvents(model)", "\t\t# Return", "\t\treturn model"]
                }, {
                    "text" : "parseDirectory",
                    "comments" : ["Parse a directory", "next(err, files)"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 239,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Extract", "\t\t{path,createFunction} = opts", "\t\tcreateFunction ?= @createModel", "\t\tfiles = opts.collection or new FilesCollection()", "\t\t# Check if the directory exists", "\t\tsafefs.exists path, (exists) ->", "\t\t\t# Check", "\t\t\tunless exists", "\t\t\t\t# Log", "\t\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryNonexistant, path)", "\t\t\t\t# Forward", "\t\t\t\treturn next()", "\t\t\t# Log", "\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryParsing, path)", "\t\t\t# Files", "\t\t\tdocpad.scandir(", "\t\t\t\t# Path", "\t\t\t\tpath: path", "\t\t\t\t# File Action", "\t\t\t\tfileAction: (fileFullPath,fileRelativePath,nextFile,fileStat) ->", "\t\t\t\t\t# Prepare", "\t\t\t\t\tdata =", "\t\t\t\t\t\tfullPath: fileFullPath", "\t\t\t\t\t\trelativePath: fileRelativePath", "\t\t\t\t\t\tstat: fileStat", "\t\t\t\t\t# Create file", "\t\t\t\t\tfile = createFunction.call(docpad, data, opts)", "\t\t\t\t\t# Update the file's stat", "\t\t\t\t\t# To ensure changes files are handled correctly in generation", "\t\t\t\t\tfile.action 'load', (err) ->", "\t\t\t\t\t\t# Error?", "\t\t\t\t\t\treturn nextFile(err)  if err", "\t\t\t\t\t\t# Add the file to the collection", "\t\t\t\t\t\tfiles.add(file)", "\t\t\t\t\t\t# Next", "\t\t\t\t\t\tnextFile()", "\t\t\t\t# Next", "\t\t\t\tnext: (err) ->", "\t\t\t\t\t# Check", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# Log", "\t\t\t\t\tdocpad.log 'debug', util.format(locale.renderDirectoryParsed, path)", "\t\t\t\t\t# Forward", "\t\t\t\t\treturn next(null, files)", "\t\t\t)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "getPlugin",
                    "comments" : ["=================================", "Plugins", "Get a plugin by it's name"],
                    "typ" : "function",
                    "params" : "(pluginName)",
                    "id" : 240,
                    "icon" : "method",
                    "code" : ["\t\t@loadedPlugins[pluginName]"]
                }, {
                    "text" : "hasPlugins",
                    "comments" : ["Check if we have any plugins"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 241,
                    "icon" : "method",
                    "code" : ["\t\treturn typeChecker.isEmptyObject(@loadedPlugins) is false"]
                }, {
                    "text" : "destroyPlugins",
                    "comments" : ["Destroy plugins"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 242,
                    "icon" : "method",
                    "code" : ["\t\tfor own name,plugin of @loadedPlugins", "\t\t\tplugin.destroy()", "\t\t\t@loadedPlugins[name] = null", "\t\t@"]
                }, {
                    "text" : "loadPlugins",
                    "comments" : ["Load Plugins", "next(err)"],
                    "typ" : "function",
                    "params" : "(next)",
                    "id" : 243,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Snore", "\t\t@slowPlugins = {}", "\t\tsnore = balUtil.createSnore ->", "\t\t\tdocpad.log 'notice', util.format(locale.pluginsSlow, Object.keys(docpad.slowPlugins).join(', '))", "\t\t# Async", "\t\ttasks = new TaskGroup \"loadPlugins tasks\", concurrency:0, next:(err) ->", "\t\t\tdocpad.slowPlugins = {}", "\t\t\tsnore.clear()", "\t\t\treturn next(err)", "\t\t# Load website plugins", "\t\t(@config.pluginsPaths or []).forEach (pluginsPath) ->", "\t\t\ttasks.addTask \"load the website's plugins at: #{pluginsPath}\", (complete) ->", "\t\t\t\tsafefs.exists pluginsPath, (exists) ->", "\t\t\t\t\treturn complete()  unless exists", "\t\t\t\t\tdocpad.loadPluginsIn(pluginsPath, complete)", "\t\t# Load specific plugins", "\t\t(@config.pluginPaths or []).forEach (pluginPath) ->", "\t\t\ttasks.addTask \"load custom plugins at: #{pluginPath}\", (complete) ->", "\t\t\t\tsafefs.exists pluginPath, (exists) ->", "\t\t\t\t\treturn complete()  unless exists", "\t\t\t\t\tdocpad.loadPlugin(pluginPath, complete)", "\t\t# Execute the loading asynchronously", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadedPlugin",
                    "comments" : ["Loaded Plugin", "Checks if a plugin was loaded succesfully", "next(err,loaded)"],
                    "typ" : "function",
                    "params" : "(pluginName,next)",
                    "id" : 244,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Check", "\t\tloaded = docpad.loadedPlugins[pluginName]?", "\t\tnext(null,loaded)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadPlugin",
                    "comments" : ["Load PLugin", "next(err)"],
                    "typ" : "function",
                    "params" : "(fileFullPath,_next)",
                    "id" : 245,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tnext = (err) ->", "\t\t\t# Remove from slow plugins", "\t\t\tdelete docpad.slowPlugins[pluginName]", "\t\t\t# Forward", "\t\t\treturn _next(err)", "\t\t# Prepare variables", "\t\tloader = new PluginLoader(", "\t\t\tdirPath: fileFullPath", "\t\t\tdocpad: @", "\t\t\tBasePlugin: BasePlugin", "\t\t)", "\t\tpluginName = loader.pluginName", "\t\tenabled = (", "\t\t\t(config.enableUnlistedPlugins  and  config.enabledPlugins[pluginName]? is false)  or", "\t\t\tconfig.enabledPlugins[pluginName] is true", "\t\t)", "\t\t# If we've already been loaded, then exit early as there is no use for us to load again", "\t\tif docpad.loadedPlugins[pluginName]?", "\t\t\t# However we probably want to reload the configuration as perhaps the user or environment configuration has changed", "\t\t\tdocpad.loadedPlugins[pluginName].setConfig()", "\t\t\t# Complete", "\t\t\treturn _next()", "\t\t# Add to loading stores", "\t\tdocpad.slowPlugins[pluginName] = true", "\t\t# Check", "\t\tunless enabled", "\t\t\t# Skip", "\t\t\tdocpad.log 'debug', util.format(locale.pluginSkipped, pluginName)", "\t\t\treturn next()", "\t\telse", "\t\t\t# Load", "\t\t\tdocpad.log 'debug', util.format(locale.pluginLoading, pluginName)", "\t\t\t# Check existance", "\t\t\tloader.exists (err,exists) ->", "\t\t\t\t# Error or doesn't exist?", "\t\t\t\treturn next(err)  if err or not exists", "\t\t\t\t# Check support", "\t\t\t\tloader.unsupported (err,unsupported) ->", "\t\t\t\t\t# Error?", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# Unsupported?", "\t\t\t\t\tif unsupported", "\t\t\t\t\t\t# Version?", "\t\t\t\t\t\tif unsupported in ['version-docpad','version-plugin'] and config.skipUnsupportedPlugins is false", "\t\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.pluginContinued, pluginName)", "\t\t\t\t\t\telse", "\t\t\t\t\t\t\t# Type?", "\t\t\t\t\t\t\tif unsupported is 'type'", "\t\t\t\t\t\t\t\tdocpad.log 'debug', util.format(locale.pluginSkippedDueTo, pluginName, unsupported)", "\t\t\t\t\t\t\t# Something else?", "\t\t\t\t\t\t\telse", "\t\t\t\t\t\t\t\tdocpad.log 'warn', util.format(locale.pluginSkippedDueTo, pluginName, unsupported)", "\t\t\t\t\t\t\treturn next()", "\t\t\t\t\t# Load the class", "\t\t\t\t\tloader.load (err) ->", "\t\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t\t# Create an instance", "\t\t\t\t\t\tloader.create {}, (err,pluginInstance) ->", "\t\t\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t\t\t# Add to plugin stores", "\t\t\t\t\t\t\tdocpad.loadedPlugins[loader.pluginName] = pluginInstance", "\t\t\t\t\t\t\t# Log completion", "\t\t\t\t\t\t\tdocpad.log 'debug', util.format(locale.pluginLoaded, pluginName)", "\t\t\t\t\t\t\t# Forward", "\t\t\t\t\t\t\treturn next()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadPluginsIn",
                    "comments" : ["Load Plugins", "next(err)"],
                    "typ" : "function",
                    "params" : "(pluginsPath, next)",
                    "id" : 246,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Load Plugins", "\t\tdocpad.log 'debug', util.format(locale.pluginsLoadingFor, pluginsPath)", "\t\t@scandir(", "\t\t\t# Path", "\t\t\tpath: pluginsPath", "\t\t\t# Skip files", "\t\t\tfileAction: false", "\t\t\t# Handle directories", "\t\t\tdirAction: (fileFullPath,fileRelativePath,_nextFile) ->", "\t\t\t\t# Prepare", "\t\t\t\tpluginName = pathUtil.basename(fileFullPath)", "\t\t\t\treturn _nextFile(null, false)  if fileFullPath is pluginsPath", "\t\t\t\tnextFile = (err,skip) ->", "\t\t\t\t\tif err", "\t\t\t\t\t\tmessage = util.format(locale.pluginFailedToLoad, pluginName, fileFullPath)+' '+locale.errorFollows", "\t\t\t\t\t\tdocpad.warn(message, err)", "\t\t\t\t\treturn _nextFile(null, skip)", "\t\t\t\t# Forward", "\t\t\t\tdocpad.loadPlugin fileFullPath, (err) ->", "\t\t\t\t\treturn nextFile(err, true)", "\t\t\t# Next", "\t\t\tnext: (err) ->", "\t\t\t\tdocpad.log 'debug', util.format(locale.pluginsLoadedFor, pluginsPath)", "\t\t\t\treturn next(err)", "\t\t)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "compareVersion",
                    "comments" : ["=================================", "Utilities", "---------------------------------", "Utilities: Misc", "Compare current DocPad version to the latest"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 247,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\t# Check", "\t\treturn @  if config.offline or !config.checkVersion", "\t\t# Check", "\t\tbalUtil.packageCompare(", "\t\t\tlocal: @packagePath", "\t\t\tremote: config.latestPackageUrl", "\t\t\tnewVersionCallback: (details) ->", "\t\t\t\tisLocalInstallation = docpadUtil.isLocalDocPadExecutable()", "\t\t\t\tmessage = (if isLocalInstallation then locale.versionOutdatedLocal else locale.versionOutdatedGlobal)", "\t\t\t\tcurrentVersion = 'v'+details.local.version", "\t\t\t\tlatestVersion = 'v'+details.remote.version", "\t\t\t\tupgradeUrl = details.local.upgradeUrl or details.remote.installUrl or details.remote.homepage", "\t\t\t\tmessageFilled = util.format(message, currentVersion, latestVersion, upgradeUrl)", "\t\t\t\tdocpad.notify(latestVersion, title:locale.versionOutdatedNotification)", "\t\t\t\tdocpad.log('notice', messageFilled)", "\t\t)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "getExchange",
                    "comments" : ["---------------------------------", "Utilities: Exchange", "Get Exchange", "Get the exchange data", "Requires internet access", "next(err,exchange)"],
                    "typ" : "function",
                    "params" : "(next)",
                    "id" : 248,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\t# Check if it is stored locally", "\t\treturn next(null, docpad.exchange)  if typeChecker.isEmptyObject(docpad.exchange) is false", "\t\t# Offline?", "\t\treturn next(null, null)  if config.offline", "\t\t# Log", "\t\tdocpad.log('info', locale.exchangeUpdate+' '+locale.pleaseWait)", "\t\t# Otherwise fetch it from the exchangeUrl", "\t\texchangeUrl = config.exchangeUrl+'?version='+@version", "\t\tdocpad.loadConfigUrl exchangeUrl, (err,parsedData) ->", "\t\t\t# Check", "\t\t\tif err", "\t\t\t\tlocale = docpad.getLocale()", "\t\t\t\tdocpad.log('notice', locale.exchangeError+' '+locale.errgdorFollows, err)", "\t\t\t\treturn next()", "\t\t\t# Log", "\t\t\tdocpad.log('info', locale.exchangeUpdated)", "\t\t\t# Success", "\t\t\tdocpad.exchange = parsedData", "\t\t\treturn next(null, parsedData)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "contextualizeFiles",
                    "comments" : ["---------------------------------", "Utilities: Files", "Contextualize files", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 249,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t{collection,templateData} = opts", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tslowFilesObject = {}", "\t\tslowFilesTimer = null", "\t\t# Update progress", "\t\topts.progress?.step(\"contextualizeFiles (preparing)\").total(1).setTick(0)", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.contextualizingFiles, collection.length)", "\t\t# Start contextualizing", "\t\tdocpad.emitSerial 'contextualizeBefore', {collection,templateData}, (err) ->", "\t\t\t# Prepare", "\t\t\treturn next(err)  if err", "\t\t\t# Completion callback", "\t\t\ttasks = new TaskGroup \"contextualizeFiles tasks\", concurrency:0, next:(err) ->", "\t\t\t\t# Kill the timer", "\t\t\t\tclearInterval(slowFilesTimer)", "\t\t\t\tslowFilesTimer = null", "\t\t\t\t# Check", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Update progress", "\t\t\t\topts.progress?.step(\"contextualizeFiles (postparing)\").total(1).setTick(0)", "\t\t\t\t# After", "\t\t\t\tdocpad.emitSerial 'contextualizeAfter', {collection}, (err) ->", "\t\t\t\t\t# Check", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# Log", "\t\t\t\t\tdocpad.log 'debug', util.format(locale.contextualizedFiles, collection.length)", "\t\t\t\t\t# Forward", "\t\t\t\t\treturn next()", "\t\t\t# Add contextualize tasks", "\t\t\topts.progress?.step('contextualizeFiles').total(collection.length).setTick(0)", "\t\t\tcollection.forEach (file,index) ->", "\t\t\t\tfilePath = file.getFilePath()", "\t\t\t\tslowFilesObject[file.id] = file.get('relativePath') or file.id", "\t\t\t\ttasks.addTask \"conextualizing: #{filePath}\", (complete) ->", "\t\t\t\t\tfile.action 'contextualize', (err) ->", "\t\t\t\t\t\tdelete slowFilesObject[file.id]", "\t\t\t\t\t\topts.progress?.tick()", "\t\t\t\t\t\treturn complete(err)", "\t\t\t# Setup the timer", "\t\t\tslowFilesTimer = setInterval(", "\t\t\t\t->", "\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)", "\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'contextualizeFiles')+' \\n'+slowFilesArray.join('\\n'))", "\t\t\t\tconfig.slowFilesDelay", "\t\t\t)", "\t\t\t# Run tasks", "\t\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "renderFiles",
                    "comments" : ["Render files", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 250,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t{collection,templateData,renderPasses} = opts", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tslowFilesObject = {}", "\t\tslowFilesTimer = null", "\t\t# Update progress", "\t\topts.progress?.step(\"renderFiles (preparing)\").total(1).setTick(0)", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.renderingFiles, collection.length)", "\t\t# Render File", "\t\t# next(null, outContent, file)", "\t\trenderFile = (file,next) ->", "\t\t\t# Render", "\t\t\tif file.get('render') is false or !file.get('relativePath')", "\t\t\t\tfile.attributes.rtime = new Date()", "\t\t\t\tnext(null, file.getOutContent(), file)", "\t\t\telse", "\t\t\t\tfile.action('render', {templateData}, next)", "\t\t\t# Return", "\t\t\treturn file", "\t\t# Render Collection", "\t\trenderCollection = (collectionToRender,{renderPass},next) ->", "\t\t\t# Plugin Event", "\t\t\tdocpad.emitSerial 'renderCollectionBefore', {collection:collectionToRender,renderPass}, (err) =>", "\t\t\t\t# Prepare", "\t\t\t\treturn next(err)  if err", "\t\t\t\tsubTasks = new TaskGroup \"renderCollection: #{collectionToRender.options.name}\", concurrency:0, next:(err) ->", "\t\t\t\t\t# Prepare", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# Plugin Event", "\t\t\t\t\tdocpad.emitSerial('renderCollectionAfter', {collection:collectionToRender,renderPass}, next)", "\t\t\t\t# Cycle", "\t\t\t\topts.progress?.step(\"renderFiles (pass #{renderPass})\").total(collectionToRender.length).setTick(0)", "\t\t\t\tcollectionToRender.forEach (file) ->", "\t\t\t\t\tfilePath = file.getFilePath()", "\t\t\t\t\tslowFilesObject[file.id] = file.get('relativePath')", "\t\t\t\t\tsubTasks.addTask \"rendering: #{filePath}\", (complete) ->", "\t\t\t\t\t\trenderFile file, (err) ->", "\t\t\t\t\t\t\tdelete slowFilesObject[file.id] or file.id", "\t\t\t\t\t\t\topts.progress?.tick()", "\t\t\t\t\t\t\treturn complete(err)", "\t\t\t\t# Return", "\t\t\t\tsubTasks.run()", "\t\t\t\treturn collectionToRender", "\t\t# Plugin Event", "\t\tdocpad.emitSerial 'renderBefore', {collection,templateData}, (err) =>", "\t\t\t# Prepare", "\t\t\treturn next(err)  if err", "\t\t\t# Async", "\t\t\ttasks = new TaskGroup \"renderCollection: renderBefore tasks\", next:(err) ->", "\t\t\t\t# Kill the timer", "\t\t\t\tclearInterval(slowFilesTimer)", "\t\t\t\tslowFilesTimer = null", "\t\t\t\t# Check", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Update progress", "\t\t\t\topts.progress?.step(\"renderFiles (postparing)\").total(1).setTick(0)", "\t\t\t\t# After", "\t\t\t\tdocpad.emitSerial 'renderAfter', {collection}, (err) ->", "\t\t\t\t\t# Check", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# Log", "\t\t\t\t\tdocpad.log 'debug', util.format(locale.renderedFiles, collection.length)", "\t\t\t\t\t# Forward", "\t\t\t\t\treturn next()", "\t\t\t# Queue the initial render", "\t\t\tinitialCollection = collection.findAll('referencesOthers':false)", "\t\t\tsubsequentCollection = null", "\t\t\ttasks.addTask \"rendering the initial collection\", (complete) ->", "\t\t\t\trenderCollection initialCollection, {renderPass:1}, (err) ->", "\t\t\t\t\treturn complete(err)  if err", "\t\t\t\t\tsubsequentCollection = collection.findAll('referencesOthers':true)", "\t\t\t\t\trenderCollection(subsequentCollection, {renderPass:2}, complete)", "\t\t\t# Queue the subsequent renders", "\t\t\tif renderPasses > 1", "\t\t\t\t[3..renderPasses].forEach (renderPass) ->  tasks.addTask \"rendering the subsequent collection index #{renderPass}\", (complete) ->", "\t\t\t\t\trenderCollection(subsequentCollection, {renderPass}, complete)", "\t\t\t# Setup the timer", "\t\t\tslowFilesTimer = setInterval(", "\t\t\t\t->", "\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)", "\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'renderFiles')+' \\n'+slowFilesArray.join('\\n'))", "\t\t\t\tconfig.slowFilesDelay", "\t\t\t)", "\t\t\t# Run tasks", "\t\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "writeFiles",
                    "comments" : ["Write files", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts={},next)",
                    "id" : 251,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t{collection,templateData} = opts", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tslowFilesObject = {}", "\t\tslowFilesTimer = null", "\t\t# Update progress", "\t\topts.progress?.step(\"writeFiles (preparing)\").total(1).setTick(0)", "\t\t# Log", "\t\tdocpad.log 'debug', util.format(locale.writingFiles, collection.length)", "\t\t# Plugin Event", "\t\tdocpad.emitSerial 'writeBefore', {collection,templateData}, (err) =>", "\t\t\t# Prepare", "\t\t\treturn next(err)  if err", "\t\t\t# Completion callback", "\t\t\ttasks = new TaskGroup \"writeFiles tasks\", concurrency:0, next:(err) ->", "\t\t\t\t# Kill the timer", "\t\t\t\tclearInterval(slowFilesTimer)", "\t\t\t\tslowFilesTimer = null", "\t\t\t\t# Check", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Update progress", "\t\t\t\topts.progress?.step(\"writeFiles (postparing)\").total(1).setTick(0)", "\t\t\t\t# After", "\t\t\t\tdocpad.emitSerial 'writeAfter', {collection}, (err) ->", "\t\t\t\t\t# Check", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# docpad.log 'debug', util.format(locale.wroteFiles, collection.length)", "\t\t\t\t\treturn next()", "\t\t\t# Add write tasks", "\t\t\topts.progress?.step('writeFiles').total(collection.length).setTick(0)", "\t\t\tcollection.forEach (file,index) ->", "\t\t\t\tfilePath = file.getFilePath()", "\t\t\t\ttasks.addTask \"writing the file: #{filePath}\", (complete) ->", "\t\t\t\t\t# Prepare", "\t\t\t\t\tslowFilesObject[file.id] = file.get('relativePath')", "\t\t\t\t\t# Create sub tasks", "\t\t\t\t\tfileTasks = new TaskGroup \"tasks for file write: #{filePath}\", concurrency:0, next:(err) ->", "\t\t\t\t\t\tdelete slowFilesObject[file.id]", "\t\t\t\t\t\topts.progress?.tick()", "\t\t\t\t\t\treturn complete(err)", "\t\t\t\t\t# Write out", "\t\t\t\t\tif file.get('write') isnt false and file.get('dynamic') isnt true and file.get('outPath')", "\t\t\t\t\t\tfileTasks.addTask \"write out\", (complete) ->", "\t\t\t\t\t\t\tfile.action('write', complete)", "\t\t\t\t\t# Write source", "\t\t\t\t\tif file.get('writeSource') is true and file.get('fullPath')", "\t\t\t\t\t\tfileTasks.addTask \"write source\", (complete) ->", "\t\t\t\t\t\t\tfile.action('writeSource', complete)", "\t\t\t\t\t# Run sub tasks", "\t\t\t\t\tfileTasks.run()", "\t\t\t# Setup the timer", "\t\t\tslowFilesTimer = setInterval(", "\t\t\t\t->", "\t\t\t\t\tslowFilesArray = (value or key  for own key,value of slowFilesObject)", "\t\t\t\t\tdocpad.log('info', util.format(locale.slowFiles, 'writeFiles')+' \\n'+slowFilesArray.join('\\n'))", "\t\t\t\tconfig.slowFilesDelay", "\t\t\t)", "\t\t\t# Run tasks", "\t\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "generateStarted",
                    "comments" : ["---------------------------------", "Generate", "Generate Helpers"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 252,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "generateEnded",
                    "typ" : "object",
                    "children" : [],
                    "id" : 253,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "generating",
                    "typ" : "object",
                    "children" : [],
                    "id" : 254,
                    "icon" : "prop",
                    "code" : ["false"]
                }, {
                    "text" : "generated",
                    "typ" : "object",
                    "children" : [],
                    "id" : 255,
                    "icon" : "prop",
                    "code" : ["false  # true once the first generation has occured"]
                }, {
                    "text" : "createProgress",
                    "comments" : ["Create Progress Bar"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 256,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tconfig = docpad.getConfig()", "\t\t# Only show progress if", "\t\t# - prompts are supported (so no servers)", "\t\t# - and we are log level 6 (the default level)", "\t\tprogress = null", "\t\tif config.prompts and @getLogLevel() is 6", "\t\t\tprogress = require('progressbar').create()", "\t\t\t@getLoggers().console.unpipe(process.stdout)", "\t\t\t@getLogger().once 'log', progress.logListener ?= (data) ->", "\t\t\t\tif data.levelNumber <= 5  # notice or higher", "\t\t\t\t\tdocpad.destroyProgress(progress)", "\t\t# Return", "\t\treturn progress"]
                }, {
                    "text" : "destroyProgress",
                    "comments" : ["Destroy Progress Bar"],
                    "typ" : "function",
                    "params" : "(progress)",
                    "id" : 257,
                    "icon" : "method",
                    "code" : ["\t\t# Fetch", "\t\tif progress", "\t\t\tprogress.finish()", "\t\t\t@getLoggers().console.unpipe(process.stdout).pipe(process.stdout)", "\t\t# Return", "\t\treturn progress"]
                }, {
                    "text" : "destroyRegenerateTimer",
                    "comments" : ["Destroy Regenerate Timer"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 258,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Clear Regenerate Timer", "\t\tif docpad.regenerateTimer", "\t\t\tclearInterval(docpad.regenerateTimer)", "\t\t\tdocpad.regenerateTimer = null", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "createRegenerateTimer",
                    "comments" : ["Create Regenerate Timer"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 259,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\tlocale = docpad.getLocale()", "\t\tconfig = docpad.getConfig()", "\t\t# Create Regenerate Timer", "\t\tif config.regenerateEvery", "\t\t\tdocpad.regenerateTimer = setTimeout(", "\t\t\t\t->", "\t\t\t\t\tdocpad.log('info', locale.renderInterval)", "\t\t\t\t\tdocpad.action('generate', config.regenerateEveryOptions)", "\t\t\t\tconfig.regenerateEvery", "\t\t\t)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "generate",
                    "comments" : ["Generate", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 260,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = docpad.getConfig()", "\t\tlocale = docpad.getLocale()", "\t\tdatabase = docpad.getDatabase()", "\t\t# Check", "\t\treturn next()  if opts.collection?.length is 0", "\t\t# Update generating flag", "\t\tlastGenerateStarted = docpad.generateStarted", "\t\tdocpad.generateStarted = new Date()", "\t\tdocpad.generateEnded = null", "\t\tdocpad.generating = true", "\t\t# Update the cached database", "\t\tdocpad.databaseTempCache = new FilesCollection(database.models)  if database.models.length", "\t\t# Create Progress", "\t\t# Can be over-written by API calls", "\t\topts.progress ?= docpad.createProgress()", "\t\t# Grab the template data we will use for rendering", "\t\topts.templateData = docpad.getTemplateData(opts.templateData or {})", "\t\t# How many render passes will we require?", "\t\t# Can be over-written by API calls", "\t\topts.renderPasses or= config.renderPasses", "\t\t# Destroy Regenerate Timer", "\t\tdocpad.destroyRegenerateTimer()", "\t\t# Check plugin count", "\t\tdocpad.log('notice', locale.renderNoPlugins)  unless docpad.hasPlugins()", "\t\t# Log", "\t\tdocpad.log('info', locale.renderGenerating)", "\t\tdocpad.notify (new Date()).toLocaleTimeString(), title: locale.renderGeneratingNotification", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"generate tasks\")", "\t\t\t.on('item.run', (item) ->", "\t\t\t\ttotals = tasks.getTotals()", "\t\t\t\topts.progress?.step(\"generate: #{item.getConfig().name}\").total(totals.total).setTick(totals.completed)", "\t\t\t)", "\t\t\t.once('complete', (err) ->", "\t\t\t\t# Update generating flag", "\t\t\t\tdocpad.generating = false", "\t\t\t\tdocpad.generateEnded = new Date()", "\t\t\t\t# Update caches", "\t\t\t\tdocpad.databaseTempCache = null", "\t\t\t\t# Create Regenerate Timer", "\t\t\t\tdocpad.createRegenerateTimer()", "\t\t\t\t# Clear Progress", "\t\t\t\tif opts.progress", "\t\t\t\t\tdocpad.destroyProgress(opts.progress)", "\t\t\t\t\topts.progress = null", "\t\t\t\t# Error?", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Log success message", "\t\t\t\tseconds = (docpad.generateEnded - docpad.generateStarted) / 1000", "\t\t\t\thowMany = \"#{opts.collection?.length or 0}/#{database.length}\"", "\t\t\t\tdocpad.log 'info', util.format(locale.renderGenerated, howMany, seconds)", "\t\t\t\tdocpad.notify (new Date()).toLocaleTimeString(), {title: locale.renderGeneratedNotification}", "\t\t\t\t# Generated", "\t\t\t\tif opts.initial is true", "\t\t\t\t\tdocpad.generated = true", "\t\t\t\t\treturn docpad.emitSerial('generated', opts, next)", "\t\t\t\t# Safety check if generated is false but initial was false too", "\t\t\t\t# https://github.com/bevry/docpad/issues/811", "\t\t\t\telse if docpad.generated is false", "\t\t\t\t\treturn next(", "\t\t\t\t\t\tnew Error('DocPad is in an invalid state, please report this on the github issue tracker. Reference 3360')", "\t\t\t\t\t)", "\t\t\t\telse", "\t\t\t\t\treturn next()", "\t\t\t)", "\t\t# Extract functions from tasks for simplicity", "\t\t# when dealing with nested tasks/groups", "\t\taddGroup = tasks.addGroup.bind(tasks)", "\t\taddTask = tasks.addTask.bind(tasks)", "\t\t# Setup a clean database", "\t\taddTask 'Reset our collections', (complete) ->", "\t\t\t# Skip if we are not a reset generation, or an initial generation (generated is false)", "\t\t\treturn complete()  unless opts.reset is true or docpad.generated is false", "\t\t\treturn docpad.resetCollections(opts, complete)", "\t\t# Figure out the options", "\t\t# This is here as resetCollections could change our state", "\t\t# https://github.com/bevry/docpad/issues/811", "\t\taddTask 'Figure out options', ->", "\t\t\t# Mode: Cache", "\t\t\t# Shall we write to the database cache?", "\t\t\t# Set to true if the configuration option says we can, and we are the initial generation", "\t\t\topts.cache     ?= config.databaseCache", "\t\t\t# Mode: Initial", "\t\t\t# Shall we do some basic initial checks", "\t\t\t# Set to the opts.reset value if specified, or whether are the initial generation", "\t\t\topts.initial   ?= !(docpad.generated)", "\t\t\t# Mode: Reset", "\t\t\t# Shall we reset the database", "\t\t\t# Set to true if we are the initial generation", "\t\t\topts.reset     ?= opts.initial", "\t\t\t# Mode: Populate", "\t\t\t# Shall we fetch in new data?", "\t\t\t# Set to the opts.reset value if specified, or the opts.initial value", "\t\t\topts.populate  ?= opts.reset", "\t\t\t# Mode: Reload", "\t\t\t# Shall we rescan the file system for changes?", "\t\t\t# Set to the opts.reset value if specified, or the opts.initial value", "\t\t\topts.reload    ?= opts.reset", "\t\t\t# Mode: Partial", "\t\t\t# Shall we perform a partial generation (false) or a completion generation (true)?", "\t\t\t# Set to false if we are the initial generation", "\t\t\topts.partial   ?= !(opts.reset)", "\t\t\t# Log our opts", "\t\t\tdocpad.log('debug', 'Generate options:', _.pick(opts, 'cache', 'initial', 'reset', 'populate', 'reload', 'partial', 'renderPasses'))", "\t\t# Check directory structure", "\t\taddTask 'check source directory exists', (complete) ->", "\t\t\t# Skip if we are not the initial generation", "\t\t\treturn complete()  unless opts.initial is true", "\t\t\t# Continue if we are the initial generation", "\t\t\tsafefs.exists config.srcPath, (exists) ->", "\t\t\t\t# Check", "\t\t\t\tunless exists", "\t\t\t\t\terr = new Error(locale.renderNonexistant)", "\t\t\t\t\treturn complete(err)", "\t\t\t\t# Forward", "\t\t\t\treturn complete()", "\t\taddGroup 'fetch data to render', (addGroup, addTask) ->", "\t\t\t# Fetch new data", "\t\t\t# If we are a populate generation (by default an initial generation)", "\t\t\tif opts.populate is true", "\t\t\t\t# This will pull in new data from plugins", "\t\t\t\taddTask 'populateCollectionsBefore', (complete) ->", "\t\t\t\t\tdocpad.emitSerial('populateCollectionsBefore', opts, complete)", "\t\t\t\t# Import the cached data", "\t\t\t\t# If we are the initial generation, and we have caching enabled", "\t\t\t\tif opts.initial is true and opts.cache in [true, 'read']", "\t\t\t\t\taddTask 'import data from cache', (complete) ->", "\t\t\t\t\t\t# Check if we do have a databae cache", "\t\t\t\t\t\tsafefs.exists config.databaseCachePath, (exists) ->", "\t\t\t\t\t\t\treturn complete()  if exists is false", "\t\t\t\t\t\t\t# Read the database cache if it exists", "\t\t\t\t\t\t\tsafefs.readFile config.databaseCachePath, (err, data) ->", "\t\t\t\t\t\t\t\treturn complete(err)  if err", "\t\t\t\t\t\t\t\t# Parse it and apply the data values", "\t\t\t\t\t\t\t\tdatabaseData = JSON.parse data.toString()", "\t\t\t\t\t\t\t\topts.cache     = true", "\t\t\t\t\t\t\t\topts.initial   = true", "\t\t\t\t\t\t\t\topts.reset     = false", "\t\t\t\t\t\t\t\topts.populate  = true", "\t\t\t\t\t\t\t\topts.reload    = true", "\t\t\t\t\t\t\t\topts.partial   = true", "\t\t\t\t\t\t\t\tlastGenerateStarted = new Date(databaseData.generateStarted)", "\t\t\t\t\t\t\t\taddedModels = docpad.addModels(databaseData.models)", "\t\t\t\t\t\t\t\tdocpad.log 'info', util.format(locale.databaseCacheRead, database.length, databaseData.models.length)", "\t\t\t\t\t\t\t\t# @TODO we need a way of detecting deleted files between generations", "\t\t\t\t\t\t\t\treturn complete()", "\t\t\t\t# Rescan the file system", "\t\t\t\t# If we are a reload generation (by default an initial generation)", "\t\t\t\t# This is useful when the database is out of sync with the source files", "\t\t\t\t# For instance, someone shut down docpad, and made some changes, then ran docpad again", "\t\t\t\t# See https://github.com/bevry/docpad/issues/705#issuecomment-29243666 for details", "\t\t\t\tif opts.reload is true", "\t\t\t\t\taddGroup 'import data from file system', (addGroup, addTask) ->", "\t\t\t\t\t\t# Documents", "\t\t\t\t\t\tconfig.documentsPaths.forEach (documentsPath) ->", "\t\t\t\t\t\t\taddTask 'import documents', (complete) ->", "\t\t\t\t\t\t\t\tdocpad.parseDirectory({", "\t\t\t\t\t\t\t\t\tmodelType: 'document'", "\t\t\t\t\t\t\t\t\tcollection: database", "\t\t\t\t\t\t\t\t\tpath: documentsPath", "\t\t\t\t\t\t\t\t\tnext: complete", "\t\t\t\t\t\t\t\t})", "\t\t\t\t\t\t# Files", "\t\t\t\t\t\tconfig.filesPaths.forEach (filesPath) ->", "\t\t\t\t\t\t\taddTask 'import files', (complete) ->", "\t\t\t\t\t\t\t\tdocpad.parseDirectory({", "\t\t\t\t\t\t\t\t\tmodelType: 'file'", "\t\t\t\t\t\t\t\t\tcollection: database", "\t\t\t\t\t\t\t\t\tpath: filesPath", "\t\t\t\t\t\t\t\t\tnext: complete", "\t\t\t\t\t\t\t\t})", "\t\t\t\t\t\t# Layouts", "\t\t\t\t\t\tconfig.layoutsPaths.forEach (layoutsPath) ->", "\t\t\t\t\t\t\taddTask 'import layouts', (complete) ->", "\t\t\t\t\t\t\t\tdocpad.parseDirectory({", "\t\t\t\t\t\t\t\t\tmodelType: 'document'", "\t\t\t\t\t\t\t\t\tcollection: database", "\t\t\t\t\t\t\t\t\tpath: layoutsPath", "\t\t\t\t\t\t\t\t\tnext: complete", "\t\t\t\t\t\t\t\t})", "\t\t\t\t# This will pull in new data from plugins", "\t\t\t\taddTask 'populateCollections', (complete) ->", "\t\t\t\t\tdocpad.emitSerial('populateCollections', opts, complete)", "\t\taddGroup 'determine files to render', (addGroup, addTask) ->", "\t\t\t# Perform a complete regeneration", "\t\t\t# If we are a reset generation (by default an initial non-cached generation)", "\t\t\tif opts.partial is false", "\t\t\t\t# Use Entire Collection", "\t\t\t\taddTask 'Add all database models to render queue', ->", "\t\t\t\t\topts.collection ?= new FilesCollection().add(docpad.getCollection('generate').models)", "\t\t\t# Perform a partial regeneration", "\t\t\t# If we are not a reset generation (by default any non-initial generation)", "\t\t\telse", "\t\t\t\t# Use Partial Collection", "\t\t\t\taddTask 'Add only changed models to render queue', ->", "\t\t\t\t\tchangedQuery =", "\t\t\t\t\t\t$or:", "\t\t\t\t\t\t\t# Get changed files", "\t\t\t\t\t\t\tmtime: $gte: lastGenerateStarted", "\t\t\t\t\t\t\t# Get new files", "\t\t\t\t\t\t\t$and:", "\t\t\t\t\t\t\t\twtime: null", "\t\t\t\t\t\t\t\twrite: true", "\t\t\t\t\topts.collection ?= new FilesCollection().add(docpad.getCollection('generate').findAll(changedQuery).models)", "\t\taddTask 'generateBefore', (complete) ->", "\t\t\t# Exit if we have nothing to generate", "\t\t\treturn tasks.exit()  if opts.collection.length is 0", "\t\t\t# Otherwise continue down the task loop", "\t\t\tdocpad.emitSerial('generateBefore', opts, complete)", "\t\taddTask 'prepare files', (complete) ->", "\t\t\t# Log the files to generate if we are in debug mode", "\t\t\tdocpad.log 'debug', 'Files to generate at', (lastGenerateStarted), '\\n', (", "\t\t\t\t{", "\t\t\t\t\tid: model.id", "\t\t\t\t\tpath: model.getFilePath()", "\t\t\t\t\tmtime: model.get('mtime')", "\t\t\t\t\twtime: model.get('wtime')", "\t\t\t\t\tdynamic: model.get('dynamic')", "\t\t\t\t\tignored: model.get('ignored')", "\t\t\t\t\twrite: model.get('write')", "\t\t\t\t}  for model in opts.collection.models", "\t\t\t)", "\t\t\t# Add anything that references other documents (e.g. partials, listing, etc)", "\t\t\t# This could eventually be way better", "\t\t\tstandalones = opts.collection.pluck('standalone')", "\t\t\tallStandalone = standalones.indexOf(false) is -1", "\t\t\tif allStandalone is false", "\t\t\t\topts.collection.add(docpad.getCollection('referencesOthers').models)", "\t\t\t# Deeply/recursively add the layout children", "\t\t\taddLayoutChildren = (collection) ->", "\t\t\t\tcollection.forEach (file) ->", "\t\t\t\t\tif file.get('isLayout') is true", "\t\t\t\t\t\t# Find", "\t\t\t\t\t\tlayoutChildrenQuery =", "\t\t\t\t\t\t\tlayoutRelativePath: file.get('relativePath')", "\t\t\t\t\t\tlayoutChildrenCollection = docpad.getCollection('hasLayout').findAll(layoutChildrenQuery)", "\t\t\t\t\t\t# Log the files to generate if we are in debug mode", "\t\t\t\t\t\tdocpad.log 'debug', 'Layout children to generate at', (lastGenerateStarted), '\\n', (", "\t\t\t\t\t\t\t{", "\t\t\t\t\t\t\t\tid: model.id", "\t\t\t\t\t\t\t\tpath: model.getFilePath()", "\t\t\t\t\t\t\t\tmtime: model.get('mtime')", "\t\t\t\t\t\t\t\twtime: model.get('wtime')", "\t\t\t\t\t\t\t\twrite: model.get('write')", "\t\t\t\t\t\t\t}  for model in layoutChildrenCollection.models", "\t\t\t\t\t\t), '\\n', layoutChildrenQuery", "\t\t\t\t\t\t# Recurse", "\t\t\t\t\t\taddLayoutChildren(layoutChildrenCollection)", "\t\t\t\t\t\t# Add", "\t\t\t\t\t\topts.collection.add(layoutChildrenCollection.models)", "\t\t\taddLayoutChildren(opts.collection)", "\t\t\t# Filter out ignored, and no-render no-write files", "\t\t\topts.collection.reset opts.collection.reject (file) ->", "\t\t\t\treturn (file.get('render') is false and file.get('write') is false)", "\t\t\t# Log the files to generate if we are in debug mode", "\t\t\tdocpad.log 'debug', 'Files to generate at', (lastGenerateStarted), '\\n', (", "\t\t\t\t{", "\t\t\t\t\tid: model.id", "\t\t\t\t\tpath: model.getFilePath()", "\t\t\t\t\tmtime: model.get('mtime')", "\t\t\t\t\twtime: model.get('wtime')", "\t\t\t\t\tdynamic: model.get('dynamic')", "\t\t\t\t\tignored: model.get('ignored')", "\t\t\t\t\twrite: model.get('write')", "\t\t\t\t}  for model in opts.collection.models", "\t\t\t)", "\t\t\t# Forward", "\t\t\treturn complete()", "\t\taddGroup 'process file', (addGroup, addTask) ->", "\t\t\taddTask 'contextualizeFiles', {args:[opts]}, docpad.contextualizeFiles.bind(docpad)", "\t\t\taddTask 'renderFiles', {args:[opts]}, docpad.renderFiles.bind(docpad)", "\t\t\taddTask 'writeFiles', {args:[opts]}, docpad.writeFiles.bind(docpad)", "\t\taddTask 'generateAfter', (complete) ->", "\t\t\tdocpad.emitSerial('generateAfter', opts, complete)", "\t\t# Write the cache file", "\t\taddTask 'Write the database cache', (complete) ->", "\t\t\t# Skip if we do not care for writing the cache", "\t\t\treturn complete()  unless opts.cache in [true, 'write']", "\t\t\t# Write the cache", "\t\t\tdatabaseData =", "\t\t\t\tgenerateStarted: docpad.generateStarted", "\t\t\t\tgenerateEnded: docpad.generateEnded", "\t\t\t\tmodels: (model.getAttributes()  for model in database.models)", "\t\t\tdatabaseDataDump = JSON.stringify(databaseData, null, '  ')", "\t\t\tdocpad.log 'info', util.format(locale.databaseCacheWrite, databaseData.models.length)", "\t\t\treturn safefs.writeFile(config.databaseCachePath, databaseDataDump, complete)", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadDocument",
                    "comments" : ["---------------------------------", "Render", "Load a Document", "next(err,document)"],
                    "typ" : "function",
                    "params" : "(document,opts,next)",
                    "id" : 261,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t# Load", "\t\t# @TODO: don't load if already loaded", "\t\tdocument.action('load contextualize', opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "loadAndRenderDocument",
                    "comments" : ["Load and Render a Document", "next(err,document)"],
                    "typ" : "function",
                    "params" : "(document,opts,next)",
                    "id" : 262,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\t# Load", "\t\tdocpad.loadDocument document, opts, (err) ->", "\t\t\treturn next(err)  if err", "\t\t\t# Render", "\t\t\tconsole.log('now render')", "\t\t\tdocpad.renderDocument(document, opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "renderDocument",
                    "comments" : ["Render Document", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(document,opts,next)",
                    "id" : 263,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t# Render", "\t\tclone = document.clone().action 'render', opts, (err) ->", "\t\t\tresult = clone.getOutContent()", "\t\t\treturn next(err, result, document)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "renderPath",
                    "comments" : ["Render Path", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(path,opts,next)",
                    "id" : 264,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tattributes = extendr.extend({", "\t\t\tfullPath: path", "\t\t},opts.attributes)", "\t\t# Handle", "\t\tdocument = @createDocument(attributes)", "\t\t@loadAndRenderDocument(document, opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "renderData",
                    "comments" : ["Render Data", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(content,opts,next)",
                    "id" : 265,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tattributes = extendr.extend({", "\t\t\tfilename: opts.filename", "\t\t\tdata: content", "\t\t}, opts.attributes)", "\t\t# Handle", "\t\tdocument = @createDocument(attributes)", "\t\t@loadAndRenderDocument(document, opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "renderText",
                    "comments" : ["Render Text", "Doesn't extract meta information, or render layouts", "TODO: Why not? Why not just have renderData?", "next(err,result)"],
                    "typ" : "function",
                    "params" : "(text,opts,next)",
                    "id" : 266,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\topts.actions ?= ['renderExtensions', 'renderDocument']", "\t\tattributes = extendr.extend({", "\t\t\tfilename: opts.filename", "\t\t\tdata: text", "\t\t\tbody: text", "\t\t\tcontent: text", "\t\t}, opts.attributes)", "\t\t# Handle", "\t\tdocument = @createDocument(attributes)", "\t\t# Render", "\t\tclone = document.clone().action 'normalize contextualize render', opts, (err) ->", "\t\t\tresult = clone.getOutContent()", "\t\t\treturn next(err, result, document)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "render",
                    "comments" : ["Render Action", "next(err,document,result)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 267,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tlocale = @getLocale()", "\t\t# Extract document", "\t\tif opts.document", "\t\t\t@renderDocument(opts.document, opts, next)", "\t\telse if opts.data", "\t\t\t@renderData(opts.data, opts, next)", "\t\telse if opts.text", "\t\t\t@renderText(opts.text, opts, next)", "\t\telse", "\t\t\tpath = opts.path or opts.fullPath or opts.filename or null", "\t\t\tif path", "\t\t\t\t@renderPath(path, opts, next)", "\t\t\telse", "\t\t\t\t# Check", "\t\t\t\terr = new Error(locale.renderInvalidOptions)", "\t\t\t\treturn next(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "watchers",
                    "comments" : ["---------------------------------", "Watch", "Watchers"],
                    "typ" : "object",
                    "children" : [],
                    "id" : 268,
                    "icon" : "prop",
                    "code" : ["null"]
                }, {
                    "text" : "destroyWatchers",
                    "comments" : ["Destroy Watchers"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 269,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Check", "\t\tif docpad.watchers", "\t\t\t# Close each of them", "\t\t\tfor watcher in docpad.watchers", "\t\t\t\twatcher.close()", "\t\t\t# Reset the array", "\t\t\tdocpad.watchers = []", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "watch",
                    "comments" : ["Watch"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 270,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\tlocale = @getLocale()", "\t\tdatabase = @getDatabase()", "\t\t@watchers ?= []", "\t\t# Restart our watchers", "\t\trestartWatchers = (next) ->", "\t\t\t# Close our watchers", "\t\t\tdocpad.destroyWatchers()", "\t\t\t# Start a group", "\t\t\ttasks = new TaskGroup(\"watch tasks\", {concurrency:0, next})", "\t\t\t# Watch reload paths", "\t\t\treloadPaths = _.union(config.reloadPaths, config.configPaths)", "\t\t\ttasks.addTask \"watch reload paths\", (complete) -> docpad.watchdir(", "\t\t\t\tpaths: reloadPaths", "\t\t\t\tlisteners:", "\t\t\t\t\t'log': docpad.log", "\t\t\t\t\t'error': docpad.error", "\t\t\t\t\t'change': ->", "\t\t\t\t\t\tdocpad.log 'info', util.format(locale.watchReloadChange, new Date().toLocaleTimeString())", "\t\t\t\t\t\tdocpad.action 'load', (err) ->", "\t\t\t\t\t\t\treturn docpad.fatal(err)  if err", "\t\t\t\t\t\t\tperformGenerate(reset:true)", "\t\t\t\tnext: (err,_watchers) ->", "\t\t\t\t\tif err", "\t\t\t\t\t\tdocpad.log('warn', \"Watching the reload paths has failed:\", reloadPaths, err)", "\t\t\t\t\t\treturn complete()", "\t\t\t\t\tfor watcher in _watchers", "\t\t\t\t\t\tdocpad.watchers.push(watcher)", "\t\t\t\t\treturn complete()", "\t\t\t)", "\t\t\t# Watch regenerate paths", "\t\t\tregeneratePaths = config.regeneratePaths", "\t\t\ttasks.addTask \"watch regenerate paths\", (complete) -> docpad.watchdir(", "\t\t\t\tpaths: regeneratePaths", "\t\t\t\tlisteners:", "\t\t\t\t\t'log': docpad.log", "\t\t\t\t\t'error': docpad.error", "\t\t\t\t\t'change': -> performGenerate(reset:true)", "\t\t\t\tnext: (err,_watchers) ->", "\t\t\t\t\tif err", "\t\t\t\t\t\tdocpad.log('warn', \"Watching the regenerate paths has failed:\", regeneratePaths, err)", "\t\t\t\t\t\treturn complete()", "\t\t\t\t\tfor watcher in _watchers", "\t\t\t\t\t\tdocpad.watchers.push(watcher)", "\t\t\t\t\treturn complete()", "\t\t\t)", "\t\t\t# Watch the source", "\t\t\tsrcPath = config.srcPath", "\t\t\ttasks.addTask \"watch the source path\", (complete) -> docpad.watchdir(", "\t\t\t\tpath: srcPath", "\t\t\t\tlisteners:", "\t\t\t\t\t'log': docpad.log", "\t\t\t\t\t'error': docpad.error", "\t\t\t\t\t'change': changeHandler", "\t\t\t\tnext: (err,watcher) ->", "\t\t\t\t\tif err", "\t\t\t\t\t\tdocpad.log('warn', \"Watching the src path has failed:\", srcPath, err)", "\t\t\t\t\t\treturn complete()", "\t\t\t\t\tdocpad.watchers.push(watcher)", "\t\t\t\t\treturn complete()", "\t\t\t)", "\t\t\t# Run", "\t\t\ttasks.run()", "\t\t\t# Chain", "\t\t\t@", "\t\t# Timer", "\t\tregenerateTimer = null", "\t\tqueueRegeneration = ->", "\t\t\t# Reset the wait", "\t\t\tif regenerateTimer", "\t\t\t\tclearTimeout(regenerateTimer)", "\t\t\t\tregenerateTimer = null", "\t\t\t# Regenerat after a while", "\t\t\tregenerateTimer = setTimeout(performGenerate, config.regenerateDelay)", "\t\tperformGenerate = (opts={}) ->", "\t\t\t# Q: Should we also pass over the collection?", "\t\t\t# A: No, doing the mtime query in generate is more robust", "\t\t\t# Log", "\t\t\tdocpad.log util.format(locale.watchRegenerating, new Date().toLocaleTimeString())", "\t\t\t# Afterwards, re-render anything that should always re-render", "\t\t\tdocpad.action 'generate', opts, (err) ->", "\t\t\t\tdocpad.error(err)  if err", "\t\t\t\tdocpad.log util.format(locale.watchRegenerated, new Date().toLocaleTimeString())", "\t\t# Change event handler", "\t\tchangeHandler = (changeType,filePath,fileCurrentStat,filePreviousStat) ->", "\t\t\t# Prepare", "\t\t\tfileEitherStat = (fileCurrentStat or filePreviousStat)", "\t\t\t# For some reason neither of the stats may exist, this will cause errors as this is an invalid state", "\t\t\t# as we depend on at least one stat existing, otherwise, what on earth is going on?", "\t\t\t# Whatever the case, this should be fixed within watchr, not docpad", "\t\t\t# as watchr should not be giving us invalid data", "\t\t\t# https://github.com/bevry/docpad/issues/792", "\t\t\tunless fileEitherStat", "\t\t\t\terr = new Error(\"\"\"", "\t\t\t\t\t\tDocPad has encountered an invalid state while detecting changes for your files.", "\t\t\t\t\t\tSo the DocPad team can fix this right away, please provide any information you can to:", "\t\t\t\t\t\thttps://github.com/bevry/docpad/issues/792", "\t\t\t\t\t\t\"\"\")", "\t\t\t\treturn docpad.error(err)", "\t\t\t# Log the change", "\t\t\tdocpad.log 'info', util.format(locale.watchChange, new Date().toLocaleTimeString()), changeType, filePath", "\t\t\t# Check if we are a file we don't care about", "\t\t\t# This check should not be needed with v2.3.3 of watchr", "\t\t\t# however we've still got it here as it may still be an issue", "\t\t\tisIgnored = docpad.isIgnoredPath(filePath)", "\t\t\tif isIgnored", "\t\t\t\tdocpad.log 'debug', util.format(locale.watchIgnoredChange, new Date().toLocaleTimeString()), filePath", "\t\t\t\treturn", "\t\t\t# Don't care if we are a directory", "\t\t\tisDirectory = fileEitherStat.isDirectory()", "\t\t\tif isDirectory", "\t\t\t\tdocpad.log 'debug', util.format(locale.watchDirectoryChange, new Date().toLocaleTimeString()), filePath", "\t\t\t\treturn", "\t\t\t# Override the stat's mtime to now", "\t\t\t# This is because renames will not update the mtime", "\t\t\tfileCurrentStat?.mtime = new Date()", "\t\t\t# Create the file object", "\t\t\tfile = docpad.addModel({fullPath:filePath, stat:fileCurrentStat})", "\t\t\tfile.setStat(fileCurrentStat)  if changeType is 'update'", "\t\t\t# File was deleted, delete the rendered file, and remove it from the database", "\t\t\tif changeType is 'delete'", "\t\t\t\tdatabase.remove(file)", "\t\t\t\tfile.action 'delete', (err) ->", "\t\t\t\t\treturn docpad.error(err)  if err", "\t\t\t\t\tqueueRegeneration()", "\t\t\t# File is new or was changed, update it's mtime by setting the stat", "\t\t\telse if changeType in ['create', 'update']", "\t\t\t\tfile.action 'load', (err) ->", "\t\t\t\t\treturn docpad.error(err)  if err", "\t\t\t\t\tqueueRegeneration()", "\t\t# Watch", "\t\tdocpad.log(locale.watchStart)", "\t\trestartWatchers (err) ->", "\t\t\treturn next(err)  if err", "\t\t\tdocpad.log(locale.watchStarted)", "\t\t\treturn next()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "run",
                    "comments" : ["---------------------------------", "Run Action"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 271,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts, next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\tconfig = @getConfig()", "\t\t{srcPath, rootPath} = config", "\t\t# Prepare", "\t\trun = (complete) ->", "\t\t\tbalUtil.flow(", "\t\t\t\tobject: docpad", "\t\t\t\taction: 'server generate watch'", "\t\t\t\targs: [opts]", "\t\t\t\tnext: complete", "\t\t\t)", "\t\t# Check if we have the docpad structure", "\t\tsafefs.exists srcPath, (exists) ->", "\t\t\t# Check if have the correct structure, if so let's proceed with DocPad", "\t\t\treturn run(next)  if exists", "\t\t\t# We don't have the correct structure", "\t\t\t# Check if we are running on an empty directory", "\t\t\tsafefs.readdir rootPath, (err,files) ->", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Check if our directory is empty", "\t\t\t\tif files.length", "\t\t\t\t\t# It isn't empty, display a warning", "\t\t\t\t\tdocpad.log('warn', \"\\n\"+util.format(locale.skeletonNonexistant, rootPath))", "\t\t\t\t\treturn next()", "\t\t\t\telse", "\t\t\t\t\tdocpad.skeleton opts, (err) ->", "\t\t\t\t\t\t# Check", "\t\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t\t# Keep in global?", "\t\t\t\t\t\treturn run(next)  if opts.global is true or docpad.getConfig().global is true", "\t\t\t\t\t\t# Log", "\t\t\t\t\t\tdocpad.log('notice', locale.startLocal)", "\t\t\t\t\t\t# Destroy our DocPad instance so we can boot the local one", "\t\t\t\t\t\tdocpad.destroy (err) ->", "\t\t\t\t\t\t\t# Check", "\t\t\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t\t\t# Forward onto the local DocPad Instance now that it has been installed", "\t\t\t\t\t\t\treturn docpadUtil.startLocalDocPadExecutable(next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "initInstall",
                    "comments" : ["---------------------------------", "Skeleton", "Init Install", "next(err)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 272,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"initInstall tasks\", {concurrency:0, next})", "\t\ttasks.addTask \"node modules\", (complete) ->", "\t\t\tpath = pathUtil.join(config.rootPath, 'node_modules')", "\t\t\tsafefs.ensurePath(path, complete)", "\t\ttasks.addTask \"package\", (complete) ->", "\t\t\t# Exists?", "\t\t\tpath = pathUtil.join(config.rootPath, 'package.json')", "\t\t\tsafefs.exists path, (exists) ->", "\t\t\t\t# Check", "\t\t\t\treturn complete()  if exists", "\t\t\t\t# Write", "\t\t\t\tdata = JSON.stringify({", "\t\t\t\t\tname: 'no-skeleton.docpad'", "\t\t\t\t\tversion: '0.1.0'", "\t\t\t\t\tdescription: 'New DocPad project without using a skeleton'", "\t\t\t\t\tengines:", "\t\t\t\t\t\tnode: '0.10'", "\t\t\t\t\t\tnpm: '1.3'", "\t\t\t\t\tdependencies:", "\t\t\t\t\t\tdocpad: '~'+docpad.getVersion()", "\t\t\t\t\tmain: 'node_modules/docpad/bin/docpad-server'", "\t\t\t\t\tscripts:", "\t\t\t\t\t\tstart: 'node_modules/docpad/bin/docpad-server'", "\t\t\t\t}, null, '  ')", "\t\t\t\tsafefs.writeFile(path, data, complete)", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "uninstall",
                    "comments" : ["Uninstall", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 273,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"uninstall tasks\", {next})", "\t\t# Uninstall a plugin", "\t\tif opts.plugin", "\t\t\ttasks.addTask \"uninstall the plugin: #{opts.plugin}\", (complete) ->", "\t\t\t\tplugins =", "\t\t\t\t\tfor plugin in opts.plugin.split(/[,\\s]+/)", "\t\t\t\t\t\tplugin = \"docpad-plugin-#{plugin}\"  if plugin.indexOf('docpad-plugin-') isnt 0", "\t\t\t\t\t\tplugin", "\t\t\t\tdocpad.uninstallNodeModule(plugins, {", "\t\t\t\t\toutput: true", "\t\t\t\t\tnext: complete", "\t\t\t\t})", "\t\t# Re-load configuration", "\t\ttasks.addTask \"re-load configuration\", (complete) ->", "\t\t\tdocpad.load(complete)", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "install",
                    "comments" : ["Install", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 274,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"install tasks\", {next})", "\t\ttasks.addTask \"init the installation\", (complete) ->", "\t\t\tdocpad.initInstall(opts, complete)", "\t\t# Install a plugin", "\t\tif opts.plugin", "\t\t\ttasks.addTask \"install the plugin: #{opts.plugin}\", (complete) ->", "\t\t\t\tplugins =", "\t\t\t\t\tfor plugin in opts.plugin.split(/[,\\s]+/)", "\t\t\t\t\t\tplugin = \"docpad-plugin-#{plugin}\"  if plugin.indexOf('docpad-plugin-') isnt 0", "\t\t\t\t\t\tplugin += '@'+docpad.pluginVersion  if plugin.indexOf('@') is -1", "\t\t\t\t\t\tplugin", "\t\t\t\tdocpad.installNodeModule(plugins, {", "\t\t\t\t\toutput: true", "\t\t\t\t\tnext: complete", "\t\t\t\t})", "\t\ttasks.addTask \"re-initialize the website's modules\", (complete) ->", "\t\t\tdocpad.initNodeModules({", "\t\t\t\toutput: true", "\t\t\t\tnext: complete", "\t\t\t})", "\t\ttasks.addTask \"fix node package versions\", (complete) ->", "\t\t\tdocpad.fixNodePackageVersions(complete)", "\t\ttasks.addTask \"re-load the configuration\", (complete) ->", "\t\t\tdocpad.load(complete)", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "upgrade",
                    "comments" : ["Upgrade", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 275,
                    "icon" : "method",
                    "code" : ["\t\t# Update Global NPM and DocPad", "\t\t@installNodeModule('npm docpad@6', {", "\t\t\tglobal: true", "\t\t\toutput: true", "\t\t\tnext: next", "\t\t})", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "update",
                    "comments" : ["Update", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 276,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"update tasks\", {next})", "\t\ttasks.addTask \"init the install\", (complete) ->", "\t\t\tdocpad.initInstall(opts, complete)", "\t\t# Update the local docpad and plugin dependencies", "\t\t# Grouped together to avoid npm dependency shortcuts that can cause missing dependencies", "\t\t# But don't update git/http/https dependencies, those are special for some reason", "\t\t# > https://github.com/bevry/docpad/pull/701", "\t\tdependencies = []", "\t\teachr docpad.websitePackageConfig.dependencies, (version,name) ->", "\t\t\treturn  if /^docpad-plugin-/.test(name) is false or /// :// ///.test(version) is true", "\t\t\tdependencies.push(name+'@'+docpad.pluginVersion)", "\t\tif dependencies.length isnt 0", "\t\t\ttasks.addTask \"update plugins that are dependencies\", (complete) ->", "\t\t\t\tdocpad.installNodeModule('docpad@6 '+dependencies, {", "\t\t\t\t\toutput: true", "\t\t\t\t\tnext: complete", "\t\t\t\t})", "\t\t# Update the plugin dev dependencies", "\t\tdevDependencies = []", "\t\teachr docpad.websitePackageConfig.devDependencies, (version,name) ->", "\t\t\treturn  if /^docpad-plugin-/.test(name) is false", "\t\t\tdevDependencies.push(name+'@'+docpad.pluginVersion)", "\t\tif devDependencies.length isnt 0", "\t\t\ttasks.addTask \"update plugins that are dev dependencies\", (complete) ->", "\t\t\t\tdocpad.installNodeModule(devDependencies, {", "\t\t\t\t\tsave: '--save-dev'", "\t\t\t\t\toutput: true", "\t\t\t\t\tnext: complete", "\t\t\t\t})", "\t\ttasks.addTask \"fix node package versions\", (complete) ->", "\t\t\tdocpad.fixNodePackageVersions(complete)", "\t\ttasks.addTask \"re-initialize the rest of the website's modules\", (complete) ->", "\t\t\tdocpad.initNodeModules({", "\t\t\t\toutput: true", "\t\t\t\tnext: complete", "\t\t\t})", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "clean",
                    "comments" : ["Clean", "next(err)"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 277,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = docpad.getConfig()", "\t\tlocale = @getLocale()", "\t\t# Log", "\t\tdocpad.log('info', locale.renderCleaning)", "\t\t# Tasks", "\t\ttasks = new TaskGroup \"clean tasks\", {concurrency:0}, next:(err) ->", "\t\t\t# Error?", "\t\t\treturn next(err)  if err", "\t\t\t# Log", "\t\t\tdocpad.log('info', locale.renderCleaned)", "\t\t\t# Forward", "\t\t\treturn next()", "\t\ttasks.addTask 'reset the collecitons', (complete) ->", "\t\t\tdocpad.resetCollections(opts, complete)", "\t\t# Delete out path", "\t\t# but only if our outPath is not a parent of our rootPath", "\t\ttasks.addTask 'delete out path', (complete) ->", "\t\t\t# Check if our outPath is higher than our root path, so do not remove files", "\t\t\treturn complete()  if config.rootPath.indexOf(config.outPath) isnt -1", "\t\t\t# Our outPath is not related or lower than our root path, so do remove it", "\t\t\tbalUtil.rmdirDeep(config.outPath, complete)", "\t\t# Delete database cache", "\t\ttasks.addTask 'delete database cache file', (complete) ->", "\t\t\tsafefs.unlink(config.databaseCachePath, complete)", "\t\t# Run tasks", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "initSkeleton",
                    "comments" : ["Initialize a Skeleton into to a Directory", "next(err)"],
                    "typ" : "function",
                    "params" : "(skeletonModel,opts,next)",
                    "id" : 278,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# Defaults", "\t\topts.destinationPath ?= config.rootPath", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"initSkeleton tasks\", {next})", "\t\ttasks.addTask \"ensure the path we are writing to exists\", (complete) ->", "\t\t\tsafefs.ensurePath(opts.destinationPath, complete)", "\t\t# Clone out the repository if applicable", "\t\tif skeletonModel? and skeletonModel.id isnt 'none'", "\t\t\ttasks.addTask \"clone out the git repo\", (complete) ->", "\t\t\t\tdocpad.initGitRepo({", "\t\t\t\t\tpath: opts.destinationPath", "\t\t\t\t\turl: skeletonModel.get('repo')", "\t\t\t\t\tbranch: skeletonModel.get('branch')", "\t\t\t\t\tremote: 'skeleton'", "\t\t\t\t\toutput: true", "\t\t\t\t\tnext: complete", "\t\t\t\t})", "\t\telse", "\t\t\ttasks.addTask \"ensure src path exists\", (complete) ->", "\t\t\t\tsafefs.ensurePath(config.srcPath, complete)", "\t\t\ttasks.addGroup \"initialize the website directory files\", ->", "\t\t\t\t@setConfig(concurrency:0)", "\t\t\t\t# README", "\t\t\t\t@addTask \"README.md\", (complete) ->", "\t\t\t\t\t# Exists?", "\t\t\t\t\tpath = pathUtil.join(config.rootPath, 'README.md')", "\t\t\t\t\tsafefs.exists path, (exists) ->", "\t\t\t\t\t\t# Check", "\t\t\t\t\t\treturn complete()  if exists", "\t\t\t\t\t\t# Write", "\t\t\t\t\t\tdata = \"\"\"", "\t\t\t\t\t\t\t# Your [DocPad](http://docpad.org) Project", "\t\t\t\t\t\t\t## License", "\t\t\t\t\t\t\tCopyright &copy; #{(new Date()).getFullYear()}+ All rights reserved.", "\t\t\t\t\t\t\t\"\"\"", "\t\t\t\t\t\tsafefs.writeFile(path, data, complete)", "\t\t\t\t# Config", "\t\t\t\t@addTask \"docpad.coffee configuration file\", (complete) ->", "\t\t\t\t\t# Exists?", "\t\t\t\t\tdocpad.getConfigPath (err,path) ->", "\t\t\t\t\t\t# Check", "\t\t\t\t\t\treturn complete(err)  if err or path", "\t\t\t\t\t\tpath = pathUtil.join(config.rootPath, 'docpad.coffee')", "\t\t\t\t\t\t# Write", "\t\t\t\t\t\tdata = \"\"\"", "\t\t\t\t\t\t\t# DocPad Configuration File", "\t\t\t\t\t\t\t# http://docpad.org/docs/config", "\t\t\t\t\t\t\t# Define the DocPad Configuration", "\t\t\t\t\t\t\tdocpadConfig = {", "\t\t\t\t\t\t\t\t# ...", "\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t# Export the DocPad Configuration", "\t\t\t\t\t\t\tmodule.exports = docpadConfig", "\t\t\t\t\t\t\t\"\"\"", "\t\t\t\t\t\tsafefs.writeFile(path, data, complete)", "\t\t\t\t# Documents", "\t\t\t\t@addTask \"documents directory\", (complete) ->", "\t\t\t\t\tsafefs.ensurePath(config.documentsPaths[0], complete)", "\t\t\t\t# Layouts", "\t\t\t\t@addTask \"layouts directory\", (complete) ->", "\t\t\t\t\tsafefs.ensurePath(config.layoutsPaths[0], complete)", "\t\t\t\t# Files", "\t\t\t\t@addTask \"files directory\", (complete) ->", "\t\t\t\t\tsafefs.ensurePath(config.filesPaths[0], complete)", "\t\t# Run", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "installSkeleton",
                    "comments" : ["Install a Skeleton into a Directory", "next(err)"],
                    "typ" : "function",
                    "params" : "(skeletonModel,opts,next)",
                    "id" : 279,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\t# Defaults", "\t\topts.destinationPath ?= @getConfig().rootPath", "\t\t# Initialize and install the skeleton", "\t\tdocpad.initSkeleton skeletonModel, opts, (err) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err", "\t\t\t# Forward", "\t\t\tdocpad.install(opts, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "useSkeleton",
                    "comments" : ["Use a Skeleton", "next(err)"],
                    "typ" : "function",
                    "params" : "(skeletonModel,opts,next)",
                    "id" : 280,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\t# Defaults", "\t\topts.destinationPath ?= @getConfig().rootPath", "\t\t# Extract", "\t\tskeletonId = skeletonModel?.id or 'none'", "\t\tskeletonName = skeletonModel?.get('name') or locale.skeletonNoneName", "\t\t# Track", "\t\tdocpad.track('skeleton-use', {skeletonId})", "\t\t# Log", "\t\tdocpad.log('info', util.format(locale.skeletonInstall, skeletonName, opts.destinationPath)+' '+locale.pleaseWait)", "\t\t# Install Skeleton", "\t\tdocpad.installSkeleton skeletonModel, opts, (err) ->", "\t\t\t# Error?", "\t\t\treturn next(err)  if err", "\t\t\t# Log", "\t\t\tdocpad.log('info', locale.skeletonInstalled)", "\t\t\t# Forward", "\t\t\treturn next(err)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "selectSkeleton",
                    "comments" : ["Select a Skeleton", "next(err,skeletonModel)"],
                    "typ" : "function",
                    "params" : "(opts,next)",
                    "id" : 281,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\topts.selectSkeletonCallback ?= null", "\t\t# Track", "\t\tdocpad.track('skeleton-ask')", "\t\t# Get the available skeletons", "\t\tdocpad.getSkeletons (err,skeletonsCollection) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err", "\t\t\t# Provide selection to the interface", "\t\t\topts.selectSkeletonCallback(skeletonsCollection, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "skeleton",
                    "comments" : ["Skeleton"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 282,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\topts.selectSkeletonCallback ?= null", "\t\t# Don't do anything if the src path exists", "\t\tsafefs.exists config.srcPath, (exists) ->", "\t\t\t# Check", "\t\t\tif exists", "\t\t\t\terr = new Error(locale.skeletonExists)", "\t\t\t\treturn next(err)", "\t\t\t# Select Skeleton", "\t\t\tdocpad.selectSkeleton opts, (err,skeletonModel) ->", "\t\t\t\t# Check", "\t\t\t\treturn next(err)  if err", "\t\t\t\t# Use Skeleton", "\t\t\t\tdocpad.useSkeleton(skeletonModel, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "init",
                    "comments" : ["Init"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 283,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tlocale = @getLocale()", "\t\tconfig = @getConfig()", "\t\t# Don't do anything if the src path exists", "\t\tsafefs.exists config.srcPath, (exists) ->", "\t\t\t# Check", "\t\t\tif exists", "\t\t\t\terr = new Error(locale.skeletonExists)", "\t\t\t\treturn next(err)", "\t\t\t# No Skeleton", "\t\t\tdocpad.useSkeleton(null, next)", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "serveDocument",
                    "comments" : ["Server", "Serve Document"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 284,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\t{document,err,req,res} = opts", "\t\tdocpad = @", "\t\tconfig = @getConfig()", "\t\t# If no document, then exit early", "\t\tunless document", "\t\t\tif opts.statusCode?", "\t\t\t\treturn res.send(opts.statusCode)", "\t\t\telse", "\t\t\t\treturn next()", "\t\t# Prepare", "\t\tres.setHeaderIfMissing ?= (name, value) ->", "\t\t\tres.setHeader(name, value)  unless res.getHeader(name)", "\t\t# Content Type + Encoding/Charset", "\t\tencoding = document.get('encoding')", "\t\tcharset = 'utf-8'  if encoding in ['utf8', 'utf-8']", "\t\tcontentType = document.get('outContentType') or document.get('contentType')", "\t\tres.setHeaderIfMissing('Content-Type', contentType + (if charset then \"; charset=#{charset}\" else ''))", "\t\t# Cache-Control (max-age)", "\t\tres.setHeaderIfMissing('Cache-Control', \"public, max-age=#{config.maxAge}\")  if config.maxAge", "\t\t# Send", "\t\tdynamic = document.get('dynamic')", "\t\tif dynamic", "\t\t\t# If you are debugging why a dynamic document isn't rendering", "\t\t\t# it could be that you don't have cleanurls installed", "\t\t\t# e.g. if index.html is dynamic, and you are accessing it via /", "\t\t\t# then this code will not be reached, as we don't register that url", "\t\t\t# where if we have the cleanurls plugin installed, then do register that url", "\t\t\t# against the document, so this is reached", "\t\t\tcollection = new FilesCollection([document], {name:'dynamic collection'})", "\t\t\ttemplateData = extendr.extend({}, req.templateData or {}, {req,err})", "\t\t\tdocpad.action 'generate', {collection, templateData}, (err) ->", "\t\t\t\tcontent = document.getOutContent()", "\t\t\t\tif err", "\t\t\t\t\tdocpad.error(err)", "\t\t\t\t\treturn next(err)", "\t\t\t\telse", "\t\t\t\t\tif opts.statusCode?", "\t\t\t\t\t\treturn res.send(opts.statusCode, content)", "\t\t\t\t\telse", "\t\t\t\t\t\treturn res.send(content)", "\t\telse", "\t\t\t# ETag: `\"<size>-<mtime>\"`", "\t\t\tctime = document.get('date')    # use the date or mtime, it should always exist", "\t\t\tmtime = document.get('wtime')   # use the last generate time, it may not exist though", "\t\t\tstat = document.getStat()", "\t\t\tetag = stat.size + '-' + Number(mtime)   if mtime and stat", "\t\t\tres.setHeaderIfMissing('ETag', '\"' + etag + '\"')  if etag", "\t\t\t# Date", "\t\t\tres.setHeaderIfMissing('Date', ctime.toUTCString())  if ctime?.toUTCString?", "\t\t\tres.setHeaderIfMissing('Last-Modified', mtime.toUTCString())  if mtime?.toUTCString?", "\t\t\t# @TODO:", "\t\t\t# The above .toUTCString? check is a workaround because sometimes the date object", "\t\t\t# isn't really a date object, this needs to be fixed properly", "\t\t\t# https://github.com/bevry/docpad/pull/781", "\t\t\t# Send", "\t\t\tif etag and etag is (req.get('If-None-Match') or '').replace(/^\"|\"$/g, '')", "\t\t\t\tres.send(304)  # not modified", "\t\t\telse", "\t\t\t\tcontent = document.getOutContent()", "\t\t\t\tif content", "\t\t\t\t\tif opts.statusCode?", "\t\t\t\t\t\tres.send(opts.statusCode, content)", "\t\t\t\t\telse", "\t\t\t\t\t\tres.send(content)", "\t\t\t\telse", "\t\t\t\t\tif opts.statusCode?", "\t\t\t\t\t\tres.send(opts.statusCode)", "\t\t\t\t\telse", "\t\t\t\t\t\tnext()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "serverMiddlewareHeader",
                    "comments" : ["Server Middleware: Header"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 285,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Handle", "\t\t# Always enable this until we get a complaint about not having it", "\t\t# For instance, Express.js also forces this", "\t\ttools = res.get('X-Powered-By').split(/[,\\s]+/g)", "\t\ttools.push(\"DocPad v#{docpad.getVersion()}\")", "\t\ttools = tools.join(', ')", "\t\tres.set('X-Powered-By', tools)", "\t\t# Forward", "\t\tnext()", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "serverMiddlewareRouter",
                    "comments" : ["Server Middleware: Router"],
                    "typ" : "function",
                    "params" : null,
                    "icon" : "method",
                    "id" : 286,
                    "code" : ["\t\t# Prepare", "\t\tdocpad = @", "\t\t# Get the file", "\t\tdocpad.getFileByRoute req.url, (err,file) ->", "\t\t\t# Check", "\t\t\treturn next(err)  if err or file? is false", "\t\t\t# Check if we are the desired url", "\t\t\t# if we aren't do a permanent redirect", "\t\t\turl = file.get('url')", "\t\t\tcleanUrl = docpad.getUrlPathname(url)", "\t\t\tif (url isnt cleanUrl) and (url isnt req.url)", "\t\t\t\treturn res.redirect(301, url)", "\t\t\t# Serve the file to the user", "\t\t\tdocpad.serveDocument({document:file, req, res, next})", "\t\t# Chain", "\t\t@", "\t\t# Prepare", "\t\tdocpad = @", "\t\tdatabase = docpad.getDatabaseSafe()", "\t\t# Notify the user of a 404", "\t\tdocpad.log('notice', \"404 Not Found:\", req.url)", "\t\t# Check", "\t\treturn res.send(500)  unless database", "\t\t# Serve the document to the user", "\t\tdocument = database.findOne({relativeOutPath: '404.html'})", "\t\tdocpad.serveDocument({document, req, res, next, statusCode:404})", "\t\t# Chain", "\t\t@", "\t\t# Prepare", "\t\tdocpad = @", "\t\tdatabase = docpad.getDatabaseSafe()", "\t\t# Check", "\t\treturn res.send(500)  unless database", "\t\t# Serve the document to the user", "\t\tdocument = database.findOne({relativeOutPath: '500.html'})", "\t\tdocpad.serveDocument({document,err,req,res,next,statusCode:500})", "\t\t# Chain", "\t\t@"]
                }, {
                    "text" : "server",
                    "comments" : ["Server Middleware: 404", "Server Middleware: 500", "Server"],
                    "typ" : "function",
                    "params" : null,
                    "id" : 287,
                    "icon" : "method",
                    "code" : ["\t\t# Prepare", "\t\t[opts,next] = extractOptsAndCallback(opts,next)", "\t\tdocpad = @", "\t\tconfig = @config", "\t\tlocale = @getLocale()", "\t\tport = @getPort()", "\t\thostname = @getHostname()", "\t\t# Require", "\t\thttp = require('http')", "\t\texpress = require('express')", "\t\t# Config", "\t\tservers = @getServer(true)", "\t\topts.serverExpress ?= servers.serverExpress", "\t\topts.serverHttp ?= servers.serverHttp", "\t\topts.middlewareBodyParser ?= config.middlewareBodyParser ? config.middlewareStandard", "\t\topts.middlewareMethodOverride ?= config.middlewareMethodOverride ? config.middlewareStandard", "\t\topts.middlewareExpressRouter ?= config.middlewareExpressRouter ? config.middlewareStandard", "\t\topts.middleware404 ?= config.middleware404", "\t\topts.middleware500 ?= config.middleware500", "\t\t# @TODO: Why do we do opts here instead of config???", "\t\t# Tasks", "\t\ttasks = new TaskGroup(\"server tasks\", {next})", "\t\t# Before Plugin Event", "\t\ttasks.addTask \"emit serverBefore\", (complete) ->", "\t\t\tdocpad.emitSerial('serverBefore', complete)", "\t\t# Create server when none is defined", "\t\tif !opts.serverExpress or !opts.serverHttp", "\t\t\ttasks.addTask \"create server\", ->", "\t\t\t\topts.serverExpress or= express()", "\t\t\t\topts.serverHttp or= http.createServer(opts.serverExpress)", "\t\t\t\tdocpad.setServer(opts)", "\t\t# Extend the server with our middlewares", "\t\tif config.extendServer is true", "\t\t\ttasks.addTask \"extend the server\", (complete) ->", "\t\t\t\t# Parse url-encoded and json encoded form data", "\t\t\t\tif opts.middlewareBodyParser isnt false", "\t\t\t\t\topts.serverExpress.use(express.urlencoded())", "\t\t\t\t\topts.serverExpress.use(express.json())", "\t\t\t\t# Allow over-riding of the request type (e.g. GET, POST, PUT, DELETE)", "\t\t\t\tif opts.middlewareMethodOverride isnt false", "\t\t\t\t\topts.serverExpress.use(express.methodOverride())", "\t\t\t\t# Emit the serverExtend event", "\t\t\t\t# So plugins can define their routes earlier than the DocPad routes", "\t\t\t\tdocpad.emitSerial 'serverExtend', {", "\t\t\t\t\tserver: opts.serverExpress # b/c", "\t\t\t\t\texpress: opts.serverExpress # b/c", "\t\t\t\t\tserverHttp: opts.serverHttp", "\t\t\t\t\tserverExpress: opts.serverExpress", "\t\t\t\t}, (err) ->", "\t\t\t\t\treturn next(err)  if err", "\t\t\t\t\t# DocPad Header Middleware", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\topts.serverExpress.use(docpad.serverMiddlewareHeader)", "\t\t\t\t\t# Router Middleware", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\topts.serverExpress.use(opts.serverExpress.router)  if opts.middlewareExpressRouter isnt false", "\t\t\t\t\t# DocPad Router Middleware", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\topts.serverExpress.use(docpad.serverMiddlewareRouter)", "\t\t\t\t\t# Static", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\tif config.maxAge", "\t\t\t\t\t\topts.serverExpress.use(express.static(config.outPath, {maxAge:config.maxAge}))", "\t\t\t\t\telse", "\t\t\t\t\t\topts.serverExpress.use(express.static(config.outPath))", "\t\t\t\t\t# DocPad 404 Middleware", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\topts.serverExpress.use(docpad.serverMiddleware404)  if opts.middleware404 isnt false", "\t\t\t\t\t# DocPad 500 Middleware", "\t\t\t\t\t# Keep it after the serverExtend event", "\t\t\t\t\topts.serverExpress.use(docpad.serverMiddleware500)  if opts.middleware500 isnt false", "\t\t\t\t\t# Done", "\t\t\t\t\treturn complete()", "\t\t# Start Server", "\t\ttasks.addTask \"start the server\", (complete) ->", "\t\t\t# Catch", "\t\t\topts.serverHttp.once 'error', (err) ->", "\t\t\t\t# Friendlify the error message if it is what we suspect it is", "\t\t\t\tif err.message.indexOf('EADDRINUSE') isnt -1", "\t\t\t\t\terr = new Error(util.format(locale.serverInUse, port))", "\t\t\t\t# Done", "\t\t\t\treturn complete(err)", "\t\t\t# Listen", "\t\t\tdocpad.log 'debug', util.format(locale.serverStart, hostname, port, config.outPath)", "\t\t\topts.serverHttp.listen port, hostname,  ->", "\t\t\t\t# Log", "\t\t\t\taddress = opts.serverHttp.address()", "\t\t\t\tserverHostname = address.address", "\t\t\t\tserverPort = address.port", "\t\t\t\tserverLocation = \"http://#{serverHostname}:#{serverPort}/\"", "\t\t\t\tdocpad.log 'info', util.format(locale.serverStarted, serverLocation, config.outPath)", "\t\t\t\t# Done", "\t\t\t\treturn complete()", "\t\t# After Plugin Event", "\t\ttasks.addTask \"emit serverAfter\", (complete) ->", "\t\t\tdocpad.emitSerial('serverAfter', {", "\t\t\t\tserver: opts.serverExpress # b/c", "\t\t\t\texpress: opts.serverExpress # b/c", "\t\t\t\tserverHttp: opts.serverHttp", "\t\t\t\tserverExpress: opts.serverExpress", "\t\t\t}, complete)", "\t\t# Run the tasks", "\t\ttasks.run()", "\t\t# Chain", "\t\t@"]
                }
            ]
        }
    ]
