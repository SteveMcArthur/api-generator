{"text":"Docpad Lib","id":"root","children":[{"id":"C0","text":"BasePlugin","typ":"class","icon":"class","comments":["Requires","Define Plugin"],"code":["\t@extend: extendOnClass",""],"children":[{"id":"C1","text":"docpad","typ":"prop","icon":"prop","comments":["Add support for BasePlugin.extend(proto)","---------------------------------","Inherited","","DocPad Instance"],"code":["null"],"children":[]},{"id":"C2","text":"name","typ":"prop","icon":"prop","comments":["---------------------------------","Variables","","Plugin name"],"code":["null"],"children":[]},{"id":"C3","text":"config","typ":"prop","icon":"prop","comments":["Plugin config"],"code":["{}"],"children":[]},{"id":"C4","text":"instanceConfig","typ":"prop","icon":"prop","comments":[],"code":["{}"],"children":[]},{"id":"C5","text":"priority","typ":"number","icon":"number","comments":["Plugin priority"],"code":["500"],"children":[]},{"id":"C6","text":"constructor","typ":"method","icon":"method","comments":["Constructor"],"code":["\t\tme = @","\t\t{docpad,config} = opts","\t\t@docpad = docpad","","\t\t@bindListeners()","","\t\t@config = extendr.deepClone(@config)","\t\t@instanceConfig = extendr.deepClone(@instanceConfig)","\t\t@initialConfig = @config","\t\t@setConfig(config)","","\t\treturn @  if @isEnabled() is false","","\t\t@addListeners()","","\t\t@",""],"children":[]},{"id":"C7","text":"setInstanceConfig","typ":"method","icon":"method","comments":["Prepare","Bind listeners","Swap out our configuration","Return early if we are disabled","Listen to events","Chain","Set Instance Configuration"],"code":["\t\tif instanceConfig","\t\t\textendr.safeDeepExtendPlainObjects(@instanceConfig, instanceConfig)","\t\t\textendr.safeDeepExtendPlainObjects(@config, instanceConfig)  if @config","\t\t@",""],"children":[]},{"id":"C8","text":"setConfig","typ":"prop","icon":"prop","comments":["Merge in the instance configurations","Set Configuration"],"code":["(instanceConfig=null) =>","\t\tdocpad = @docpad","\t\tuserConfig = @docpad.config.plugins[@name]","\t\t@config = @docpad.config.plugins[@name] = {}","","\t\t@setInstanceConfig(instanceConfig)  if instanceConfig","","\t\tconfigPackages = [@initialConfig, userConfig, @instanceConfig]","\t\tconfigsToMerge = [@config]","\t\tdocpad.mergeConfigurations(configPackages, configsToMerge)","","\t\t@removeListeners()  unless @isEnabled()","","\t\t@",""],"children":[]},{"id":"C9","text":"getConfig","typ":"method","icon":"method","comments":["Prepare","Instance config","Merge configurations","Remove listeners if we are disabled","Chain","Get Configuration"],"code":["\t\treturn @config",""],"children":[]},{"id":"C10","text":"bindEvents","typ":"method","icon":"method","comments":["Alias for b/c"],"code":["@addListeners()"],"children":[]},{"id":"C11","text":"bindListeners","typ":"method","icon":"method","comments":["Bind Listeners"],"code":["\t\tpluginInstance = @","\t\tdocpad = @docpad","\t\tevents = docpad.getEvents()","","\t\teachr events, (eventName) ->","\t\t\t# Fetch the event handler","\t\t\teventHandler = pluginInstance[eventName]","","\t\t\t# Check it exists and is a function","\t\t\tif typeChecker.isFunction(eventHandler)","\t\t\t\t# Bind the listener to the plugin","\t\t\t\tpluginInstance[eventName] = eventHandler.bind(pluginInstance)","","\t\t@",""],"children":[]},{"id":"C12","text":"addListeners","typ":"method","icon":"method","comments":["Prepare","Bind events","Chain","Add Listeners"],"code":["\t\tpluginInstance = @","\t\tdocpad = @docpad","\t\tevents = docpad.getEvents()","","\t\teachr events, (eventName) ->","\t\t\t# Fetch the event handler","\t\t\teventHandler = pluginInstance[eventName]","","\t\t\t# Check it exists and is a function","\t\t\tif typeChecker.isFunction(eventHandler)","\t\t\t\t# Apply the priority","\t\t\t\teventHandlerPriority = pluginInstance[eventName+'Priority'] or pluginInstance.priority or null","\t\t\t\teventHandler.priority ?= eventHandlerPriority","\t\t\t\teventHandler.name = \"#{pluginInstance.name}: {eventName}\"","\t\t\t\teventHandler.name += \"(priority eventHandler.priority})\"  if eventHandler.priority?","","\t\t\t\t# Wrap the event handler, and bind it to docpad","\t\t\t\tdocpad","\t\t\t\t\t.off(eventName, eventHandler)","\t\t\t\t\t.on(eventName, eventHandler)","","\t\t@",""],"children":[]},{"id":"C13","text":"removeListeners","typ":"method","icon":"method","comments":["Prepare","Bind events","Chain","Remove Listeners"],"code":["\t\tpluginInstance = @","\t\tdocpad = @docpad","\t\tevents = docpad.getEvents()","","\t\teachr events, (eventName) ->","\t\t\t# Fetch the event handler","\t\t\teventHandler = pluginInstance[eventName]","","\t\t\t# Check it exists and is a function","\t\t\tif typeChecker.isFunction(eventHandler)","\t\t\t\t# Wrap the event handler, and unbind it from docpad","\t\t\t\tdocpad.off(eventName, eventHandler)","","\t\t@",""],"children":[]},{"id":"C14","text":"destroy","typ":"method","icon":"method","comments":["Prepare","Bind events","Chain","Destroy"],"code":["\t\t@removeListeners()","\t\t@",""],"children":[]},{"id":"C15","text":"isEnabled","typ":"method","icon":"method","comments":["Is Enabled?"],"code":["\t\treturn @config.enabled isnt false","",""],"children":[]}]}]}